{"version":3,"file":"748.da6c48d8bd1aba13.js","mappings":"6VA0UYA,MAAA,QAAqDA,MAAA,GAEnDA,+CAFmDA,MAAA,GAAAA,MAAAC,EAAAC,aAAAC,SAAAC,GAAAC,6BAGrDL,MAAA,QAAsDA,MAAA,iBAAWA,8BACjEA,MAAA,gCAGEA,MAAA,kDAGEA,MAAA,aAAAM,EAAAJ,aAAAC,SAAAC,GAAAG,KAAAP,CAAiD,4BAAAM,EAAAJ,aAAAC,SAAAC,GAAAG,KAAAP,6BAEnDA,MAAA,qCAOAA,MAAA,kCAGEA,MAAA,aAAAQ,EAAAC,YAAA,GAAAT,CAA6B,MAAAQ,EAAAE,eAAA,GAAAV,iCAE/BA,MAAA,kDAOEA,MAAA,aAAAW,EAAAF,YAAAE,EAAAT,aAAAC,SAAAC,GAAAQ,MAAAZ,CAA8D,MAAAW,EAAAD,eAAAC,EAAAT,aAAAC,SAAAC,GAAAQ,MAAAZ,kCAIlEA,MAAA,QAA8BA,MAAA,GAAUA,kCAAVA,MAAA,GAAAA,MAAAa,6BAO5Bb,MAAA,qCAEEA,MAAA,aAAAc,EAAAT,KAAAL,CAAwB,4BAAAc,EAAAP,KAAAP,kCAN9BA,MAAA,UAAAA,CAAkE,QAC5DA,MAAA,GAA0BA,QAC9BA,MAAA,WACEA,MAAA,wBACAA,MAAA,EAAAe,GAAA,cAKFf,QACAA,MAAA,QAAIA,MAAA,GAA8DA,QAClEA,MAAA,QAAIA,MAAA,GAA8DA,QAClEA,MAAA,SAAIA,MAAA,IAA8DA,QAClEA,MAAA,SAAIA,MAAA,QAACA,QACLA,MAAA,SAAIA,MAAA,QAACA,QACLA,MAAA,SAAIA,MAAA,QAACA,QACLA,MAAA,SAAIA,MAAA,IAAgEA,iDAfhEA,MAAA,GAAAA,MAAAgB,EAAAC,gBAAAb,IAOiBJ,MAAA,GAAAA,MAAA,UAAAgB,EAAAd,aAAAgB,eAAAd,GAAAe,OAEjBnB,MAAA,GAAAA,MAAAgB,EAAAd,aAAAgB,eAAAd,GAAAgB,MAAAC,MAAA,IACArB,MAAA,GAAAA,MAAAgB,EAAAd,aAAAgB,eAAAd,GAAAgB,MAAAC,MAAA,IACArB,MAAA,GAAAA,MAAAgB,EAAAd,aAAAgB,eAAAd,GAAAgB,MAAAC,MAAA,IAIArB,MAAA,GAAAA,MAAAgB,EAAAM,IAAAN,EAAAd,aAAAgB,eAAAd,GAAAgB,MAAAC,mCA7DRrB,MAAA,GACEA,MAAA,UAAAA,CAImB,QACbA,MAAA,GAA0BA,QAC9BA,MAAA,EAAAuB,EAAA,aAGAvB,MAAA,EAAAwB,EAAA,aACAxB,MAAA,EAAAyB,EAAA,aAEAzB,MAAA,QACEA,MAAA,EAAA0B,EAAA,cAKA1B,MAAA,EAAA2B,EAAA,cAKF3B,QACAA,MAAA,SACEA,MAAA,GAAA4B,GAAA,cAKA5B,MAAA,GAAA6B,GAAA,cASF7B,QAEAA,MAAA,GAAA8B,GAAA,aACA9B,MAAA,SAAIA,MAAA,IAAeA,UAErBA,MAAA,GAAA+B,GAAA,cAkBF/B,uDA7DIA,MAAA,GAAAA,MAAA,SAAAgC,EAAA9B,aAAA+B,WAAA7B,GAAAJ,CAAgD,aAAAgC,EAAA9B,aAAAC,SAAAC,MAAA,EAAhDJ,CAAgD,QAAAgC,EAAA9B,aAAAC,SAAAC,MAAA,GAI5CJ,MAAA,GAAAA,MAAAgC,EAAAf,gBAAAb,IACCJ,MAAA,GAAAA,MAAA,OAAAI,EAAA,GAAA4B,EAAA9B,aAAAC,SAAAC,IAGAJ,MAAA,GAAAA,MAAA,OAAAI,EAAA,IAAA4B,EAAA9B,aAAAC,SAAAC,IACAJ,MAAA,GAAAA,MAAA,WAAAI,GAKAJ,MAAA,GAAAA,MAAA,OAAAgC,EAAA9B,aAAAC,SAAAC,IAKAJ,MAAA,GAAAA,MAAA,QAAAgC,EAAA9B,aAAAC,SAAAC,IAOAJ,MAAA,GAAAA,MAAA,OAAAgC,EAAA9B,aAAAgC,aAAA9B,IAKAJ,MAAA,GAAAA,MAAA,QAAAgC,EAAA9B,aAAAgC,aAAA9B,IAAA4B,EAAA9B,aAAAC,SAAAC,IAAA,IAAA4B,EAAA9B,aAAAC,SAAAC,GAAAQ,MASgBZ,MAAA,GAAAA,MAAA,UAAAmC,GACjBnC,MAAA,GAAAA,MAAAgC,EAAAV,IAAAa,IAEDnC,MAAA,GAAAA,MAAA,OAAAgC,EAAA9B,aAAAgB,eAAAd,+BAuBLJ,MAAA,QAAoDA,MAAA,GAAUA,kCAAVA,MAAA,GAAAA,MAAAoC,8BAOpDpC,MAAA,QAAmDA,MAAA,GAAUA,kCAAVA,MAAA,GAAAA,MAAAqC,8BAHrDrC,MAAA,OAAAA,CAA+C,QACzCA,MAAA,qBAAeA,QACnBA,MAAA,WACAA,MAAA,EAAAsC,GAAA,aACAtC,MAAA,QAAIA,MAAA,GAAoCA,iCADnBA,MAAA,GAAAA,MAAA,UAAAuC,EAAArC,aAAAsC,WACjBxC,MAAA,GAAAA,MAAAuC,EAAAjB,IAAAiB,EAAArC,aAAAsC,uCAMJxC,MAAA,QAA2DA,MAAA,GAAeA,kCAAfA,MAAA,GAAAA,MAAA,GAAAyC,8BAM3DzC,MAAA,QAA2DA,MAAA,GAAcA,kCAAdA,MAAA,GAAAA,MAAA,EAAA0C,8BAO3D1C,MAAA,QAAsDA,MAAA,GAAcA,kCAAdA,MAAA,GAAAA,MAAA,EAAA2C,8BAOtD3C,MAAA,QAA+CA,MAAA,GAAUA,kCAAVA,MAAA,GAAAA,MAAA4C,8BAO/C5C,MAAA,QAA+CA,MAAA,GAAUA,kCAAVA,MAAA,GAAAA,MAAA6C,8BAO/C7C,MAAA,QAA+CA,MAAA,GAAUA,kCAAVA,MAAA,GAAAA,MAAA8C,8BAhInD9C,MAAA,aAAAA,CAA8C,UAA9CA,CAA8C,QAEtCA,MAAA,UAAIA,QACRA,MAAA,WAAgBA,MAAA,qBAAeA,QAC/BA,MAAA,QAAIA,MAAA,cAAQA,QACZA,MAAA,QAAIA,MAAA,gBAAUA,QACdA,MAAA,SAAIA,MAAA,eAAQA,QACZA,MAAA,SAAIA,MAAA,iBAAUA,QACdA,MAAA,SAAIA,MAAA,gBAASA,QACbA,MAAA,SAAIA,MAAA,eAAQA,QACZA,MAAA,SAAIA,MAAA,UAAGA,UAETA,MAAA,GAAA+C,GAAA,yBAiEA/C,MAAA,WAAAA,CAAoC,SAC9BA,MAAA,iBAAUA,QACdA,MAAA,YACAA,MAAA,GAAAgD,GAAA,aACAhD,MAAA,SAAIA,MAAA,IAAqCA,UAG3CA,MAAA,GAAAiD,GAAA,aAOAjD,MAAA,WAAAA,CAAqB,SACfA,MAAA,iBAAUA,QACdA,MAAA,YACAA,MAAA,GAAAkD,GAAA,aACAlD,MAAA,SAAIA,MAAA,IAAiDA,UAEvDA,MAAA,QAAAA,CAAI,SACEA,MAAA,iBAAUA,QACdA,MAAA,YACAA,MAAA,GAAAmD,GAAA,aACAnD,MAAA,SAAIA,MAAA,IAAgDA,UAGtDA,MAAA,QAAAA,CAAI,SACEA,MAAA,oBAAaA,QACjBA,MAAA,YACAA,MAAA,GAAAoD,GAAA,aACApD,MAAA,SAAIA,MAAA,IAA2CA,UAGjDA,MAAA,WAAAA,CAAiC,SAC3BA,MAAA,YAAKA,QACTA,MAAA,YACAA,MAAA,GAAAqD,GAAA,aACArD,MAAA,SAAIA,MAAA,IAAgCA,UAGtCA,MAAA,QAAAA,CAAI,SACEA,MAAA,YAAKA,QACTA,MAAA,YACAA,MAAA,GAAAsD,GAAA,aACAtD,MAAA,SAAIA,MAAA,IAAgCA,UAGtCA,MAAA,QAAAA,CAAI,SACEA,MAAA,YAAKA,QACTA,MAAA,YACAA,MAAA,GAAAuD,GAAA,aACAvD,MAAA,SAAIA,MAAA,IAAgCA,kCArHPA,MAAA,IAAAA,MAAA,UAAAwD,EAAAtD,aAAAiB,OAoERnB,MAAA,GAAAA,MAAA,UAAAwD,EAAAtD,aAAAuD,YACjBzD,MAAA,GAAAA,MAAAwD,EAAAlC,IAAAkC,EAAAtD,aAAAuD,aAGDzD,MAAA,GAAAA,MAAA,OAAAwD,EAAAlC,IAAAkC,EAAAtD,aAAAsC,WAAA,GAUkBxC,MAAA,GAAAA,MAAA,UAAAwD,EAAAtD,aAAAwD,SAAAC,OACjB3D,MAAA,GAAAA,MAAA,GAAAwD,EAAAlC,IAAAkC,EAAAtD,aAAAwD,SAAAC,QAKiB3D,MAAA,GAAAA,MAAA,UAAAwD,EAAAtD,aAAAwD,SAAAE,OACjB5D,MAAA,GAAAA,MAAA,EAAAwD,EAAAlC,IAAAkC,EAAAtD,aAAAwD,SAAAE,QAMiB5D,MAAA,GAAAA,MAAA,UAAAwD,EAAAtD,aAAA2D,cACjB7D,MAAA,GAAAA,MAAA,EAAAwD,EAAAlC,IAAAkC,EAAAtD,aAAA2D,eAMiB7D,MAAA,GAAAA,MAAA,UAAAwD,EAAAtD,aAAA4D,OACjB9D,MAAA,GAAAA,MAAAwD,EAAAlC,IAAAkC,EAAAtD,aAAA4D,QAMiB9D,MAAA,GAAAA,MAAA,UAAAwD,EAAAtD,aAAA6D,OACjB/D,MAAA,GAAAA,MAAAwD,EAAAlC,IAAAkC,EAAAtD,aAAA6D,QAMiB/D,MAAA,GAAAA,MAAA,UAAAwD,EAAAtD,aAAA8D,OACjBhE,MAAA,GAAAA,MAAAwD,EAAAlC,IAAAkC,EAAAtD,aAAA8D,SCxZd,MAAMC,GAAY,CAAC,WAAY,aAAc,WAAY,aAAc,YAAa,YAE9EC,EAAqC,CACzC,EAAsB,CACpB,CAACC,IAAUC,iBAAkB,CAC3B,CAAE/C,MAAO,CAAC,EAAG,EAAG,GAAIgD,MAAO,CAAC,WAAY,UAAW,aACnD,CAAEhD,MAAO,CAAC,EAAG,EAAG,GAAIgD,MAAO,CAAC,WAAY,cAE1C,CAACF,IAAUG,mBAAoB,CAC7B,CAAEjD,MAAO,CAAC,EAAG,EAAG,GAAIgD,MAAO,CAAC,WAAY,UAAW,YACnD,CAAEhD,MAAO,CAAC,EAAG,EAAG,GAAIgD,MAAO,CAAC,WAAY,WAAY,WAAY,cAElE,CAACF,IAAUI,gBAAiB,CAC1B,CAAElD,MAAO,CAAC,EAAG,EAAG,GAAIgD,MAAO,CAAC,WAAY,WAAY,aACpD,CAAEhD,MAAO,CAAC,EAAG,EAAG,GAAIgD,MAAO,CAAC,WAAY,aACxC,CAAEhD,MAAO,CAAC,EAAG,EAAG,GAAIgD,MAAO,CAAC,cAE9B,CAACF,IAAUK,eAAgB,CACzB,CAAEnD,MAAO,CAAC,EAAG,EAAG,GAAIgD,MAAO,CAAC,WAAY,WAAY,UAAW,aAC/D,CAAEhD,MAAO,CAAC,EAAG,EAAG,GAAIgD,MAAO,CAAC,aAC5B,CAAEhD,MAAO,CAAC,EAAG,EAAG,GAAIgD,MAAO,CAAC,eAGhC,EAAuB,CACrB,CAACF,IAAUC,iBAAkB,CAC3B,CAAE/C,MAAO,CAAC,EAAG,EAAG,GAAIgD,MAAO,CAAC,YAC5B,CAAEhD,MAAO,CAAC,EAAG,EAAG,GAAIgD,MAAO,CAAC,WAAY,WAAY,WAAY,aAChE,CAAEhD,MAAO,CAAC,EAAG,EAAG,GAAIgD,MAAO,CAAC,WAAY,cAE1C,CAACF,IAAUG,mBAAoB,CAC7B,CAAEjD,MAAO,CAAC,EAAG,EAAG,GAAIgD,MAAO,CAAC,aAC5B,CAAEhD,MAAO,CAAC,EAAG,EAAG,GAAIgD,MAAO,CAAC,YAC5B,CAAEhD,MAAO,CAAC,EAAG,EAAG,GAAIgD,MAAO,CAAC,YAC5B,CAAEhD,MAAO,CAAC,EAAG,EAAG,GAAIgD,MAAO,CAAC,UAAW,aACvC,CAAEhD,MAAO,CAAC,EAAG,EAAG,GAAIgD,MAAO,CAAC,UAAW,WAAY,cAErD,CAACF,IAAUI,gBAAiB,CAC1B,CAAElD,MAAO,CAAC,EAAG,EAAG,GAAIgD,MAAO,CAAC,YAC5B,CAAEhD,MAAO,CAAC,EAAG,EAAG,GAAIgD,MAAO,CAAC,UAAW,WAAY,aACnD,CAAEhD,MAAO,CAAC,EAAG,EAAG,GAAIgD,MAAO,CAAC,aAC5B,CAAEhD,MAAO,CAAC,EAAG,EAAG,GAAIgD,MAAO,CAAC,WAAY,cAE1C,CAACF,IAAUK,eAAgB,CACzB,CAAEnD,MAAO,CAAC,EAAG,EAAG,GAAIgD,MAAO,CAAC,UAAW,YACvC,CAAEhD,MAAO,CAAC,EAAG,EAAG,GAAIgD,MAAO,CAAC,cAGhC,EAAwB,CACtB,CAACF,IAAUC,iBAAkB,CAC3B,CAAE/C,MAAO,CAAC,EAAG,EAAG,GAAIgD,MAAO,CAAC,WAAY,WAAY,WAAY,aAChE,CAAEhD,MAAO,CAAC,EAAG,EAAG,GAAIgD,MAAO,CAAC,WAAY,WAAY,aACpD,CAAEhD,MAAO,CAAC,EAAG,EAAG,GAAIgD,MAAO,CAAC,WAAY,cAE1C,CAACF,IAAUG,mBAAoB,CAC7B,CAAEjD,MAAO,CAAC,EAAG,EAAG,GAAIgD,MAAO,CAAC,WAAY,WAAY,aACpD,CAAEhD,MAAO,CAAC,EAAG,EAAG,GAAIgD,MAAO,CAAC,aAC5B,CAAEhD,MAAO,CAAC,EAAG,EAAG,GAAIgD,MAAO,CAAC,WAAY,aACxC,CAAEhD,MAAO,CAAC,EAAG,EAAG,GAAIgD,MAAO,CAAC,WAAY,cAE1C,CAACF,IAAUI,gBAAiB,CAC1B,CAAElD,MAAO,CAAC,EAAG,EAAG,GAAIgD,MAAO,CAAC,UAAW,aACvC,CAAEhD,MAAO,CAAC,EAAG,EAAG,GAAIgD,MAAO,CAAC,WAAY,aACxC,CAAEhD,MAAO,CAAC,EAAG,EAAG,GAAIgD,MAAO,CAAC,cAE9B,CAACF,IAAUK,eAAgB,CACzB,CAAEnD,MAAO,CAAC,EAAG,EAAG,GAAIgD,MAAO,CAAC,YAC5B,CAAEhD,MAAO,CAAC,EAAG,EAAG,GAAIgD,MAAO,CAAC,YAC5B,CAAEhD,MAAO,CAAC,EAAG,EAAG,GAAIgD,MAAO,CAAC,gBAU3B,IAAMI,GAAsB,MAA7B,MAAOA,EAyJXC,cAxJAC,KAAAC,aAAeA,IAEfD,KAAAE,KAAoB,KAEpBF,KAAAG,aAAc,EAGdH,KAAAI,QAAU,CACRC,OAAQ,CACNC,QAAS,EACTC,UAAU,GAEZb,MAAO,CAELc,UAAW,EACXC,gBAAgB,GAElB/D,MAAO,CACLgE,QAAS,CACPC,SAAU,EACVC,WAAY,EACZC,SAAU,EACVC,WAAY,EACZC,UAAW,EACXC,SAAU,GAEZC,cAAe,CACbN,SAAU,EACVC,WAAY,EACZC,SAAU,EACVC,WAAY,EACZC,UAAW,EACXC,SAAU,GAGZE,eAAe,EACfC,SAAU,IACVC,SAAU,EACVC,UAAW,IACXC,SAAU,IAEZC,UAAW,CACTC,sBAAsB,EACtBC,UAAU,EACVC,MAAK,GAEPC,KAAM,CACJC,QAAS,EACTC,YAAa,GAEfC,UAAW,CACTC,mCAAmC,GAErCC,eAAgB,CACdhC,KAAAiC,OAAwB,KACxBjC,KAAAzE,aAA2B,KAC3ByE,KAAAkC,cAAgB,EACRlC,KAAAmC,QAAkB,EAC1BnC,KAAAoC,GAAgB,KAKdpC,KAAKqC,GAAK,IAAIC,GAChB,CAEA3F,IAAI4F,GACF,OAAOA,EAAEC,OAAO,CAACC,EAAGC,IAAMD,EAAIC,EAAG,EACnC,CAEA5G,YAAYG,GACV,OAAO0G,KAAqB1G,EAC9B,CAEAF,eAAeE,GACb,OAAO2G,KAAqB3G,EAC9B,CAEAK,gBAAgBuG,GACd,OAAQA,GACN,KAAK,EACH,MAAO,SACT,KAAK,EACH,MAAO,YACT,KAAK,EACH,MAAO,cACT,KAAK,EACH,MAAO,YACT,KAAK,EACH,MAAO,aACT,QACE,MAAO,UAEb,CAEAC,kBAAkBC,GAEhB,OAAQA,GACN,KAAK,EACH,MAAO,qDACT,KAAK,EACH,MAAO,gDACT,KAAK,EACH,MAAO,kDACT,KAAK,EACH,MAAO,sEACT,KAAK,EACH,MAAO,0BACT,KAAK,EACH,MAAO,iFACT,QACE,MAAO,iBAEb,CAEMC,WAAQ,IAAAC,EAAAjD,KAAA,SAAAkD,KAAA,YACZD,EAAK/C,WAAaiD,kBAElBC,QAAQC,IAAIJ,EAAK/C,KAAM,EAHX,EAId,CAEAoD,aACEtD,KAAKkC,cAAgB,EAGrBlC,KAAKmC,QAAUoB,YAAY,KACzBvD,KAAKkC,eAAiB,EAClBlC,KAAKkC,eAAiB,KACxBlC,KAAKwD,WAAS,EALAxD,KAAKI,QAAQC,OAAOC,QAAU,IAAO,IAQzD,CAEAkD,YACMxD,KAAKmC,UACPnC,KAAKkC,cAAgB,IACrBuB,cAAczD,KAAKmC,SACnBnC,KAAKmC,QAAU,EAEnB,CAEMuB,MAAG,IAAAC,EAAA3D,KAAA,SAAAkD,KAAA,YAEP,GADAS,EAAK1B,OAAS0B,EAAKpI,aAAe,MAC7BoI,EAAKzD,KAAM,MAAM,IAAI0D,MAAM,4BAChCD,EAAKxD,aAAc,EAEnB,MAAMiC,QAAWuB,EAAKE,yBACtBT,QAAQC,IAAIjB,GAGZ,MAAM0B,EAAW1B,EAAG0B,SACdC,EAAaD,EAASE,OAAO,CAACC,EAAMpB,IAAUiB,EAASI,QAAQD,IAASpB,GAC9E,GAAIkB,EAAWI,OAAS,EAGtB,OAFAC,MAAM,mCAAqCL,EAAWM,KAAK,YAC3DV,EAAKxD,aAAc,GAKrB,MAAMmE,EAAWlC,EAAGkC,SACdC,EAAcD,EAASN,OAAO,CAACC,EAAMpB,IAAUyB,EAASJ,QAAQD,IAASpB,GAC/E,GAAI0B,EAAYJ,OAAS,EAGvB,OAFAC,MAAM,qCAAuCG,EAAYF,KAAK,YAC9DV,EAAKxD,aAAc,GAIrBwD,EAAKvB,GAAKA,EACVuB,EAAKL,aACL,MAAMrB,QAAe0B,EAAKzD,KAAKsE,MAAMpC,GACrCuB,EAAKH,YACLG,EAAKpI,mBAAqBoI,EAAKc,mBAAmBxC,GAClD0B,EAAK1B,OAASA,EACd0B,EAAKxD,aAAc,CAAM,EAhClB,EAiCT,CAEMsE,mBAAmBxC,GAAc,IAAAyC,EAAA1E,KAAA,SAAAkD,KAAA,YACrC,MAAM1G,EAAQ,CACZ,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,GAChB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,GAChB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,GAChB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,GAChB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,IAGZhB,EAAuC,CAAC,KAAM,KAAM,KAAM,KAAM,MAChEe,EAAiC,CAAC,KAAM,KAAM,KAAM,KAAM,MAC1De,EAAiC,CAAC,KAAM,KAAM,KAAM,KAAM,MAC1DC,EAA0B,EAAC,GAAO,GAAO,GAAO,GAAO,GAC7D,IAAIoH,EAAgB,EAEpB,MAAM7F,EAAa,CAAC,GAAI,GAAI,GAAI,GAAI,GAAI,IAClCjB,EAAY,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,GAE5BkB,EAAW,CACfC,MAAO,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,GACvBC,MAAO,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,IAEnBC,EAAe,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,GAErC,QAAS0F,KAAM3C,EAAQA,OAAQ4C,KAAM,CAEnC,IADKD,EAAGE,WAAW,cACa,GAA5B7C,EAAQA,OAAQ4C,KAAKD,GAAU,SAEnC,MAAOG,EAAGC,GAAQJ,EAAGK,MAAM,KAC3BpH,EAAUqH,SAASF,KAAU/C,EAAQA,OAAQ4C,KAAKD,GAAM,GAE1D,QAASA,KAAM3C,EAAQA,OAAQ4C,KAAM,CAEnC,IADKD,EAAGE,WAAW,UACa,GAA5B7C,EAAQA,OAAQ4C,KAAKD,GAAU,SAEnC,MAAOG,EAAGI,EAAMC,EAAMC,GAAQT,EAAGK,MAAM,KACjCK,EAAaZ,EAAKtE,QAAQ4B,eAAekD,SAASG,IAClDE,EAAYL,SAASE,IAAS,EAAI,EAAI,EAC5C,QAASJ,EAAO,EAAGA,EAAO,EAAGA,IAC3BxI,EAAM0I,SAASC,IAAOH,EAAO,EAAIO,IAAcD,EAAWN,GAId,GAA1C/C,EAAQA,OAAQ4C,KAAK,UAAUM,OACjC7H,EAAW4H,SAASC,KAAS,GAGjC,MAAMK,EAAc,GACpB,QAASZ,KAAM3C,EAAQA,OAAQ4C,KAAM,CAEnC,IADKD,EAAGE,WAAW,UACa,GAA5B7C,EAAQA,OAAQ4C,KAAKD,GAAU,SAEnC,MAAOG,EAAGI,EAAMM,GAAUb,EAAGK,MAAM,KACnCO,EAAYE,KAAK,CAAEP,KAAMD,SAASC,GAAOM,OAAQA,IAEnD,GAAID,EAAYrB,OAAS,EACvB,QAASwB,KAAKH,EAAa,CACzB,IAAII,QAAgBlB,EAAKrC,GAAGwD,eACzBC,MAAM,kBACNC,OAAOJ,EAAEF,QACTO,UACH,GAAsB,GAAlBJ,EAAQzB,OAAa,SACzB,MAAMF,EAAO2B,EAAQ,GACrBpK,EAASmK,EAAER,MAAQlB,EACnBzH,EAAMmJ,EAAER,MAAM,IAAMlB,EAAKtD,SACzBnE,EAAMmJ,EAAER,MAAM,IAAMlB,EAAKrD,WACzBpE,EAAMmJ,EAAER,MAAM,IAAMlB,EAAKpD,SACzBrE,EAAMmJ,EAAER,MAAM,IAAMlB,EAAKnD,WACzBtE,EAAMmJ,EAAER,MAAM,IAAMlB,EAAKlD,UACzBvE,EAAMmJ,EAAER,MAAM,IAAMlB,EAAKjD,SAEzB1D,EAAWqI,EAAER,MAAyB,GAAjBlB,EAAKgC,SAC1B1I,EAAaoI,EAAER,MAAQlB,EAAKhI,MAAQiK,KAAgBC,aACpDxB,GAAiBpH,EAAaoI,EAAER,MAAQ,EAAI,EAKhD,QAASP,KAAM3C,EAAQA,OAAQ4C,KAAM,CAGnC,IADKD,EAAGE,WAAW,eACa,GAA5B7C,EAAQA,OAAQ4C,KAAKD,GAAU,SAEnC,IAAKG,EAAGI,EAAMiB,EAAOC,GAAWzB,EAAGK,MAAM,KACzC,MAAMxI,EAAS8C,EAA2C2F,SAASkB,IACjElB,SAASC,GAAQ,GACjBD,SAASmB,IAELC,QAAmBC,QAAQC,IAC/B/J,EAAMiD,MAAM+G,IAAG,eAAAC,KAAAxD,KAAC,UAAOyD,GACrB,aAAajC,EAAKrC,GAAGuE,cAAcd,MAAM,QAAQC,OAAOY,GAAGE,OAC7D,GAAC,gBAAAC,GAAA,OAAAJ,EAAAK,MAAA/G,KAAAgH,UAAA,EAFc,KAKjBzK,EAAe2I,SAASC,IAAS,CAC/B1I,MAAOA,EACPD,MAAO8J,GAKX,QAAS1B,KAAM3C,EAAQA,OAAQ4C,KAAM,CAEnC,IADKD,EAAGE,WAAW,SACa,GAA5B7C,EAAQA,OAAQ4C,KAAKD,GAAU,SAEnC,MAAOG,EAAGkC,EAAMjC,GAAQJ,EAAGK,MAAM,KACjClG,EAAiB,KAARkI,EAAc,QAAU,SAAS/B,SAASF,KAAU/C,EAAQA,OAAQ4C,KAAKD,GAIpF,IAAIsC,EAAwB,EAC5B,QAAStC,KAAM3C,EAAQA,OAAQ4C,KAAM,CAEnC,IADKD,EAAGE,WAAW,cACa,GAA5B7C,EAAQA,OAAQ4C,KAAKD,GAAU,SAEnC,MAAOG,EAAGC,GAAQJ,EAAGK,MAAM,KAC3B/F,EAAagG,SAASF,KAAU/C,EAAQA,OAAQ4C,KAAKD,GACrDsC,GAAyBjF,EAAQA,OAAQ4C,KAAKD,GAI5CD,EAAgBuC,IAElB3J,EAAa,IAAK,EAClBoH,KAGF,QAASQ,EAAO,EAAGA,EAAO,GAAKR,EAAgBuC,EAAuB/B,IAChE5H,EAAa4H,IACO,GAApB7H,EAAW6H,IACO,MAAlB3J,EAAS2J,KACb5H,EAAa4H,IAAQ,EACrBR,KAIF,MAAMxF,EAAQ,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,GAC9B,QAAS6F,EAAO,EAAGA,EAAO,EAAGA,IAAQ,CACnC,QAASG,EAAO,EAAGA,EAAO,EAAGA,IAC3BhG,EAAM6F,IAASxI,EAAM2I,GAAMH,GAEvBA,EAAO,GAA6B,MAAxBzI,EAAe4I,KAC7BhG,EAAM6F,IAASzI,EAAe4I,GAAM1I,MAASC,MAASsI,IAG1D7F,EAAM6F,IAASnH,EAAUmH,GACzB7F,EAAM6F,IAASlG,EAAWkG,GAC1B5B,QAAQC,IACN,qBACA2B,EACA9F,EAAa8F,GACb,IACA7F,EAAM6F,GACN,GAAKjG,EAASC,MAAMgG,GACpB,EAAIjG,EAASE,MAAM+F,GACnB,EAAI9F,EAAa8F,IAEnB7F,EAAM6F,IAAS,GAAKjG,EAASC,MAAMgG,GAAQ,EAAIjG,EAASE,MAAM+F,GAAQ,EAAI9F,EAAa8F,GAIzF,MAAM3F,EAAQF,EAAMsH,IAAKE,GAAMQ,KAAKC,MAAMT,EAAI,KACxCvH,EAAQD,EAAMsH,IAAKE,GAAMA,EAAI,IAC7BU,EAAUhI,EAAMmD,OAAO,CAACC,EAAGC,IAAMD,EAAIC,EAAG,GAE9C,MAAO,CACLlG,QACA0C,eACAH,WACAlB,YACAsB,QACAC,QACAC,QACAgI,UACAvI,aACAtD,WACAe,iBACAe,aACAC,eACA,EAnLmC,EAoLvC,CAEM+J,SAASlB,GAAoB,IAAAmB,EAAAvH,KAAA,SAAAkD,KAAA,YACjC,IAAI1G,QAAe+K,EAAKlF,GAAGwD,eACxBC,MAAM,QACN0B,SAAShI,IAAUiI,eACnBC,WACA1B,UAEH,OAAa2B,MAATvB,IACF5J,EAAQA,EAAMwH,OAAQC,GAASA,EAAKmC,OAASA,IAI/C5J,EAAQA,EAAMwH,OAAO,CAACC,EAAMpB,IAExBrG,EAAMoL,UAAWC,GACRA,EAAEC,gBAAkB7D,EAAK6D,iBAC5BjF,GAeHrG,CAAM,EA/BoB,EAgCnC,CAEMqH,yBAAsB,IAAAkE,EAAA/H,KAAA,SAAAkD,KAAA,YAC1B,IAAK6E,EAAK7H,KAAM,MAAM,IAAI0D,MAAM,4BAEhC,MAAMxB,EAAK,CACT1G,KAAM,iBACN0E,QAAS,CACP4H,OAAQD,EAAK7H,KAAK+H,YAClB1H,SAAUwH,EAAK3H,QAAQC,OAAOE,SAC9B2H,MAAOH,EAAK3H,QAAQC,OAAOC,SAE7B6H,UAAW,CACTC,UAAWL,EAAK7H,KAAKmI,QACrB3M,KAAM,YACNmJ,KAAM,IAERyD,UAAW,CACT,CACE5M,KAAM,gBACN6M,KAAM,CACJtB,KAAMc,EAAK7H,KAAKsI,OAChBC,GAAIV,EAAK3H,QAAQ1D,MAAMyE,SACvBuH,GAAIX,EAAK3H,QAAQ1D,MAAMgE,QAAQC,UAEjCkE,KAAM,IAER,CACEnJ,KAAM,kBACN6M,KAAM,CACJtB,KAAMc,EAAK7H,KAAKsI,OAChBC,GAAIV,EAAK3H,QAAQ1D,MAAMyE,SACvBuH,GAAIX,EAAK3H,QAAQ1D,MAAMgE,QAAQE,YAEjCiE,KAAM,IAER,CACEnJ,KAAM,gBACN6M,KAAM,CACJtB,KAAMc,EAAK7H,KAAKsI,OAChBC,GAAIV,EAAK3H,QAAQ1D,MAAMyE,SACvBuH,GAAIX,EAAK3H,QAAQ1D,MAAMgE,QAAQG,UAEjCgE,KAAM,IAER,CACEnJ,KAAM,kBACN6M,KAAM,CACJtB,KAAMc,EAAK7H,KAAKsI,OAChBC,GAAIV,EAAK3H,QAAQ1D,MAAMyE,SACvBuH,GAAIX,EAAK3H,QAAQ1D,MAAMgE,QAAQI,YAEjC+D,KAAM,IAER,CACEnJ,KAAM,iBACN6M,KAAM,CACJtB,KAAMc,EAAK7H,KAAKsI,OAChBC,GAAIV,EAAK3H,QAAQ1D,MAAMyE,SACvBuH,GAAIX,EAAK3H,QAAQ1D,MAAMgE,QAAQK,WAEjC8D,KAAM,IAER,CACEnJ,KAAM,gBACN6M,KAAM,CACJtB,KAAMc,EAAK7H,KAAKsI,OAChBC,GAAIV,EAAK3H,QAAQ1D,MAAMyE,SACvBuH,GAAIX,EAAK3H,QAAQ1D,MAAMgE,QAAQM,UAEjC6D,KAAM,KAGV8D,OAAQ,GACR7E,SAAU,GACVQ,SAAU,IAIZ,QAASU,EAAO,EAAGA,EAAO,EAAGA,IAAQ,CAEnC,IAAI4D,EAAW,GADFb,EAAK3H,QAAQ1D,MAAcuE,cAAc3B,GAAU0F,IAEhE5C,EAAGuG,OAAQjD,KAAK,CACdhK,KAAM,YAAYsJ,IAClBiC,KAAMc,EAAK7H,KAAK2I,OAChBJ,GAAIG,EACJF,GAAIE,IAENxG,EAAGkG,UAAWtD,GAAMH,KAAKa,KAAK,CAAEhK,KAAM,YAAYsJ,IAAQ8D,KAAM,IAGlE,MAAMC,GAA+C,EAA/BhB,EAAK3H,QAAQV,MAAMc,WAAiB,EACpDwI,GAAqD,EAA/BjB,EAAK3H,QAAQV,MAAMc,WAAiB,EAC1DyI,EAAuBF,GAAgBC,EAEvCxM,QAAcuL,EAAKT,WACzB,IAAI4B,EAAU1M,EAAMwH,OAAQ6D,GAAMA,EAAE1C,MAAQ3F,IAAUC,iBAClD0J,EAAY3M,EAAMwH,OAAQ6D,GAAMA,EAAE1C,MAAQ3F,IAAUG,mBACpDyJ,EAAS5M,EAAMwH,OAAQ6D,GAAMA,EAAE1C,MAAQ3F,IAAUI,gBACjDyJ,EAAO7M,EAAMwH,OAAQ6D,GAAMA,EAAE1C,MAAQ3F,IAAUK,eAGnD,GAAgC,GAA5BkI,EAAK3H,QAAQmB,UAAUG,MAA+B,CACxD,MAAM0E,EAAQ2B,EAAK3H,QAAQmB,UAAUG,MACrCwH,EAAUA,EAAQlF,OAAQ6D,GAAMA,EAAEzB,OAASA,GAC3C+C,EAAYA,EAAUnF,OAAQ6D,GAAMA,EAAEzB,OAASA,GAC/CgD,EAASA,EAAOpF,OAAQ6D,GAAMA,EAAEzB,OAASA,GACzCiD,EAAOA,EAAKrF,OAAQ6D,GAAMA,EAAEzB,OAASA,GAGvC,IAAIkD,EAAc,CAACJ,EAASC,EAAWC,EAAQC,GAE/C,MAAME,EAAoB,CACxB7N,KAAM,WACNmJ,KAAM,GACN0D,KAAM,CAAEtB,KAAMc,EAAK7H,KAAKsJ,OAAQf,GAAI,EAAGC,GAAI,IAEvCe,EAAqB,GAE3B,QAASrD,EAAQ,EAAGA,EAAQ,EAAGA,IAAS,CACtC,MAAMsD,EAAW,SAAStD,IAC1BhE,EAAG0B,SAAU4B,KAAKgE,GAClBH,EAAkB1E,KAAKa,KAAK,CAAEhK,KAAMgO,EAAUZ,KAAM,IAEpDW,EAAmB/D,KAAK,CACtBhK,KAAM,YAAY0K,IAClBvB,KAAM,CAAC,CAAEnJ,KAAMgO,EAAUZ,MAAM,IAC/BP,KAAM,CAAEtB,KAAMc,EAAK7H,KAAKsJ,OAAQf,GAAI,EAAGC,GAAI,KAK/C,MAAMiB,EAAqB,CACzBjO,KAAM,YACNmJ,KAAM,GACN0D,KAAM,CAAEtB,KAAMc,EAAK7H,KAAKsI,OAAQC,GAAI,EAAGC,GAAI,IAGzCX,EAAK3H,QAAQV,MAAMe,iBACrB2C,QAAQC,IAAI,oBACZsG,EAAmBpB,KAAO,CAAEtB,KAAMc,EAAK7H,KAAK2I,OAAQJ,GAAI,EAAGC,GAAI,IAGjEtG,EAAGkG,UAAW5C,KAAK6D,GACnBnH,EAAGkG,UAAW5C,QAAQ+D,GACtBrH,EAAGkG,UAAW5C,KAAKiE,GAEnB,MACMC,EAAsB,GACtBC,EAAqB,GAQ3B,QAAS1E,EAAO,EAAGA,EAAO,EAAGA,IAAQ,CACnC,MAAM2E,EAAmB,CACvBpO,KAAM,WAAWyJ,IACjBN,KAAM,GACN0D,KAAM,CAAEtB,KAAMc,EAAK7H,KAAK2I,OAAQJ,GAAI,EAAGC,GAAI,IAK7C,GAHAtG,EAAGkG,UAAW5C,KAAKoE,GAGfd,EAAoB,CACtB,MAAMe,EAAgC,CACpCrO,KAAM,mBAAmByJ,IACzBN,KAAM,GACN0D,KAAM,CAAEtB,KAAMc,EAAK7H,KAAKsJ,OAAQf,GAAI,EAAGC,GAAI,IAO7C,GAJAtG,EAAG0B,SAAU4B,KAAK,UAAUP,KAC5BwE,EAAmB9E,KAAKa,KAAK,CAAEhK,KAAM,UAAUyJ,IAAQ2D,KAAM,IAGzDf,EAAK3H,QAAQ0B,UAAUC,kCAAmC,CAK5DK,EAAGkG,UAAW5C,KAAKqE,GAGnB,QAAS3D,EAAQ,EAAGA,EAAQ,EAAGA,IAAS,CACtC,MAAM4D,EAAWzK,EAA2C6G,GAAOjB,EAAO,GAC1E,QAAS0C,EAAI,EAAGA,EAAImC,EAAQ7F,OAAQ0D,IAAK,CACvC,IAAIpL,EAAQuN,EAAQnC,GACpB,MAAMnM,EAAO,aAAayJ,KAAQiB,KAASyB,IAC3CzF,EAAG0B,SAAU4B,KAAKhK,GAElBqO,EAA8BlF,KAAKa,KAAK,CAAEhK,KAAMA,EAAMoN,KAAM,IAG5D1G,EAAGkG,UAAW5C,KAAK,CACjBhK,KAAM,aAAayJ,KAAQiB,aAC3BvB,KAAM,CACJ,CAAEnJ,KAAMA,EAAMoN,KAAM,GACpB,CAAEpN,KAAM,SAAS0K,IAAS0C,MAAM,IAElCP,KAAM,CAAEtB,KAAMc,EAAK7H,KAAKsJ,OAAQf,GAAI,EAAGC,GAAI,KAI7CtG,EAAGkG,UAAW5C,KAAK,CACjBhK,KAAM,aAAayJ,KAAQiB,cAC3BvB,KAAM,CACJ,CAAEnJ,KAAMA,EAAMoN,KAAM,GACpB,CAAEpN,KAAM,UAAUyJ,IAAQ2D,MAAM,IAElCP,KAAM,CAAEtB,KAAMc,EAAK7H,KAAKsJ,OAAQf,GAAI,EAAGC,GAAI,KAI7C,QAASuB,EAAU,EAAGA,EAAU,EAAGA,IAC7BxN,EAAMC,MAAMuN,GAAW,GACzB7H,EAAGkG,UAAW2B,GAASpF,KAAKa,KAAK,CAC/BhK,KAAMA,EACNoN,KAAMrM,EAAMC,MAAMuN,KAKxB7H,EAAG+F,UAAWtD,KAAKa,KAAK,CAAEhK,KAAMA,EAAMoN,MAAM,QAOlD,IAAIoB,EAAmB,CACrBxO,KAAM,UAAUyJ,WAChBN,KAAM,CAAC,CAAEnJ,KAAM,UAAUyJ,IAAQ2D,KAAM,IACvCP,KAAM,CAAEtB,KAAMc,EAAK7H,KAAKsJ,OAAQf,GAAI,EAAGC,GAAI,IAE7CtG,EAAGkG,UAAW5C,KAAKwE,GAEnB,QAASC,EAAS,EAAGA,EAAS,EAAGA,IAAU,CACzC,MAAMC,EAAU,CACd1O,KAAM,QAAQyJ,KAAQgF,IACtBtF,KAAM,GACN0D,KAAM,CAAEtB,KAAMc,EAAK7H,KAAK2I,OAAQJ,GAAI,EAAGC,GAAI,IAEzCO,IAAsBmB,EAAQ7B,KAAO,CAAEtB,KAAMc,EAAK7H,KAAKsI,OAAQC,GAAI,EAAGC,GAAI,IAE9E,QAASrD,EAAO,EAAGA,EAAO0C,EAAK3H,QAAQ4B,eAAemC,OAAQkB,IAAQ,CACpE,MAAMgF,EAAW,QAAQlF,KAAQgF,KAAU9E,IAC3CjD,EAAG0B,SAAU4B,KAAK2E,GAClBD,EAAQvF,KAAKa,KAAK,CAAEhK,KAAM2O,EAAUvB,KAAM,IAG1CiB,EAA8BlF,KAAKa,KAAK,CAAEhK,KAAM2O,EAAUvB,MAAM,MAChEoB,EAAiBrF,KAAKa,KAAK,CAAEhK,KAAM2O,EAAUvB,MAAM,MAEnDe,EAAmBnE,KAAK2E,GAGxBP,EAAiBjF,KAAKa,KAAK,CAAEhK,KAAM2O,EAAUvB,KAAM,IAE/CG,GACF7G,EAAG+F,UAAWtD,KAAKa,KAAK,CAAEhK,KAAM2O,EAAUvB,MAAM,MAIlD,QAASwB,EAAI,EAAGA,EAAI,EAAGA,IAAK,CAC1B,IAAIC,EAAKD,EACLH,EAAS,IAAGI,GAAM,GAEtBnI,EAAGkG,UAAWiC,GAAI1F,KAAKa,KAAK,CAC1BhK,KAAM2O,EACNvB,KAAMf,EAAK3H,QAAQ4B,eAAeqD,GAAMiF,KAIxClI,EAAG+F,UAAWtD,KAAKa,KAAK,CACtBhK,KAAM2O,EACNvB,MAlIE,GAkIef,EAAK3H,QAAQ4B,eAAeqD,GAAMiF,MAI3DlI,EAAGkG,UAAW5C,KAAK0E,IAIvB,GAAIrB,EAEF,QAAS9E,KAAQqF,EAAYnE,GAAO,CAClC,MACMqF,EAAa,QAAQrF,KADXlB,EAAK6D,iBAErB1F,EAAG0B,SAAU4B,KAAK8E,GAElBpI,EAAGkG,UAAW,GAAGzD,KAAKa,KAAK,CAAEhK,KAAM8O,EAAY1B,KAAM7E,EAAKtD,WAC1DyB,EAAGkG,UAAW,GAAGzD,KAAKa,KAAK,CAAEhK,KAAM8O,EAAY1B,KAAM7E,EAAKrD,aAC1DwB,EAAGkG,UAAW,GAAGzD,KAAKa,KAAK,CAAEhK,KAAM8O,EAAY1B,KAAM7E,EAAKpD,WAC1DuB,EAAGkG,UAAW,GAAGzD,KAAKa,KAAK,CAAEhK,KAAM8O,EAAY1B,KAAM7E,EAAKnD,aAC1DsB,EAAGkG,UAAW,GAAGzD,KAAKa,KAAK,CAAEhK,KAAM8O,EAAY1B,KAAM7E,EAAKlD,YAC1DqB,EAAGkG,UAAW,GAAGzD,KAAKa,KAAK,CAAEhK,KAAM8O,EAAY1B,KAAM7E,EAAKjD,WAE1D8I,EAAiBjF,KAAKa,KAAK,CAAEhK,KAAM8O,EAAY1B,KAAM,IAEjDG,GACF7G,EAAG+F,UAAWtD,KAAKa,KAAK,CAAEhK,KAAM8O,EAAY1B,KAAM,MAIpDW,EAAmBxF,EAAKmC,OAAOvB,KAAKa,KAAK,CAAEhK,KAAM8O,EAAY1B,KAAM,IAG/D7E,EAAKgC,WACP0D,EAAmB9E,KAAKa,KAAK,CAAEhK,KAAM8O,EAAY1B,KAAM,IAEvD1G,EAAG+F,UAAWtD,KAAKa,KAAK,CAAEhK,KAAM8O,EAAY1B,KAAM,MAEhD7E,EAAKhI,MAAQiK,KAAgBC,cAC/ByD,EAAoBlE,KAAK8E,IAMjC,GAAIzC,EAAK3H,QAAQuB,KAAKC,QAAU,EAAG,CACjC,MAAM6I,EAAa,CACjB/O,KAAM,aACNmJ,KAAM,GACN0D,KAAM,CACJtB,KAAMc,EAAK3H,QAAQuB,KAAKC,QAAU,EAAImG,EAAK7H,KAAKsI,OAAST,EAAK7H,KAAK2I,OACnEJ,GAAIV,EAAK3H,QAAQuB,KAAKC,QACtB8G,GAAI,IAGR,QAAS1D,EAAO,EAAGA,EAAO,EAAGA,IAE3B5C,EAAGuG,OAAQjD,KAAK,CAAEhK,KAAM,SAAYsJ,IAAQiC,KAAMc,EAAK7H,KAAKsI,OAAQC,GAAI,EAAGC,GAAI,IAC/EtG,EAAGuG,OAAQjD,KAAK,CAAEhK,KAAM,SAAYsJ,IAAQiC,KAAMc,EAAK7H,KAAKsI,OAAQC,GAAI,EAAGC,GAAI,IAC/EtG,EAAGkC,SAAUoB,KAAK,SAAYV,KAC9B5C,EAAGkC,SAAUoB,KAAK,SAAYV,KAE9B5C,EAAGkG,UAAWtD,GAAMH,KAAKa,KAAK,CAAEhK,KAAM,SAAYsJ,IAAQ8D,KAAM,IAChE1G,EAAGkG,UAAWtD,GAAMH,KAAKa,KAAK,CAAEhK,KAAM,SAAYsJ,IAAQ8D,KAAM,KAGhE2B,EAAW5F,KAAKa,KAAK,CAAEhK,KAAM,SAAYsJ,IAAQ8D,KAAM,IACvD2B,EAAW5F,KAAKa,KAAK,CAAEhK,KAAM,SAAYsJ,IAAQ8D,KAAM,IAEzD1G,EAAGkG,UAAW5C,KAAK+E,GAGrB,GAAI1C,EAAK3H,QAAQuB,KAAKE,YAAc,EAAG,CACrC,MAAM6I,EAAkB,CACtBhP,KAAM,kBACNmJ,KAAM,GACN0D,KAAM,CACJtB,KAAMc,EAAK3H,QAAQuB,KAAKE,YAAc,EAAIkG,EAAK7H,KAAKsI,OAAST,EAAK7H,KAAK2I,OACvEJ,GAAIV,EAAK3H,QAAQuB,KAAKE,YACtB6G,GAAI,IAGFiC,EAAmB,CACvBjP,KAAM,mBACNmJ,KAAM,GACN0D,KAAM,CAAEtB,KAAMc,EAAK7H,KAAKsJ,OAAQf,GAAI,EAAGC,GAAI,IAG7C,QAASkC,KAAShB,EAChBe,EAAiB9F,KAAKa,KAAK,CAAEhK,KAAMkP,EAAO9B,MAAM,IAElD,QAAS8B,KAASf,EAChBc,EAAiB9F,KAAKa,KAAK,CAAEhK,KAAMkP,EAAO9B,MAAM,MAGlD,GAAIE,EACF,QAAS7D,EAAO,EAAGA,EAAO,EAAGA,IAC3BwF,EAAiB9F,KAAKa,KAAK,CAAEhK,KAAM,UAAUyJ,IAAQ2D,KAAM,IAI/D,QAAS9D,EAAO,EAAGA,EAAO,EAAGA,IAC3B5C,EAAGkG,UAAWtD,GAAMH,KAAKa,KAAK,CAAEhK,KAAM,YAAYsJ,IAAQ8D,KAAM,IAChE4B,EAAgB7F,KAAKa,KAAK,CAAEhK,KAAM,YAAYsJ,IAAQ8D,KAAM,IAC5D6B,EAAiB9F,KAAKa,KAAK,CAAEhK,KAAM,YAAYsJ,IAAQ8D,KAAM,IAE7D1G,EAAGuG,OAAQjD,KAAK,CAAEhK,KAAM,YAAYsJ,IAAQiC,KAAMc,EAAK7H,KAAKsI,OAAQC,GAAI,EAAGC,GAAI,IAC/EtG,EAAGkC,SAAUoB,KAAK,YAAYV,KAEhC5C,EAAGkG,UAAW5C,KAAKgF,GACnBtI,EAAGkG,UAAW5C,KAAKiF,GAGrB,GAAI5C,EAAK3H,QAAQ1D,MAAM0E,SAAW,GAAK2G,EAAK3H,QAAQ1D,MAAM4E,SAAW,GAAI,CAMvE,QAAS0D,EAAO,EAAGA,EAAO,EAAGA,IAAQ,CACnC5C,EAAGuG,OAAQjD,KAAK,CAAEhK,KAAM,SAASsJ,IAAQiC,KAAMc,EAAK7H,KAAKsI,OAAQC,GAAI,EAAGC,GAAI,IAE5EtG,EAAGkC,SAAUoB,KAAK,SAASV,KAC3B5C,EAAGkC,SAAUoB,KAAK,QAAQV,KAK1B,MAAM6F,EAAyB,CAC7BnP,KAAM,sBAAsBsJ,IAC5BH,KAAM,CACJ,CAAEnJ,KAAM,SAASsJ,IAAQ8D,MAAM,GAC/B,CAAEpN,KAAM,QAAQsJ,IAAQ8D,MAAM,OAC3B1G,EAAGkG,UAAWtD,GAAMH,MAEzB0D,KAAM,CAAEtB,KAAMc,EAAK7H,KAAK2I,OAAQJ,GAAI,EAAGC,GAAI,IAG7CtG,EAAGkG,UAAW5C,KAAKmF,GAIrB,GAAI9C,EAAK3H,QAAQ1D,MAAM0E,SAAW,EAAG,CACnC,MAAM0J,EAAiB,CACrBpP,KAAM,uBACNmJ,KAAM,GACN0D,KAAM,CAAEtB,KAAMc,EAAK7H,KAAK6K,OAAQtC,GAAI,EAAGC,GAAIX,EAAK3H,QAAQ1D,MAAM0E,WAEhEgC,QAAQC,IAAI,8BAA+B0E,EAAK3H,QAAQ1D,MAAM0E,UAC9D,QAAS4D,EAAO,EAAGA,EAAO,EAAGA,IAC3B8F,EAAejG,KAAKa,KAAK,CAAEhK,KAAM,QAAQsJ,IAAQ8D,KAAM,IAEzD1G,EAAGkG,UAAW5C,KAAKoF,GAIrB,GAAI/C,EAAK3H,QAAQ1D,MAAM4E,SAAW,GAAI,CACpC,MAAM0J,EAAkB,CACtBtP,KAAM,wBACNmJ,KAAM,GACN0D,KAAM,CACJtB,KAAMc,EAAK3H,QAAQ1D,MAAM4E,SAAW,EAAIyG,EAAK7H,KAAKsJ,OAASzB,EAAK7H,KAAK2I,OACrEJ,GAAIV,EAAK3H,QAAQ1D,MAAM4E,SACvBoH,GAAI,IAGR,QAAS1D,EAAO,EAAGA,EAAO,EAAGA,IAC3BgG,EAAgBnG,KAAKa,KAAK,CAAEhK,KAAM,SAASsJ,IAAQ8D,KAAM,IAE3D1G,EAAGkG,UAAW5C,KAAKsF,IAKvB,GAAIjD,EAAK3H,QAAQ1D,MAAMwE,cACrB,QAASoJ,EAAI,EAAGA,EAAI,EAAGA,IACrBlI,EAAGkG,UAAUgC,GAAG/B,KAAKE,GAAKrG,EAAGkG,UAAUgC,GAAG/B,KAAKG,GAC/CtG,EAAGkG,UAAUgC,GAAG/B,KAAKtB,KAAOc,EAAK7H,KAAK2I,OAI1C,OAAOzG,CAAG,EAvcgB,EAwc5B,iDA36BWtC,EAAsB,oCAAtBA,EAAsBmL,UAAA,yBAAAC,MAAA,IAAArG,KAAA,GAAAsG,OAAA,y2CAAAC,SAAA,SAAAC,EAAAC,GAAA,EAAAD,ID5FnChQ,MAAA,UAAAA,CAMsB,eANtBA,CAMsB,oBANtBA,CAMsB,oBAGAA,MAAA,mBAAaA,UAE/BA,MAAA,qBAAAA,CAAkB,QACZA,MAAA,oBAAcA,QAElBA,MAAA,UAAAA,CAAwB,UAAxBA,CAAwB,sBAAxBA,CAAwB,gBAGPA,MAAA,eAAQA,QACnBA,MAAA,cAKEA,MAAA,yBAAAkQ,GAAA,OAAAD,EAAAlL,QAAA1D,MAAAgE,QAAAC,SAAA4K,CAAA,GALFlQ,YAQJA,MAAA,WAAAA,CAA8B,sBAA9BA,CAA8B,gBAEfA,MAAA,iBAAUA,QACrBA,MAAA,cAKEA,MAAA,yBAAAkQ,GAAA,OAAAD,EAAAlL,QAAA1D,MAAAgE,QAAAE,WAAA2K,CAAA,GALFlQ,YAQJA,MAAA,WAAAA,CAA8B,sBAA9BA,CAA8B,gBAEfA,MAAA,eAAQA,QACnBA,MAAA,cAKEA,MAAA,yBAAAkQ,GAAA,OAAAD,EAAAlL,QAAA1D,MAAAgE,QAAAG,SAAA0K,CAAA,GALFlQ,YAQJA,MAAA,WAAAA,CAA8B,sBAA9BA,CAA8B,gBAEfA,MAAA,iBAAUA,QACrBA,MAAA,cAKEA,MAAA,yBAAAkQ,GAAA,OAAAD,EAAAlL,QAAA1D,MAAAgE,QAAAI,WAAAyK,CAAA,GALFlQ,YAQJA,MAAA,WAAAA,CAA8B,sBAA9BA,CAA8B,gBAEfA,MAAA,gBAASA,QACpBA,MAAA,cAKEA,MAAA,yBAAAkQ,GAAA,OAAAD,EAAAlL,QAAA1D,MAAAgE,QAAAK,UAAAwK,CAAA,GALFlQ,YAQJA,MAAA,WAAAA,CAA8B,sBAA9BA,CAA8B,gBAEfA,MAAA,eAAQA,QACnBA,MAAA,cAKEA,MAAA,yBAAAkQ,GAAA,OAAAD,EAAAlL,QAAA1D,MAAAgE,QAAAM,SAAAuK,CAAA,GALFlQ,cAUNA,MAAA,yBAAkBA,MAAA,yBAAAkQ,GAAA,OAAAD,EAAAlL,QAAA1D,MAAAwE,cAAAqK,CAAA,GACflQ,MAAA,iCACHA,QACAA,MAAA,SACAA,MAAA,SAAIA,MAAA,sBAAeA,QACnBA,MAAA,QACGA,MAAA,kBACDA,MAAA,gCAAyBA,MAAA,yBAAAkQ,GAAA,OAAAD,EAAAlL,QAAAV,MAAAc,UAAA+K,CAAA,GACvBlQ,MAAA,0BAA+BA,MAAA,WAAIA,QACnCA,MAAA,0BAA+BA,MAAA,gBAASA,QACxCA,MAAA,0BAA+BA,MAAA,sBAAeA,YAIlDA,MAAA,QACEA,MAAA,eACAA,MAAA,gCAAyBA,MAAA,yBAAAkQ,GAAA,OAAAD,EAAAlL,QAAAmB,UAAAG,MAAA6J,CAAA,GACvBlQ,MAAA,0BAA+BA,MAAA,UAAGA,QAClCA,MAAA,0BAA+BA,MAAA,YAAKA,QACpCA,MAAA,0BAA+BA,MAAA,aAAMA,QACrCA,MAAA,0BAA+BA,MAAA,cAAOA,YAI1CA,MAAA,yBAAkBA,MAAA,yBAAAkQ,GAAA,OAAAD,EAAAlL,QAAAV,MAAAe,eAAA8K,CAAA,GACflQ,MAAA,qCACHA,QACAA,MAAA,SACAA,MAAA,yBAAkBA,MAAA,yBAAAkQ,GAAA,OAAAD,EAAAlL,QAAA0B,UAAAC,kCAAAwJ,CAAA,GACflQ,MAAA,6CACHA,QACAA,MAAA,QAAAA,CAAM,SAGNA,MAAA,SAAIA,MAAA,yBAAkBA,QACtBA,MAAA,yBAAkBA,MAAA,yBAAAkQ,GAAA,OAAAD,EAAAlL,QAAAmB,UAAAC,qBAAA+J,CAAA,GACflQ,MAAA,+BACHA,QACAA,MAAA,SACAA,MAAA,kBACAA,MAAA,gCAEEA,MAAA,yBAAAkQ,GAAA,OAAAD,EAAAlL,QAAAmB,UAAAE,SAAA8J,CAAA,GACAlQ,MAAA,0BAAgCA,MAAA,UAAGA,QACnCA,MAAA,0BAAgDA,MAAA,YAAKA,QACrDA,MAAA,0BAA8CA,MAAA,UAAGA,QACjDA,MAAA,0BAA+CA,MAAA,WAAIA,QACnDA,MAAA,0BAAiDA,MAAA,aAAMA,QACvDA,MAAA,0BAAiDA,MAAA,aAAMA,UAGzDA,MAAA,QAAAA,CAAM,SAGNA,MAAA,cAAAA,CAAyB,QAAzBA,CAAyB,SAEjBA,MAAA,iBAAUA,QACdA,MAAA,QAAAA,CAAI,oBAEoCA,MAAA,yBAAAkQ,GAAA,OAAAD,EAAAlL,QAAA1D,MAAA4E,SAAAiK,CAAA,GACnClQ,MAAA,eACDA,UAEJA,MAAA,SAAIA,MAAA,KAAmCA,UAEzCA,MAAA,SAAAA,CAAI,UACEA,MAAA,sBAAcA,QAClBA,MAAA,SAAAA,CAAI,qBAEoCA,MAAA,yBAAAkQ,GAAA,OAAAD,EAAAlL,QAAA1D,MAAA0E,SAAAmK,CAAA,GACnClQ,MAAA,gBACDA,UAEJA,MAAA,UAAIA,MAAA,KAAkCA,UAExCA,MAAA,SAAAA,CAAI,UACEA,MAAA,iBAASA,QACbA,MAAA,SAAAA,CAAI,qBAEmCA,MAAA,yBAAAkQ,GAAA,OAAAD,EAAAlL,QAAAuB,KAAAC,QAAA2J,CAAA,GAClClQ,MAAA,gBACDA,UAEJA,MAAA,UAAIA,MAAA,KAA+BA,UAErCA,MAAA,SAAAA,CAAI,UACEA,MAAA,0BAAkBA,QACtBA,MAAA,SAAAA,CAAI,qBAEmCA,MAAA,yBAAAkQ,GAAA,OAAAD,EAAAlL,QAAAuB,KAAAE,YAAA0J,CAAA,GAClClQ,MAAA,gBACDA,UAEJA,MAAA,UAAIA,MAAA,KAAmCA,YAI3CA,MAAA,UAAIA,MAAA,+BAAuBA,QAC3BA,MAAA,6CACAA,MAAA,YAAAA,CAAwB,YAAxBA,CAAwB,uBAAxBA,CAAwB,iBAGPA,MAAA,gBAAQA,QACnBA,MAAA,eAKEA,MAAA,yBAAAkQ,GAAA,OAAAD,EAAAlL,QAAA1D,MAAAuE,cAAAN,SAAA4K,CAAA,GALFlQ,YAQJA,MAAA,YAAAA,CAA8B,uBAA9BA,CAA8B,iBAEfA,MAAA,kBAAUA,QACrBA,MAAA,eAKEA,MAAA,yBAAAkQ,GAAA,OAAAD,EAAAlL,QAAA1D,MAAAuE,cAAAL,WAAA2K,CAAA,GALFlQ,YAQJA,MAAA,YAAAA,CAA8B,uBAA9BA,CAA8B,iBAEfA,MAAA,gBAAQA,QACnBA,MAAA,eAKEA,MAAA,yBAAAkQ,GAAA,OAAAD,EAAAlL,QAAA1D,MAAAuE,cAAAJ,SAAA0K,CAAA,GALFlQ,YAQJA,MAAA,YAAAA,CAA8B,uBAA9BA,CAA8B,iBAEfA,MAAA,kBAAUA,QACrBA,MAAA,eAKEA,MAAA,yBAAAkQ,GAAA,OAAAD,EAAAlL,QAAA1D,MAAAuE,cAAAH,WAAAyK,CAAA,GALFlQ,YAQJA,MAAA,YAAAA,CAA8B,uBAA9BA,CAA8B,iBAEfA,MAAA,iBAASA,QACpBA,MAAA,eAKEA,MAAA,yBAAAkQ,GAAA,OAAAD,EAAAlL,QAAA1D,MAAAuE,cAAAF,UAAAwK,CAAA,GALFlQ,YAQJA,MAAA,YAAAA,CAA8B,uBAA9BA,CAA8B,iBAEfA,MAAA,gBAAQA,QACnBA,MAAA,eAKEA,MAAA,yBAAAkQ,GAAA,OAAAD,EAAAlL,QAAA1D,MAAAuE,cAAAD,SAAAuK,CAAA,GALFlQ,kBAYVA,MAAA,iBAAAA,CAAgC,sBAAhCA,CAAgC,sBAEZA,MAAA,4BAAoBA,UAEtCA,MAAA,uBAAAA,CAAkB,WAEdA,MAAA,kBAEAA,MAAA,qBAA0CA,MAAA,yBAAAkQ,GAAA,OAAAD,EAAAlL,QAAAC,OAAAC,QAAAiL,CAAA,GACvClQ,MAAA,gBACDA,QACFA,MAAA,YAAMA,MAAA,KAA6BA,UAGrCA,MAAA,0BAAkBA,MAAA,yBAAAkQ,GAAA,OAAAD,EAAAlL,QAAAC,OAAAE,SAAAgL,CAAA,GAAuClQ,MAAA,2BAAkBA,UAG7EA,MAAA,uBAAAA,CAAkB,iBAC0BA,MAAA,0BAASiQ,EAAA5H,KAAK,GACrDrI,MAAA,iBAASA,QAEZA,MAAA,SAAAA,CAAM,0BAERA,UAGFA,MAAA,iBAAAA,CAAgC,sBAAhCA,CAAgC,sBAEZA,MAAA,eAAOA,UAEzBA,MAAA,uBAAAA,CAAkB,SAMbA,MAAA,KAC+CA,QAElDA,MAAA,SAAGA,MAAA,KAA4BA,QAE/BA,MAAA,IAAAmQ,GAAA,kBAoIFnQ,YAGJA,MAAA,UAAAA,CAAK,iBAALA,CAAK,sBAALA,CAAK,sBAGiBA,MAAA,eAAOA,UAEzBA,MAAA,uBAAAA,CAAkB,SACbA,MAAA,uBAAyBA,QAC5BA,MAAA,SAAGA,MAAA,uBAA2BA,QAC9BA,MAAA,SAAGA,MAAA,uBAAeA,qBAnbtBA,MAAA,iBAAAA,CAAwB,uBAAxBA,CAAwB,mBAAxBA,CAAwB,yBAAxBA,CAAwB,aAqBZA,MAAA,IAAAA,MAAA,UAAAiQ,EAAAlL,QAAA1D,MAAAgE,QAAAC,UAWAtF,MAAA,GAAAA,MAAA,UAAAiQ,EAAAlL,QAAA1D,MAAAgE,QAAAE,YAWAvF,MAAA,GAAAA,MAAA,UAAAiQ,EAAAlL,QAAA1D,MAAAgE,QAAAG,UAWAxF,MAAA,GAAAA,MAAA,UAAAiQ,EAAAlL,QAAA1D,MAAAgE,QAAAI,YAWAzF,MAAA,GAAAA,MAAA,UAAAiQ,EAAAlL,QAAA1D,MAAAgE,QAAAK,WAWA1F,MAAA,GAAAA,MAAA,UAAAiQ,EAAAlL,QAAA1D,MAAAgE,QAAAM,UAKU3F,MAAA,GAAAA,MAAA,UAAAiQ,EAAAlL,QAAA1D,MAAAwE,eAOS7F,MAAA,GAAAA,MAAA,UAAAiQ,EAAAlL,QAAAV,MAAAc,WACJnF,MAAA,GAAAA,MAAA,WACAA,MAAA,GAAAA,MAAA,WACAA,MAAA,GAAAA,MAAA,WAMIA,MAAA,GAAAA,MAAA,UAAAiQ,EAAAlL,QAAAmB,UAAAG,OACJrG,MAAA,GAAAA,MAAA,WACAA,MAAA,GAAAA,MAAA,WACAA,MAAA,GAAAA,MAAA,WACAA,MAAA,GAAAA,MAAA,WAILA,MAAA,GAAAA,MAAA,UAAAiQ,EAAAlL,QAAAV,MAAAe,gBAIApF,MAAA,GAAAA,MAAA,UAAAiQ,EAAAlL,QAAA0B,UAAAC,mCAOA1G,MAAA,GAAAA,MAAA,UAAAiQ,EAAAlL,QAAAmB,UAAAC,sBAMhBnG,MAAA,GAAAA,MAAA,YAAAiQ,EAAAlL,QAAAmB,UAAAC,qBAAAnG,CAAoD,UAAAiQ,EAAAlL,QAAAmB,UAAAE,UAEjCpG,MAAA,GAAAA,MAAA,YACAA,MAAA,GAAAA,MAAA,QAAAiQ,EAAArL,aAAAwL,OACApQ,MAAA,GAAAA,MAAA,QAAAiQ,EAAArL,aAAAyL,KACArQ,MAAA,GAAAA,MAAA,QAAAiQ,EAAArL,aAAA0L,MACAtQ,MAAA,GAAAA,MAAA,QAAAiQ,EAAArL,aAAA2L,QACAvQ,MAAA,GAAAA,MAAA,QAAAiQ,EAAArL,aAAA4L,QAWuBxQ,MAAA,GAAAA,MAAA,UAAAiQ,EAAAlL,QAAA1D,MAAA4E,UAIpCjG,MAAA,GAAAA,MAAA,GAAAiQ,EAAAlL,QAAA1D,MAAA4E,SAAA,WAMoCjG,MAAA,GAAAA,MAAA,UAAAiQ,EAAAlL,QAAA1D,MAAA0E,UAIpC/F,MAAA,GAAAA,MAAA,GAAAiQ,EAAAlL,QAAA1D,MAAA0E,SAAA,UAMmC/F,MAAA,GAAAA,MAAA,UAAAiQ,EAAAlL,QAAAuB,KAAAC,SAInCvG,MAAA,GAAAA,MAAA,GAAAiQ,EAAAlL,QAAAuB,KAAAC,QAAA,SAMmCvG,MAAA,GAAAA,MAAA,UAAAiQ,EAAAlL,QAAAuB,KAAAE,aAInCxG,MAAA,GAAAA,MAAA,GAAAiQ,EAAAlL,QAAAuB,KAAAE,YAAA,SAeAxG,MAAA,GAAAA,MAAA,UAAAiQ,EAAAlL,QAAA1D,MAAAuE,cAAAN,UAWAtF,MAAA,GAAAA,MAAA,UAAAiQ,EAAAlL,QAAA1D,MAAAuE,cAAAL,YAWAvF,MAAA,GAAAA,MAAA,UAAAiQ,EAAAlL,QAAA1D,MAAAuE,cAAAJ,UAWAxF,MAAA,GAAAA,MAAA,UAAAiQ,EAAAlL,QAAA1D,MAAAuE,cAAAH,YAWAzF,MAAA,GAAAA,MAAA,UAAAiQ,EAAAlL,QAAA1D,MAAAuE,cAAAF,WAWA1F,MAAA,GAAAA,MAAA,UAAAiQ,EAAAlL,QAAA1D,MAAAuE,cAAAD,UAeoC3F,MAAA,GAAAA,MAAA,UAAAiQ,EAAAlL,QAAAC,OAAAC,SAGpCjF,MAAA,GAAAA,MAAA,GAAAiQ,EAAAlL,QAAAC,OAAAC,QAAA,KAGUjF,MAAA,GAAAA,MAAA,UAAAiQ,EAAAlL,QAAAC,OAAAE,UAIwClF,MAAA,GAAAA,MAAA,YAAAiQ,EAAApL,MAAAoL,EAAAnL,aAIxC9E,MAAA,GAAAA,MAAA,QAAAiQ,EAAApJ,eAUhB7G,MAAA,GAAAA,MAAA,8BAAAiQ,EAAArJ,QAAA,MAAAqJ,EAAArJ,cAAA,KAAAqJ,EAAArJ,cAAA6J,QAAAzQ,CAAwD,+BAAAiQ,EAAArJ,QAAA,MAAAqJ,EAAArJ,cAAA,KAAAqJ,EAAArJ,cAAA6J,SAAA,WAAAR,EAAArJ,QAAA,MAAAqJ,EAAArJ,cAAA,KAAAqJ,EAAArJ,cAAA6J,QAAxDzQ,CAAwD,+BAAAiQ,EAAArJ,QAAA,MAAAqJ,EAAArJ,cAAA,KAAAqJ,EAAArJ,cAAA6J,QAAxDzQ,CAAwD,4BAAAiQ,EAAArJ,QAAA,MAAAqJ,EAAArJ,cAAA,KAAAqJ,EAAArJ,cAAA6J,SAIvDzQ,MAAA,GAAAA,MAAA,qBAAAiQ,EAAArJ,QAAA,MAAAqJ,EAAArJ,cAAA,KAAAqJ,EAAArJ,cAAA6J,OAAA,KAAAR,EAAAxI,kBAAA,MAAAwI,EAAArJ,QAAA,MAAAqJ,EAAArJ,cAAA,KAAAqJ,EAAArJ,cAAA6J,QAAA,IAGAzQ,MAAA,GAAAA,MAAA,mBAAAiQ,EAAArJ,OAAA,KAAAqJ,EAAArJ,OAAA8J,KAAA,IAEuB1Q,MAAA,GAAAA,MAAA,OAAAiQ,EAAA/P,cA6IvBF,MAAA,GAAAA,YAAA,OAAAiQ,EAAA/P,eACAF,MAAA,GAAAA,YAAA,aAAAiQ,EAAArJ,OAAA,KAAAqJ,EAAArJ,gBACA5G,MAAA,GAAAA,YAAA,OAAAiQ,EAAAlJ,o6DCzVItC,CAAsB,+BCrFnC,MAAMkM,GAAiB,CACrB,CACEC,KAAM,GACNC,UAAWpM,KASR,IAAMqM,GAAmB,MAA1B,MAAOA,oDAAmB,mCAAnBA,GAAmB,uCAFpBC,KAAcC,KAAsBC,MAAaC,SAASP,MAAO,SAEhEG,CAAmB","names":["i0","ctx_r12","result_items","itemMeta","idx_r11","name","ctx_r15","icon","ctx_r17","getPerkName","getPerkIconUrl","ctx_r18","perk","stat_r24","item_r26","TheorizerPageComponent_table_186_ng_container_20_tr_16_img_5_Template","ctx_r20","slotNameByIndex","itemIntrinsics","items","entry","stats","sum","TheorizerPageComponent_table_186_ng_container_20_td_4_Template","TheorizerPageComponent_table_186_ng_container_20_td_5_Template","TheorizerPageComponent_table_186_ng_container_20_td_6_Template","TheorizerPageComponent_table_186_ng_container_20_img_8_Template","TheorizerPageComponent_table_186_ng_container_20_img_9_Template","TheorizerPageComponent_table_186_ng_container_20_img_11_Template","TheorizerPageComponent_table_186_ng_container_20_img_12_Template","TheorizerPageComponent_table_186_ng_container_20_td_13_Template","TheorizerPageComponent_table_186_ng_container_20_tr_16_Template","ctx_r1","itemExotic","itemArtifice","item_r10","stat_r28","stat_r30","TheorizerPageComponent_table_186_tr_28_td_4_Template","ctx_r3","constants","stat_r31","stat_r32","stat_r33","stat_r34","stat_r35","stat_r36","TheorizerPageComponent_table_186_ng_container_20_Template","TheorizerPageComponent_table_186_td_25_Template","TheorizerPageComponent_table_186_tr_28_Template","TheorizerPageComponent_table_186_td_33_Template","TheorizerPageComponent_table_186_td_40_Template","TheorizerPageComponent_table_186_td_47_Template","TheorizerPageComponent_table_186_td_54_Template","TheorizerPageComponent_table_186_td_61_Template","TheorizerPageComponent_table_186_td_68_Template","ctx_r0","masterwork","statMods","major","minor","artificeMods","total","waste","tiers","statNames","intrinsicExoticArmorByClassAndSlot","ArmorSlot","ArmorSlotHelmet","armor","ArmorSlotGauntlet","ArmorSlotChest","ArmorSlotLegs","TheorizerPageComponent","constructor","this","ModifierType","glpk","calculating","options","solver","timeout","presolve","armorType","requiresExotic","desired","mobility","resilience","recovery","discipline","intellect","strength","constantBoost","statsAreFixed","maxValue","minTiers","minPoints","maxWaste","fragments","enableFragmentPicker","subclass","class","mods","maxMods","maxArtifice","generator","generateExoticsWithIntrinsicStats","availablePlugs","result","time_progress","timerId","lp","db","Database","l","reduce","a","b","ArmorPerkOrSlotNames","ArmorPerkOrSlotIcons","index","resultValueToText","value","ngOnInit","_this","_asyncToGenerator","GLPKConstructor","console","log","startTimer","setInterval","stopTimer","clearInterval","run","_this2","Error","buildFromConfiguration","binaries","duplicates","filter","item","indexOf","length","alert","join","generals","duplicates2","solve","getItemsFromResult","_this3","artificeCount","kv","vars","startsWith","_","stat","split","parseInt","slot","tier","plug","plugValues","is2ndHalf","itemsToGrab","itemId","push","e","dbitems","inventoryArmor","where","equals","toArray","isExotic","ArmorPerkOrSlot","SlotArtifice","clazz","entryId","entryArmor","Promise","all","map","_ref","k","manifestArmor","first","_x","apply","arguments","type","requiredArtificeArmor","Math","floor","tierSum","getItems","_this4","notEqual","ArmorSlotNone","distinct","undefined","findIndex","i","itemInstanceId","_this5","msgLev","GLP_MSG_ERR","tmlim","objective","direction","GLP_MAX","subjectTo","bnds","GLP_DB","ub","lb","bounds","constVal","GLP_FX","coef","withOwnArmor","withGeneratedArmor","withBothArmorSources","helmets","gauntlets","chests","legs","itemsBySlot","classLimitSubject","GLP_UP","classLimitSubjects","clazzVar","exoticLimitSubject","artificeArmorPieces","artificeArmorPlugs","slotLimitSubject","intrinsicStatSelectionSubject","entries","statmrr","exoticGenlimSlot","plugId","subject","plugName","n","cn","identifier","modSubject","artifMaxSubject","artifSlotSubject","piece","setWasteAndTierSubject","minTierSubject","GLP_LO","maxWasteSubject","selectors","decls","consts","template","rf","ctx","$event","TheorizerPageComponent_table_186_Template","Solar","Arc","Void","Stasis","Strand","status","time","routes","path","component","TheorizerPageModule","CommonModule","CommonMaterialModule","RouterModule","forChild"],"sourceRoot":"webpack:///","sources":["./src/app/components/authenticated-v2/subpages/theorizer-page/theorizer-page.component.html","./src/app/components/authenticated-v2/subpages/theorizer-page/theorizer-page.component.ts","./src/app/components/authenticated-v2/subpages/theorizer-page/theorizer-page.module.ts"],"sourcesContent":["<!--\n  ~ Copyright (c) 2023 D2ArmorPicker by Mijago.\n  ~\n  ~ This program is free software: you can redistribute it and/or modify\n  ~ it under the terms of the GNU Affero General Public License as published\n  ~ by the Free Software Foundation, either version 3 of the License, or\n  ~ (at your option) any later version.\n  ~\n  ~ This program is distributed in the hope that it will be useful,\n  ~ but WITHOUT ANY WARRANTY; without even the implied warranty of\n  ~ MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n  ~ GNU Affero General Public License for more details.\n  ~\n  ~ You should have received a copy of the GNU Affero General Public License\n  ~ along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  -->\n\n<div\n  id=\"container\"\n  [style.display]=\"'flex'\"\n  [style.flex-direction]=\"'row'\"\n  [style.flex-wrap]=\"'wrap'\"\n  [style.align-content]=\"'center'\"\n  [style.gap]=\"'5px'\">\n  <mat-card appearance=\"outlined\">\n    <mat-card-header>\n      <mat-card-title>Configuration</mat-card-title>\n    </mat-card-header>\n    <mat-card-content>\n      <h2>Required Stats</h2>\n\n      <div class=\"input-list\">\n        <div class=\"input-list-entry\">\n          <mat-form-field class=\"example-full-width\">\n            <mat-label>Mobility</mat-label>\n            <input\n              matInput\n              type=\"number\"\n              min=\"-20\"\n              max=\"300\"\n              [(ngModel)]=\"options.stats.desired.mobility\" />\n          </mat-form-field>\n        </div>\n        <div class=\"input-list-entry\">\n          <mat-form-field class=\"example-full-width\">\n            <mat-label>Resilience</mat-label>\n            <input\n              matInput\n              type=\"number\"\n              min=\"-20\"\n              max=\"300\"\n              [(ngModel)]=\"options.stats.desired.resilience\" />\n          </mat-form-field>\n        </div>\n        <div class=\"input-list-entry\">\n          <mat-form-field class=\"example-full-width\">\n            <mat-label>Recovery</mat-label>\n            <input\n              matInput\n              type=\"number\"\n              min=\"-20\"\n              max=\"300\"\n              [(ngModel)]=\"options.stats.desired.recovery\" />\n          </mat-form-field>\n        </div>\n        <div class=\"input-list-entry\">\n          <mat-form-field class=\"example-full-width\">\n            <mat-label>Discipline</mat-label>\n            <input\n              matInput\n              type=\"number\"\n              min=\"-20\"\n              max=\"300\"\n              [(ngModel)]=\"options.stats.desired.discipline\" />\n          </mat-form-field>\n        </div>\n        <div class=\"input-list-entry\">\n          <mat-form-field class=\"example-full-width\">\n            <mat-label>Intellect</mat-label>\n            <input\n              matInput\n              type=\"number\"\n              min=\"-20\"\n              max=\"300\"\n              [(ngModel)]=\"options.stats.desired.intellect\" />\n          </mat-form-field>\n        </div>\n        <div class=\"input-list-entry\">\n          <mat-form-field class=\"example-full-width\">\n            <mat-label>Strength</mat-label>\n            <input\n              matInput\n              type=\"number\"\n              min=\"-20\"\n              max=\"300\"\n              [(ngModel)]=\"options.stats.desired.strength\" />\n          </mat-form-field>\n        </div>\n      </div>\n\n      <mat-slide-toggle [(ngModel)]=\"options.stats.statsAreFixed\"\n        >Stats must be met exactly\n      </mat-slide-toggle>\n      <hr />\n      <h2>Armor Selection</h2>\n      <p\n        >Use armor:\n        <mat-button-toggle-group [(ngModel)]=\"options.armor.armorType\">\n          <mat-button-toggle [value]=\"3\">Both</mat-button-toggle>\n          <mat-button-toggle [value]=\"1\">Own Armor</mat-button-toggle>\n          <mat-button-toggle [value]=\"2\">Generated Armor</mat-button-toggle>\n        </mat-button-toggle-group>\n      </p>\n\n      <p>\n        Class:\n        <mat-button-toggle-group [(ngModel)]=\"options.fragments.class\">\n          <mat-button-toggle [value]=\"3\">Any</mat-button-toggle>\n          <mat-button-toggle [value]=\"0\">Titan</mat-button-toggle>\n          <mat-button-toggle [value]=\"1\">Hunter</mat-button-toggle>\n          <mat-button-toggle [value]=\"2\">Warlock</mat-button-toggle>\n        </mat-button-toggle-group>\n      </p>\n\n      <mat-slide-toggle [(ngModel)]=\"options.armor.requiresExotic\"\n        >Require an exotic armor piece\n      </mat-slide-toggle>\n      <br />\n      <mat-slide-toggle [(ngModel)]=\"options.generator.generateExoticsWithIntrinsicStats\"\n        >Generate exotics with intrinsic stats\n      </mat-slide-toggle>\n      <br />\n\n      <hr />\n      <h2>Fragment selection</h2>\n      <mat-slide-toggle [(ngModel)]=\"options.fragments.enableFragmentPicker\" disabled\n        >Enable fragment picking\n      </mat-slide-toggle>\n      <br />\n      Subclass:\n      <mat-button-toggle-group\n        [disabled]=\"!options.fragments.enableFragmentPicker\"\n        [(ngModel)]=\"options.fragments.subclass\">\n        <mat-button-toggle [value]=\"-1\">Any</mat-button-toggle>\n        <mat-button-toggle [value]=\"ModifierType.Solar\">Solar</mat-button-toggle>\n        <mat-button-toggle [value]=\"ModifierType.Arc\">Arc</mat-button-toggle>\n        <mat-button-toggle [value]=\"ModifierType.Void\">Void</mat-button-toggle>\n        <mat-button-toggle [value]=\"ModifierType.Stasis\">Stasis</mat-button-toggle>\n        <mat-button-toggle [value]=\"ModifierType.Strand\">Strand</mat-button-toggle>\n      </mat-button-toggle-group>\n\n      <hr />\n      <br />\n\n      <table id=\"slider-table\">\n        <tr>\n          <td>Max Waste:</td>\n          <td>\n            <!-- TODO: The 'tickInterval' property no longer exists -->\n            <mat-slider min=\"0\" max=\"54\" step=\"1\" [(ngModel)]=\"options.stats.maxWaste\"\n              ><input matSliderThumb\n            /></mat-slider>\n          </td>\n          <td>{{ options.stats.maxWaste }} points</td>\n        </tr>\n        <tr>\n          <td>Minimum Tiers:</td>\n          <td>\n            <!-- TODO: The 'tickInterval' property no longer exists -->\n            <mat-slider min=\"0\" max=\"55\" step=\"1\" [(ngModel)]=\"options.stats.minTiers\"\n              ><input matSliderThumb\n            /></mat-slider>\n          </td>\n          <td>{{ options.stats.minTiers }} tiers</td>\n        </tr>\n        <tr>\n          <td>Max Mods:</td>\n          <td>\n            <!-- TODO: The 'tickInterval' property no longer exists -->\n            <mat-slider min=\"0\" max=\"5\" step=\"1\" [(ngModel)]=\"options.mods.maxMods\"\n              ><input matSliderThumb\n            /></mat-slider>\n          </td>\n          <td>{{ options.mods.maxMods }} mods</td>\n        </tr>\n        <tr>\n          <td>Max Artifice Mods:</td>\n          <td>\n            <!-- TODO: The 'tickInterval' property no longer exists -->\n            <mat-slider min=\"0\" max=\"5\" step=\"1\" [(ngModel)]=\"options.mods.maxArtifice\"\n              ><input matSliderThumb\n            /></mat-slider>\n          </td>\n          <td>{{ options.mods.maxArtifice }} mods</td>\n        </tr>\n      </table>\n\n      <h2>Constant Bonus to Stats</h2>\n      (use this for theoretical +1 stuff)\n      <div class=\"input-list\">\n        <div class=\"input-list-entry\">\n          <mat-form-field class=\"example-full-width\">\n            <mat-label>Mobility</mat-label>\n            <input\n              matInput\n              type=\"number\"\n              min=\"-20\"\n              max=\"300\"\n              [(ngModel)]=\"options.stats.constantBoost.mobility\" />\n          </mat-form-field>\n        </div>\n        <div class=\"input-list-entry\">\n          <mat-form-field class=\"example-full-width\">\n            <mat-label>Resilience</mat-label>\n            <input\n              matInput\n              type=\"number\"\n              min=\"-20\"\n              max=\"300\"\n              [(ngModel)]=\"options.stats.constantBoost.resilience\" />\n          </mat-form-field>\n        </div>\n        <div class=\"input-list-entry\">\n          <mat-form-field class=\"example-full-width\">\n            <mat-label>Recovery</mat-label>\n            <input\n              matInput\n              type=\"number\"\n              min=\"-20\"\n              max=\"300\"\n              [(ngModel)]=\"options.stats.constantBoost.recovery\" />\n          </mat-form-field>\n        </div>\n        <div class=\"input-list-entry\">\n          <mat-form-field class=\"example-full-width\">\n            <mat-label>Discipline</mat-label>\n            <input\n              matInput\n              type=\"number\"\n              min=\"-20\"\n              max=\"300\"\n              [(ngModel)]=\"options.stats.constantBoost.discipline\" />\n          </mat-form-field>\n        </div>\n        <div class=\"input-list-entry\">\n          <mat-form-field class=\"example-full-width\">\n            <mat-label>Intellect</mat-label>\n            <input\n              matInput\n              type=\"number\"\n              min=\"-20\"\n              max=\"300\"\n              [(ngModel)]=\"options.stats.constantBoost.intellect\" />\n          </mat-form-field>\n        </div>\n        <div class=\"input-list-entry\">\n          <mat-form-field class=\"example-full-width\">\n            <mat-label>Strength</mat-label>\n            <input\n              matInput\n              type=\"number\"\n              min=\"-20\"\n              max=\"300\"\n              [(ngModel)]=\"options.stats.constantBoost.strength\" />\n          </mat-form-field>\n        </div>\n      </div>\n    </mat-card-content>\n  </mat-card>\n\n  <mat-card appearance=\"outlined\">\n    <mat-card-header>\n      <mat-card-title>Solver Configuration</mat-card-title>\n    </mat-card-header>\n    <mat-card-content>\n      <div>\n        Timeout:\n        <!-- timeout as a slider from 0.5s to 120s -->\n        <mat-slider min=\"0.5\" max=\"60\" step=\"0.5\" [(ngModel)]=\"options.solver.timeout\"\n          ><input matSliderThumb\n        /></mat-slider>\n        <span>{{ options.solver.timeout }}s</span>\n      </div>\n\n      <mat-slide-toggle [(ngModel)]=\"options.solver.presolve\"> Execute Presolver </mat-slide-toggle>\n    </mat-card-content>\n\n    <mat-card-actions>\n      <button mat-raised-button color=\"primary\" (click)=\"run()\" [disabled]=\"!glpk || calculating\"\n        >Calculate</button\n      >\n      <br />\n      <mat-progress-bar [value]=\"time_progress\"></mat-progress-bar>\n    </mat-card-actions>\n  </mat-card>\n\n  <mat-card appearance=\"outlined\">\n    <mat-card-header>\n      <mat-card-title>Results</mat-card-title>\n    </mat-card-header>\n    <mat-card-content>\n      <p\n        [class.status-undefined]=\"result?.result?.status! === 1\"\n        [class.status-infeasable]=\"result?.result?.status! === 3 || result?.result?.status! === 4\"\n        [class.status-acceptable]=\"result?.result?.status! === 2\"\n        [class.status-optimal]=\"result?.result?.status! === 5\"\n        >Status Code {{ result?.result?.status! }}:\n        {{ resultValueToText(result?.result?.status!) }}</p\n      >\n      <p>Time (s): {{ result?.time }}</p>\n\n      <table id=\"result-table\" *ngIf=\"result_items\">\n        <tr class=\"line-bottom\">\n          <td>Type</td>\n          <td colspan=\"3\">Item Definition</td>\n          <td>Mobility</td>\n          <td>Resilience</td>\n          <td>Recovery</td>\n          <td>Discipline</td>\n          <td>Intellect</td>\n          <td>Strength</td>\n          <td>Sum</td>\n        </tr>\n        <ng-container *ngFor=\"let item of result_items['items']; let idx = index\">\n          <tr\n            [class.exotic]=\"result_items['itemExotic'][idx]\"\n            [class.theoretic]=\"!result_items['itemMeta'][idx] && idx < 4\"\n            [class.real]=\"!result_items['itemMeta'][idx] && idx < 4\"\n            class=\"item-row\">\n            <td>{{ slotNameByIndex(idx) }}</td>\n            <td *ngIf=\"idx < 4 && result_items['itemMeta'][idx]\">{{\n              result_items[\"itemMeta\"][idx][\"name\"]\n            }}</td>\n            <td *ngIf=\"idx < 4 && !result_items['itemMeta'][idx]\">THEORETICAL</td>\n            <td *ngIf=\"idx === 4\"></td>\n\n            <td>\n              <img\n                class=\"icon-item\"\n                *ngIf=\"result_items['itemMeta'][idx]\"\n                [matTooltip]=\"result_items['itemMeta'][idx].icon\"\n                [src]=\"'https://bungie.net/' + result_items['itemMeta'][idx].icon\" />\n              <img\n                class=\"icon-item\"\n                *ngIf=\"!result_items['itemMeta'][idx]\"\n                matTooltip=\"Generated\"\n                src=\"https://www.bungie.net/common/destiny2_content/icons/1d82cced47afdc699448c54b2a6fbf35.png\" />\n            </td>\n            <td>\n              <img\n                class=\"icon-item\"\n                *ngIf=\"result_items['itemArtifice'][idx]\"\n                [matTooltip]=\"getPerkName(2)\"\n                [src]=\"getPerkIconUrl(2)\" />\n              <img\n                class=\"icon-item\"\n                *ngIf=\"\n                  !result_items['itemArtifice'][idx] &&\n                  result_items['itemMeta'][idx] &&\n                  result_items['itemMeta'][idx].perk !== 0\n                \"\n                [matTooltip]=\"getPerkName(result_items['itemMeta'][idx].perk)\"\n                [src]=\"getPerkIconUrl(result_items['itemMeta'][idx].perk)\" />\n            </td>\n\n            <td *ngFor=\"let stat of item\">{{ stat }}</td>\n            <td>{{ sum(item) }}</td>\n          </tr>\n          <tr *ngIf=\"result_items['itemIntrinsics'][idx]\" class=\"intrinsic\">\n            <td>{{ slotNameByIndex(idx) }}</td>\n            <td colspan=\"3\">\n              intrinsic on&nbsp;\n              <img\n                class=\"icon-item\"\n                [matTooltip]=\"item.name\"\n                [src]=\"'https://bungie.net/' + item.icon\"\n                *ngFor=\"let item of result_items['itemIntrinsics'][idx]['items']\" />\n            </td>\n            <td>{{ result_items[\"itemIntrinsics\"][idx][\"entry\"][\"stats\"][0] }}</td>\n            <td>{{ result_items[\"itemIntrinsics\"][idx][\"entry\"][\"stats\"][1] }}</td>\n            <td>{{ result_items[\"itemIntrinsics\"][idx][\"entry\"][\"stats\"][2] }}</td>\n            <td>0</td>\n            <td>0</td>\n            <td>0</td>\n            <td>{{ sum(result_items[\"itemIntrinsics\"][idx][\"entry\"][\"stats\"]) }}</td>\n          </tr>\n        </ng-container>\n        <!-- Masterwork -->\n        <tr class=\"line-top row-masterwork\">\n          <td>Masterwork</td>\n          <td colspan=\"3\"></td>\n          <td *ngFor=\"let stat of result_items['masterwork']\">{{ stat }}</td>\n          <td>{{ sum(result_items[\"masterwork\"]) }}</td>\n        </tr>\n        <!-- constantBoost -->\n        <tr *ngIf=\"sum(result_items['constants']) > 0\">\n          <td>Constant Boosts</td>\n          <td colspan=\"3\"></td>\n          <td *ngFor=\"let stat of result_items['constants']\">{{ stat }}</td>\n          <td>{{ sum(result_items[\"constants\"]) }}</td>\n        </tr>\n        <!-- Stat Mods -->\n        <tr class=\"line-top\">\n          <td>Major Mods</td>\n          <td colspan=\"3\"></td>\n          <td *ngFor=\"let stat of result_items['statMods']['major']\">{{ 10 * stat }}</td>\n          <td>{{ sum(result_items[\"statMods\"][\"major\"]) * 10 }}</td>\n        </tr>\n        <tr>\n          <td>Minor Mods</td>\n          <td colspan=\"3\"></td>\n          <td *ngFor=\"let stat of result_items['statMods']['minor']\">{{ 5 * stat }}</td>\n          <td>{{ sum(result_items[\"statMods\"][\"minor\"]) * 5 }}</td>\n        </tr>\n        <!-- ARTIFICE -->\n        <tr>\n          <td>Artifice Mods</td>\n          <td colspan=\"3\"></td>\n          <td *ngFor=\"let stat of result_items['artificeMods']\">{{ 3 * stat }}</td>\n          <td>{{ sum(result_items[\"artificeMods\"]) * 3 }}</td>\n        </tr>\n        <!-- TOTAL -->\n        <tr class=\"line-top line-bottom\">\n          <td>Total</td>\n          <td colspan=\"3\"></td>\n          <td *ngFor=\"let stat of result_items['total']\">{{ stat }}</td>\n          <td>{{ sum(result_items[\"total\"]) }}</td>\n        </tr>\n        <!-- WASTE -->\n        <tr>\n          <td>Waste</td>\n          <td colspan=\"3\"></td>\n          <td *ngFor=\"let stat of result_items['waste']\">{{ stat }}</td>\n          <td>{{ sum(result_items[\"waste\"]) }}</td>\n        </tr>\n        <!-- TIERS -->\n        <tr>\n          <td>Tiers</td>\n          <td colspan=\"3\"></td>\n          <td *ngFor=\"let stat of result_items['tiers']\">{{ stat }}</td>\n          <td>{{ sum(result_items[\"tiers\"]) }}</td>\n        </tr>\n      </table>\n    </mat-card-content>\n  </mat-card>\n</div>\n<div>\n  <mat-card appearance=\"outlined\">\n    <mat-card-header>\n      <mat-card-title>Results</mat-card-title>\n    </mat-card-header>\n    <mat-card-content>\n      <p>{{ result_items | json }}</p>\n      <p>{{ result?.result | json }}</p>\n      <p>{{ lp | json }}</p>\n    </mat-card-content>\n  </mat-card>\n</div>\n","/*\n * Copyright (c) 2023 D2ArmorPicker by Mijago.\n *\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU Affero General Public License as published\n * by the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU Affero General Public License for more details.\n *\n * You should have received a copy of the GNU Affero General Public License\n * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n */\n\nimport { Component, OnInit } from \"@angular/core\";\n//import GLPKConstructor, { GLPK, LP, Result } from \"glpk.js\";\nimport { GLPK, LP, Result } from \"glpk.js\";\ndeclare const GLPKConstructor: () => GLPK;\nimport { ModifierType } from \"src/app/data/enum/modifierType\";\nimport { IInventoryArmor } from \"../../../../data/types/IInventoryArmor\";\nimport { ArmorSlot } from \"../../../../data/enum/armor-slot\";\nimport { DestinyClass } from \"bungie-api-ts/destiny2\";\nimport { Database } from \"../../../../data/database\";\nimport {\n  ArmorPerkOrSlot,\n  ArmorPerkOrSlotIcons,\n  ArmorPerkOrSlotNames,\n} from \"../../../../data/enum/armor-stat\";\n\nconst statNames = [\"mobility\", \"resilience\", \"recovery\", \"discipline\", \"intellect\", \"strength\"];\n\nconst intrinsicExoticArmorByClassAndSlot = {\n  [DestinyClass.Titan]: {\n    [ArmorSlot.ArmorSlotHelmet]: [\n      { stats: [0, 1, 1], armor: [3216110440, 106575079, 2578771006] },\n      { stats: [0, 2, 0], armor: [2808156426, 3883866764] },\n    ],\n    [ArmorSlot.ArmorSlotGauntlet]: [\n      { stats: [0, 1, 1], armor: [1734844651, 241462141, 241462142] },\n      { stats: [0, 2, 0], armor: [1734844650, 1848640623, 2240152949, 2563444729] },\n    ],\n    [ArmorSlot.ArmorSlotChest]: [\n      { stats: [2, 1, 0], armor: [1192890598, 1341951177, 3874247549] },\n      { stats: [1, 1, 1], armor: [1591207518, 1591207519] },\n      { stats: [1, 2, 0], armor: [1654461647] },\n    ],\n    [ArmorSlot.ArmorSlotLegs]: [\n      { stats: [1, 1, 0], armor: [3539357319, 2255796155, 136355432, 1160559849] },\n      { stats: [1, 0, 1], armor: [2423243921] },\n      { stats: [0, 2, 0], armor: [3539357318] },\n    ],\n  },\n  [DestinyClass.Hunter]: {\n    [ArmorSlot.ArmorSlotHelmet]: [\n      { stats: [2, 0, 0], armor: [896224899] },\n      { stats: [1, 1, 0], armor: [2757274117, 1053737370, 1321354572, 1321354573] },\n      { stats: [1, 0, 1], armor: [3562696927, 2773056939] },\n    ],\n    [ArmorSlot.ArmorSlotGauntlet]: [\n      { stats: [1, 1, 1], armor: [3942036043] },\n      { stats: [0, 1, 1], armor: [475652357] },\n      { stats: [1, 0, 1], armor: [691578978] },\n      { stats: [1, 1, 0], armor: [691578979, 1688602431] },\n      { stats: [2, 0, 0], armor: [193869523, 1734144409, 4165919945] },\n    ],\n    [ArmorSlot.ArmorSlotChest]: [\n      { stats: [2, 0, 1], armor: [978537162] },\n      { stats: [2, 1, 0], armor: [903984858, 1474735276, 2766109872] },\n      { stats: [1, 1, 1], armor: [1474735277] },\n      { stats: [1, 2, 0], armor: [2766109874, 3070555693] },\n    ],\n    [ArmorSlot.ArmorSlotLegs]: [\n      { stats: [2, 0, 0], armor: [193869520, 609852545] },\n      { stats: [1, 1, 0], armor: [193869522] },\n    ],\n  },\n  [DestinyClass.Warlock]: {\n    [ArmorSlot.ArmorSlotHelmet]: [\n      { stats: [0, 1, 1], armor: [3381022971, 1030017949, 1096253259, 2384488862] },\n      { stats: [0, 0, 2], armor: [3381022970, 2177524718, 2428181146] },\n      { stats: [1, 0, 1], armor: [3381022969, 3948284065] },\n    ],\n    [ArmorSlot.ArmorSlotGauntlet]: [\n      { stats: [0, 0, 2], armor: [1906093346, 3288917178, 3844826443] },\n      { stats: [0, 2, 1], armor: [2950045886] },\n      { stats: [0, 1, 1], armor: [3084282676, 3844826440] },\n      { stats: [1, 0, 1], armor: [3627185503, 3787517196] },\n    ],\n    [ArmorSlot.ArmorSlotChest]: [\n      { stats: [2, 0, 1], armor: [370930766, 4057299719] },\n      { stats: [0, 2, 1], armor: [1725917554, 4057299718] },\n      { stats: [0, 1, 2], armor: [2082483156] },\n    ],\n    [ArmorSlot.ArmorSlotLegs]: [\n      { stats: [0, 1, 2], armor: [121305948] },\n      { stats: [1, 0, 1], armor: [138282166] },\n      { stats: [0, 1, 1], armor: [4136768282] },\n    ],\n  },\n};\n\n@Component({\n  selector: \"app-theorizer-page\",\n  templateUrl: \"./theorizer-page.component.html\",\n  styleUrls: [\"./theorizer-page.component.scss\"],\n})\nexport class TheorizerPageComponent implements OnInit {\n  ModifierType = ModifierType;\n\n  glpk: GLPK | null = null;\n\n  calculating = false;\n\n  // options\n  options = {\n    solver: {\n      timeout: 5,\n      presolve: true,\n    },\n    armor: {\n      // armorType, 1 = own, 2 = generated, 3 = both\n      armorType: 3,\n      requiresExotic: true,\n    },\n    stats: {\n      desired: {\n        mobility: 0,\n        resilience: 0,\n        recovery: 0,\n        discipline: 0,\n        intellect: 0,\n        strength: 0,\n      },\n      constantBoost: {\n        mobility: 0,\n        resilience: 0,\n        recovery: 0,\n        discipline: 0,\n        intellect: 0,\n        strength: 0,\n      },\n      // if we must reach the EXACT stats and can not go over them\n      statsAreFixed: false,\n      maxValue: 250,\n      minTiers: 0,\n      minPoints: 100,\n      maxWaste: 54,\n    },\n    fragments: {\n      enableFragmentPicker: false,\n      subclass: -1,\n      class: DestinyClass.Unknown,\n    },\n    mods: {\n      maxMods: 5,\n      maxArtifice: 5,\n    },\n    generator: {\n      generateExoticsWithIntrinsicStats: false,\n    },\n    availablePlugs: [\n      [1, 1, 10],\n      [1, 1, 11],\n      [1, 1, 12],\n      [1, 1, 13],\n      [1, 1, 14],\n      [1, 1, 15],\n      [1, 5, 5],\n      [1, 5, 6],\n      [1, 5, 7],\n      [1, 5, 8],\n      [1, 5, 9],\n      [1, 5, 10],\n      [1, 5, 11],\n      [1, 6, 5],\n      [1, 6, 6],\n      [1, 6, 7],\n      [1, 6, 8],\n      [1, 6, 9],\n      [1, 7, 5],\n      [1, 7, 6],\n      [1, 7, 7],\n      [1, 7, 8],\n      [1, 8, 5],\n      [1, 8, 6],\n      [1, 8, 7],\n      [1, 9, 5],\n      [1, 9, 6],\n      [1, 10, 1],\n      [1, 10, 5],\n      [1, 11, 1],\n      [1, 11, 5],\n      [1, 12, 1],\n      [1, 13, 1],\n      [1, 14, 1],\n      [1, 15, 1],\n      [5, 1, 5],\n      [5, 1, 6],\n      [5, 1, 7],\n      [5, 1, 8],\n      [5, 1, 9],\n      [5, 1, 10],\n      [5, 1, 11],\n      [5, 5, 1],\n      [5, 5, 5],\n      [5, 6, 1],\n      [5, 7, 1],\n      [5, 8, 1],\n      [5, 9, 1],\n      [5, 10, 1],\n      [5, 11, 1],\n      [6, 1, 5],\n      [6, 1, 6],\n      [6, 1, 7],\n      [6, 1, 8],\n      [6, 1, 9],\n      [6, 5, 1],\n      [6, 6, 1],\n      [6, 7, 1],\n      [6, 8, 1],\n      [6, 9, 1],\n      [7, 1, 5],\n      [7, 1, 6],\n      [7, 1, 7],\n      [7, 1, 8],\n      [7, 5, 1],\n      [7, 6, 1],\n      [7, 7, 1],\n      [7, 8, 1],\n      [8, 1, 5],\n      [8, 1, 6],\n      [8, 1, 7],\n      [8, 5, 1],\n      [8, 6, 1],\n      [8, 7, 1],\n      [9, 1, 5],\n      [9, 1, 6],\n      [9, 5, 1],\n      [9, 6, 1],\n      [10, 1, 1],\n      [10, 1, 5],\n      [10, 5, 1],\n      [11, 1, 1],\n      [11, 1, 5],\n      [11, 5, 1],\n      [12, 1, 1],\n      [13, 1, 1],\n      [14, 1, 1],\n      [15, 1, 1],\n    ],\n  };\n  result: Result | null = null;\n  result_items: any | null = null;\n  time_progress = 0;\n  private timerId: number = 0;\n  lp: LP | null = null;\n\n  private db: Database;\n\n  constructor() {\n    this.db = new Database();\n  }\n\n  sum(l: number[]): number {\n    return l.reduce((a, b) => a + b, 0);\n  }\n\n  getPerkName(perk: number) {\n    return ArmorPerkOrSlotNames[perk as ArmorPerkOrSlot];\n  }\n\n  getPerkIconUrl(perk: number) {\n    return ArmorPerkOrSlotIcons[perk as ArmorPerkOrSlot];\n  }\n\n  slotNameByIndex(index: number): string {\n    switch (index) {\n      case 0:\n        return \"Helmet\";\n      case 1:\n        return \"Gauntlets\";\n      case 2:\n        return \"Chest Armor\";\n      case 3:\n        return \"Leg Armor\";\n      case 4:\n        return \"Class Item\";\n      default:\n        return \"Unknown\";\n    }\n  }\n\n  resultValueToText(value: number): string {\n    // this.GLP_UNDEF=1,this.GLP_FEAS=2,this.GLP_INFEAS=3,this.GLP_NOFEAS=4,this.GLP_OPT=5,this.GLP_UNBND=6,\n    switch (value) {\n      case 1:\n        return \"Undefined. Might be unsolvable. Give it more time.\";\n      case 2:\n        return \"Feasible, but not optimal. Give it more time.\";\n      case 3:\n        return \"Infeasible. Your configuration is not possible.\";\n      case 4:\n        return \"No feasible solution found. Your configuration may not be possible.\";\n      case 5:\n        return \"Optimal solution found.\";\n      case 6:\n        return \"Unbounded. Your configuration is not possible (actually a Mijago skill issue).\";\n      default:\n        return \"Unknown result\";\n    }\n  }\n\n  async ngOnInit() {\n    this.glpk = await GLPKConstructor();\n\n    console.log(this.glpk);\n  }\n\n  startTimer() {\n    this.time_progress = 0;\n    const interval = (this.options.solver.timeout / 100) * 1000;\n\n    this.timerId = setInterval(() => {\n      this.time_progress += 1;\n      if (this.time_progress >= 100) {\n        this.stopTimer();\n      }\n    }, interval) as unknown as number;\n  }\n\n  stopTimer() {\n    if (this.timerId) {\n      this.time_progress = 100;\n      clearInterval(this.timerId);\n      this.timerId = 0;\n    }\n  }\n\n  async run() {\n    this.result = this.result_items = null;\n    if (!this.glpk) throw new Error(\"GLPK not initialized yet\");\n    this.calculating = true;\n\n    const lp = await this.buildFromConfiguration();\n    console.log(lp);\n\n    // check lp.binaries for duplicates\n    const binaries = lp.binaries!;\n    const duplicates = binaries.filter((item, index) => binaries.indexOf(item) != index);\n    if (duplicates.length > 0) {\n      alert(\"Duplicate items in binary list: \" + duplicates.join(\", \"));\n      this.calculating = false;\n      return;\n    }\n\n    // also check lp.generals\n    const generals = lp.generals!;\n    const duplicates2 = generals.filter((item, index) => generals.indexOf(item) != index);\n    if (duplicates2.length > 0) {\n      alert(\"Duplicate items in generals list: \" + duplicates2.join(\", \"));\n      this.calculating = false;\n      return;\n    }\n\n    this.lp = lp;\n    this.startTimer();\n    const result = await this.glpk.solve(lp);\n    this.stopTimer();\n    this.result_items = await this.getItemsFromResult(result);\n    this.result = result;\n    this.calculating = false;\n  }\n\n  async getItemsFromResult(result: Result) {\n    const items = [\n      [0, 0, 0, 0, 0, 0],\n      [0, 0, 0, 0, 0, 0],\n      [0, 0, 0, 0, 0, 0],\n      [0, 0, 0, 0, 0, 0],\n      [0, 0, 0, 0, 0, 0],\n    ];\n    // contains if items are generated or not, and if they are not, then the metadata\n    const itemMeta: (IInventoryArmor | null)[] = [null, null, null, null, null];\n    const itemIntrinsics: (any | null)[] = [null, null, null, null, null];\n    const itemExotic: (boolean | null)[] = [null, null, null, null, null];\n    const itemArtifice: boolean[] = [false, false, false, false, false];\n    let artificeCount = 0;\n\n    const masterwork = [10, 10, 10, 10, 10, 10];\n    const constants = [0, 0, 0, 0, 0, 0];\n\n    const statMods = {\n      major: [0, 0, 0, 0, 0, 0],\n      minor: [0, 0, 0, 0, 0, 0],\n    };\n    const artificeMods = [0, 0, 0, 0, 0, 0];\n\n    for (let kv in result!.result!.vars) {\n      if (!kv.startsWith(\"constant_\")) continue;\n      if (result!.result!.vars[kv] == 0) continue;\n\n      const [_, stat] = kv.split(\"_\");\n      constants[parseInt(stat)] += result!.result!.vars[kv] - 10;\n    }\n    for (let kv in result!.result!.vars) {\n      if (!kv.startsWith(\"plug_\")) continue;\n      if (result!.result!.vars[kv] == 0) continue;\n\n      const [_, slot, tier, plug] = kv.split(\"_\");\n      const plugValues = this.options.availablePlugs[parseInt(plug)];\n      const is2ndHalf = parseInt(tier) >= 2 ? 1 : 0;\n      for (let stat = 0; stat < 3; stat++) {\n        items[parseInt(slot)][stat + 3 * is2ndHalf] += plugValues[stat];\n      }\n\n      // check if exotic_${slot} is 1\n      if (result!.result!.vars[`exotic_${slot}`] == 1) {\n        itemExotic[parseInt(slot)] = true;\n      }\n    }\n    const itemsToGrab = [];\n    for (let kv in result!.result!.vars) {\n      if (!kv.startsWith(\"item_\")) continue;\n      if (result!.result!.vars[kv] == 0) continue;\n\n      const [_, slot, itemId] = kv.split(\"_\");\n      itemsToGrab.push({ slot: parseInt(slot), itemId: itemId });\n    }\n    if (itemsToGrab.length > 0) {\n      for (let e of itemsToGrab) {\n        let dbitems = await this.db.inventoryArmor\n          .where(\"itemInstanceId\")\n          .equals(e.itemId)\n          .toArray();\n        if (dbitems.length == 0) continue;\n        const item = dbitems[0];\n        itemMeta[e.slot] = item;\n        items[e.slot][0] += item.mobility;\n        items[e.slot][1] += item.resilience;\n        items[e.slot][2] += item.recovery;\n        items[e.slot][3] += item.discipline;\n        items[e.slot][4] += item.intellect;\n        items[e.slot][5] += item.strength;\n\n        itemExotic[e.slot] = item.isExotic == 1;\n        itemArtifice[e.slot] = item.perk == ArmorPerkOrSlot.SlotArtifice;\n        artificeCount += itemArtifice[e.slot] ? 1 : 0;\n      }\n    }\n\n    // grab item bonus stats, if set\n    for (let kv in result!.result!.vars) {\n      // intrinsic_${slot}_${clazz}_${i}\n      if (!kv.startsWith(\"intrinsic_\")) continue;\n      if (result!.result!.vars[kv] == 0) continue;\n\n      let [_, slot, clazz, entryId] = kv.split(\"_\");\n      const entry = (intrinsicExoticArmorByClassAndSlot as any)[parseInt(clazz)][\n        parseInt(slot) + 1\n      ][parseInt(entryId)];\n\n      const entryArmor = await Promise.all(\n        entry.armor.map(async (k: number) => {\n          return await this.db.manifestArmor.where(\"hash\").equals(k).first();\n        })\n      );\n\n      itemIntrinsics[parseInt(slot)] = {\n        entry: entry,\n        items: entryArmor,\n      };\n    }\n\n    /* STAT MODS */\n    for (let kv in result!.result!.vars) {\n      if (!kv.startsWith(\"mod_\")) continue;\n      if (result!.result!.vars[kv] == 0) continue;\n\n      const [_, type, stat] = kv.split(\"_\");\n      statMods[type == \"1\" ? \"minor\" : \"major\"][parseInt(stat)] += result!.result!.vars[kv];\n    }\n\n    /* ARTIFICE */\n    let requiredArtificeArmor = 0;\n    for (let kv in result!.result!.vars) {\n      if (!kv.startsWith(\"artifice_\")) continue;\n      if (result!.result!.vars[kv] == 0) continue;\n\n      const [_, stat] = kv.split(\"_\");\n      artificeMods[parseInt(stat)] += result!.result!.vars[kv];\n      requiredArtificeArmor += result!.result!.vars[kv];\n    }\n\n    // class item is artifice too\n    if (artificeCount < requiredArtificeArmor) {\n      // set class item to be artifice\n      itemArtifice[4] = true;\n      artificeCount++;\n    }\n\n    for (let slot = 0; slot < 4 && artificeCount < requiredArtificeArmor; slot++) {\n      if (itemArtifice[slot]) continue;\n      if (itemExotic[slot] == false) continue;\n      if (itemMeta[slot] != null) continue;\n      itemArtifice[slot] = true;\n      artificeCount++;\n    }\n\n    // now sum every stat to get the final value\n    const total = [0, 0, 0, 0, 0, 0];\n    for (let stat = 0; stat < 6; stat++) {\n      for (let slot = 0; slot < 5; slot++) {\n        total[stat] += items[slot][stat];\n\n        if (stat < 3 && itemIntrinsics[slot] != null) {\n          total[stat] += itemIntrinsics[slot][\"entry\"][\"stats\"][stat];\n        }\n      }\n      total[stat] += constants[stat];\n      total[stat] += masterwork[stat];\n      console.log(\n        \"artificeMods[stat]\",\n        stat,\n        artificeMods[stat],\n        \"|\",\n        total[stat],\n        10 * statMods.major[stat],\n        5 * statMods.minor[stat],\n        3 * artificeMods[stat]\n      );\n      total[stat] += 10 * statMods.major[stat] + 5 * statMods.minor[stat] + 3 * artificeMods[stat];\n    }\n\n    // get the tiers for each stat\n    const tiers = total.map((k) => Math.floor(k / 10));\n    const waste = total.map((k) => k % 10);\n    const tierSum = tiers.reduce((a, b) => a + b, 0);\n\n    return {\n      items,\n      artificeMods,\n      statMods,\n      constants,\n      total,\n      waste,\n      tiers,\n      tierSum,\n      masterwork,\n      itemMeta,\n      itemIntrinsics,\n      itemExotic,\n      itemArtifice,\n    };\n  }\n\n  async getItems(clazz?: DestinyClass): Promise<IInventoryArmor[]> {\n    let items = (await this.db.inventoryArmor\n      .where(\"slot\")\n      .notEqual(ArmorSlot.ArmorSlotNone)\n      .distinct()\n      .toArray()) as IInventoryArmor[];\n\n    if (clazz != undefined) {\n      items = items.filter((item) => item.clazz == clazz);\n    }\n\n    // drop duplicates\n    items = items.filter((item, index) => {\n      return (\n        items.findIndex((i) => {\n          return i.itemInstanceId == item.itemInstanceId;\n        }) == index\n      );\n    });\n\n    // items = items\n    // config.OnlyUseMasterworkedExotics - only keep exotics that are masterworked\n    //.filter((item) => !config.onlyUseMasterworkedExotics || !(item.rarity == TierType.Exotic && !item.masterworked))\n    // config.OnlyUseMasterworkedLegendaries - only keep exotics that are masterworked\n    //.filter((item) => !config.onlyUseMasterworkedLegendaries || !(item.rarity == TierType.Superior && !item.masterworked))\n    // non-legendaries and non-exotics\n    //.filter(item => config.allowBlueArmorPieces || item.rarity == TierType.Exotic || item.rarity == TierType.Superior)\n    // sunset armor\n    //.filter(item => !config.ignoreSunsetArmor || !item.isSunset)\n    // armor perks\n\n    return items;\n  }\n\n  async buildFromConfiguration(): Promise<LP> {\n    if (!this.glpk) throw new Error(\"GLPK not initialized yet\");\n\n    const lp = {\n      name: \"d2ap_theorizer\",\n      options: {\n        msgLev: this.glpk.GLP_MSG_ERR,\n        presolve: this.options.solver.presolve,\n        tmlim: this.options.solver.timeout,\n      },\n      objective: {\n        direction: this.glpk.GLP_MAX,\n        name: \"objective\",\n        vars: [],\n      },\n      subjectTo: [\n        {\n          name: \"goal_mobility\",\n          bnds: {\n            type: this.glpk.GLP_DB,\n            ub: this.options.stats.maxValue,\n            lb: this.options.stats.desired.mobility,\n          },\n          vars: [] as any[],\n        },\n        {\n          name: \"goal_resilience\",\n          bnds: {\n            type: this.glpk.GLP_DB,\n            ub: this.options.stats.maxValue,\n            lb: this.options.stats.desired.resilience,\n          },\n          vars: [] as any[],\n        },\n        {\n          name: \"goal_recovery\",\n          bnds: {\n            type: this.glpk.GLP_DB,\n            ub: this.options.stats.maxValue,\n            lb: this.options.stats.desired.recovery,\n          },\n          vars: [] as any[],\n        },\n        {\n          name: \"goal_discipline\",\n          bnds: {\n            type: this.glpk.GLP_DB,\n            ub: this.options.stats.maxValue,\n            lb: this.options.stats.desired.discipline,\n          },\n          vars: [] as any[],\n        },\n        {\n          name: \"goal_intellect\",\n          bnds: {\n            type: this.glpk.GLP_DB,\n            ub: this.options.stats.maxValue,\n            lb: this.options.stats.desired.intellect,\n          },\n          vars: [] as any[],\n        },\n        {\n          name: \"goal_strength\",\n          bnds: {\n            type: this.glpk.GLP_DB,\n            ub: this.options.stats.maxValue,\n            lb: this.options.stats.desired.strength,\n          },\n          vars: [] as any[],\n        },\n      ],\n      bounds: [],\n      binaries: [], // binary values\n      generals: [], // integers\n    } as LP;\n\n    // add MW and Const Values\n    for (let stat = 0; stat < 6; stat++) {\n      const val = (this.options.stats as any).constantBoost[statNames[stat]];\n      let constVal = 10 + val;\n      lp.bounds!.push({\n        name: `constant_${stat}`,\n        type: this.glpk.GLP_FX,\n        ub: constVal,\n        lb: constVal,\n      });\n      lp.subjectTo![stat].vars.push({ name: `constant_${stat}`, coef: 1 });\n    }\n\n    const withOwnArmor = (this.options.armor.armorType & 1) > 0;\n    const withGeneratedArmor = (this.options.armor.armorType & 2) > 0;\n    const withBothArmorSources = withOwnArmor && withGeneratedArmor;\n\n    const items = await this.getItems();\n    let helmets = items.filter((i) => i.slot == ArmorSlot.ArmorSlotHelmet);\n    let gauntlets = items.filter((i) => i.slot == ArmorSlot.ArmorSlotGauntlet);\n    let chests = items.filter((i) => i.slot == ArmorSlot.ArmorSlotChest);\n    let legs = items.filter((i) => i.slot == ArmorSlot.ArmorSlotLegs);\n\n    // check class setting\n    if (this.options.fragments.class != DestinyClass.Unknown) {\n      const clazz = this.options.fragments.class;\n      helmets = helmets.filter((i) => i.clazz == clazz);\n      gauntlets = gauntlets.filter((i) => i.clazz == clazz);\n      chests = chests.filter((i) => i.clazz == clazz);\n      legs = legs.filter((i) => i.clazz == clazz);\n    }\n\n    let itemsBySlot = [helmets, gauntlets, chests, legs];\n\n    const classLimitSubject = {\n      name: `classlim`,\n      vars: [] as any[],\n      bnds: { type: this.glpk.GLP_UP, ub: 1, lb: 1 },\n    };\n    const classLimitSubjects = [];\n    // add a variable for each class. Only one of them may be > 0\n    for (let clazz = 0; clazz < 3; clazz++) {\n      const clazzVar = `class_${clazz}`;\n      lp.binaries!.push(clazzVar);\n      classLimitSubject.vars.push({ name: clazzVar, coef: 1 });\n\n      classLimitSubjects.push({\n        name: `classlim_${clazz}`,\n        vars: [{ name: clazzVar, coef: -4 }], // TODO I may have to add 0.25 for theoretical armor piece plugs\n        bnds: { type: this.glpk.GLP_UP, ub: 0, lb: 0 },\n      });\n    }\n\n    // only allow ZERO or ONE exotic\n    const exoticLimitSubject = {\n      name: `exoticlim`,\n      vars: [] as any[],\n      bnds: { type: this.glpk.GLP_DB, ub: 1, lb: 0 },\n    };\n\n    if (this.options.armor.requiresExotic) {\n      console.log(\"requiring exotic\");\n      exoticLimitSubject.bnds = { type: this.glpk.GLP_FX, ub: 1, lb: 1 };\n    }\n\n    lp.subjectTo!.push(classLimitSubject);\n    lp.subjectTo!.push(...classLimitSubjects);\n    lp.subjectTo!.push(exoticLimitSubject);\n\n    const penalty = 20;\n    const artificeArmorPieces = [];\n    const artificeArmorPlugs = [];\n\n    // we have 4 slots\n    // we pick four plugs for each slot; a plug has three values\n    // the sum of first two plugs represents mob/res/rec\n    // the sum of second two plugs represents dis/int/str\n    // the sum of the first two plugs over all armor pieces represents the total base of mob/res/rec\n    // the sum of the second two plugs over all armor pieces represents the total base of dis/int/str\n    for (let slot = 0; slot < 4; slot++) {\n      const slotLimitSubject = {\n        name: `slotlim_${slot}`,\n        vars: [] as any[],\n        bnds: { type: this.glpk.GLP_FX, ub: 4, lb: 4 },\n      };\n      lp.subjectTo!.push(slotLimitSubject);\n\n      // introduce one binary variable for each plug in each slot\n      if (withGeneratedArmor) {\n        const intrinsicStatSelectionSubject = {\n          name: `allow_intrinsic_${slot}`,\n          vars: [] as any[],\n          bnds: { type: this.glpk.GLP_UP, ub: 0, lb: 0 },\n        };\n\n        lp.binaries!.push(`exotic_${slot}`);\n        exoticLimitSubject.vars.push({ name: `exotic_${slot}`, coef: 1 });\n\n        // generateExoticsWithIntrinsicStats\n        if (this.options.generator.generateExoticsWithIntrinsicStats) {\n          // add variables to see if this slot is generated and exotic\n          // only one slot is allowed to be exotic, so we can use this later\n\n          // add the subject that limits the usage of intrinsic stat plugs to only work when we select 4 plugs\n          lp.subjectTo!.push(intrinsicStatSelectionSubject);\n\n          // add a variable for categories in possibleBonusStats\n          for (let clazz = 0; clazz < 3; clazz++) {\n            const entries = (intrinsicExoticArmorByClassAndSlot as any)[clazz][slot + 1];\n            for (let i = 0; i < entries.length; i++) {\n              let entry = entries[i];\n              const name = `intrinsic_${slot}_${clazz}_${i}`;\n              lp.binaries!.push(name);\n              // add to intrinsicStatSelectionSubject\n              intrinsicStatSelectionSubject.vars.push({ name: name, coef: 1 });\n\n              // add a limit that it is <= selected class\n              lp.subjectTo!.push({\n                name: `intrinsic_${slot}_${clazz}_classlim`,\n                vars: [\n                  { name: name, coef: 1 },\n                  { name: `class_${clazz}`, coef: -1 },\n                ],\n                bnds: { type: this.glpk.GLP_UP, ub: 0, lb: 0 },\n              });\n\n              // add a limit that it only added when no exotic is selected\n              lp.subjectTo!.push({\n                name: `intrinsic_${slot}_${clazz}_exoticlim`,\n                vars: [\n                  { name: name, coef: 1 },\n                  { name: `exotic_${slot}`, coef: -1 },\n                ],\n                bnds: { type: this.glpk.GLP_UP, ub: 0, lb: 0 },\n              });\n\n              // add the stats\n              for (let statmrr = 0; statmrr < 3; statmrr++) {\n                if (entry.stats[statmrr] > 0)\n                  lp.subjectTo![statmrr].vars.push({\n                    name: name,\n                    coef: entry.stats[statmrr],\n                  });\n              }\n\n              // apply a penalty for using this\n              lp.objective!.vars.push({ name: name, coef: -100 });\n            }\n          }\n          // TODO make sure that we only add them if it is generated\n        }\n\n        // only allow this slot to be exotic if it is also generated and used\n        let exoticGenlimSlot = {\n          name: `exotic_${slot}_genlim`,\n          vars: [{ name: `exotic_${slot}`, coef: 1 }],\n          bnds: { type: this.glpk.GLP_UP, ub: 0, lb: 0 },\n        };\n        lp.subjectTo!.push(exoticGenlimSlot);\n\n        for (let plugId = 0; plugId < 4; plugId++) {\n          const subject = {\n            name: `plug_${slot}_${plugId}`,\n            vars: [] as any[],\n            bnds: { type: this.glpk.GLP_FX, ub: 1, lb: 1 },\n          };\n          if (withBothArmorSources) subject.bnds = { type: this.glpk.GLP_DB, ub: 1, lb: 0 };\n\n          for (let plug = 0; plug < this.options.availablePlugs.length; plug++) {\n            const plugName = `plug_${slot}_${plugId}_${plug}`;\n            lp.binaries!.push(plugName);\n            subject.vars.push({ name: plugName, coef: 1 });\n\n            // add to intrinsicStatSelectionSubject\n            intrinsicStatSelectionSubject.vars.push({ name: plugName, coef: -0.25 });\n            exoticGenlimSlot.vars.push({ name: plugName, coef: -0.25 });\n\n            artificeArmorPlugs.push(plugName);\n\n            // 4 plugs per item, so coeff 0.25 for each plug\n            slotLimitSubject.vars.push({ name: plugName, coef: 1 });\n\n            if (withBothArmorSources) {\n              lp.objective!.vars.push({ name: plugName, coef: -100 });\n            }\n\n            // add the plug to the subject which manages the required stats\n            for (let n = 0; n < 3; n++) {\n              let cn = n;\n              if (plugId > 1) cn += 3;\n\n              lp.subjectTo![cn].vars.push({\n                name: plugName,\n                coef: this.options.availablePlugs[plug][n],\n              });\n              // add a penalty for every stat point. This means the solver will try to minimize the number of generated stat points\n              if (penalty > 0)\n                lp.objective!.vars.push({\n                  name: plugName,\n                  coef: -penalty * this.options.availablePlugs[plug][n],\n                });\n            }\n          }\n          lp.subjectTo!.push(subject);\n        }\n      }\n\n      if (withOwnArmor) {\n        // add a variable for each item in each slot\n        for (let item of itemsBySlot[slot]) {\n          const item_id = item.itemInstanceId;\n          const identifier = `item_${slot}_${item_id}`;\n          lp.binaries!.push(identifier);\n          //lp.bounds!.push({name: identifier, type: this.glpk.GLP_DB, ub: 1, lb: 0});\n          lp.subjectTo![0].vars.push({ name: identifier, coef: item.mobility });\n          lp.subjectTo![1].vars.push({ name: identifier, coef: item.resilience });\n          lp.subjectTo![2].vars.push({ name: identifier, coef: item.recovery });\n          lp.subjectTo![3].vars.push({ name: identifier, coef: item.discipline });\n          lp.subjectTo![4].vars.push({ name: identifier, coef: item.intellect });\n          lp.subjectTo![5].vars.push({ name: identifier, coef: item.strength });\n          // limit the number of items per slot to 1\n          slotLimitSubject.vars.push({ name: identifier, coef: 4 });\n          // Add an objective for each item, which means we want to have as many of our own items as possible\n          if (withBothArmorSources) {\n            lp.objective!.vars.push({ name: identifier, coef: 100 });\n          }\n\n          // class limit subject\n          classLimitSubjects[item.clazz].vars.push({ name: identifier, coef: 1 });\n\n          // exotic limit\n          if (item.isExotic) {\n            exoticLimitSubject.vars.push({ name: identifier, coef: 1 });\n            // also rate this one higher, so that we have more exotics in the results\n            lp.objective!.vars.push({ name: identifier, coef: 40 });\n          }\n          if (item.perk == ArmorPerkOrSlot.SlotArtifice) {\n            artificeArmorPieces.push(identifier);\n          }\n        }\n      }\n    }\n\n    if (this.options.mods.maxMods > 0) {\n      const modSubject = {\n        name: `limit_mods`,\n        vars: [] as any[],\n        bnds: {\n          type: this.options.mods.maxMods > 0 ? this.glpk.GLP_DB : this.glpk.GLP_FX,\n          ub: this.options.mods.maxMods,\n          lb: 0,\n        },\n      };\n      for (let stat = 0; stat < 6; stat++) {\n        // 1 minor, 2 major; and then artifice\n        lp.bounds!.push({ name: `mod_${1}_${stat}`, type: this.glpk.GLP_DB, ub: 5, lb: 0 });\n        lp.bounds!.push({ name: `mod_${2}_${stat}`, type: this.glpk.GLP_DB, ub: 5, lb: 0 });\n        lp.generals!.push(`mod_${1}_${stat}`);\n        lp.generals!.push(`mod_${2}_${stat}`);\n\n        lp.subjectTo![stat].vars.push({ name: `mod_${1}_${stat}`, coef: 5 });\n        lp.subjectTo![stat].vars.push({ name: `mod_${2}_${stat}`, coef: 10 });\n\n        // only allow a total of 5 mods and 3 artificer mods\n        modSubject.vars.push({ name: `mod_${1}_${stat}`, coef: 1 });\n        modSubject.vars.push({ name: `mod_${2}_${stat}`, coef: 1 });\n      }\n      lp.subjectTo!.push(modSubject);\n    }\n\n    if (this.options.mods.maxArtifice > 0) {\n      const artifMaxSubject = {\n        name: `limit_artif_max`,\n        vars: [] as any[],\n        bnds: {\n          type: this.options.mods.maxArtifice > 0 ? this.glpk.GLP_DB : this.glpk.GLP_FX,\n          ub: this.options.mods.maxArtifice,\n          lb: 0,\n        },\n      };\n      const artifSlotSubject = {\n        name: `limit_artif_slot`,\n        vars: [] as any[],\n        bnds: { type: this.glpk.GLP_UP, ub: 1, lb: 0 }, // UB is 1 as we assume our class item is artifice !TODO make this a setting\n      };\n      // add all armor pieces which can be artificed\n      for (let piece of artificeArmorPieces) {\n        artifSlotSubject.vars.push({ name: piece, coef: -1 });\n      }\n      for (let piece of artificeArmorPlugs) {\n        artifSlotSubject.vars.push({ name: piece, coef: -0.25 });\n      }\n      // add 1 in case we generated an exotic armor\n      if (withGeneratedArmor) {\n        for (let slot = 0; slot < 4; slot++) {\n          artifSlotSubject.vars.push({ name: `exotic_${slot}`, coef: 1 });\n        }\n      }\n\n      for (let stat = 0; stat < 6; stat++) {\n        lp.subjectTo![stat].vars.push({ name: `artifice_${stat}`, coef: 3 });\n        artifMaxSubject.vars.push({ name: `artifice_${stat}`, coef: 1 });\n        artifSlotSubject.vars.push({ name: `artifice_${stat}`, coef: 1 });\n\n        lp.bounds!.push({ name: `artifice_${stat}`, type: this.glpk.GLP_DB, ub: 5, lb: 0 });\n        lp.generals!.push(`artifice_${stat}`);\n      }\n      lp.subjectTo!.push(artifMaxSubject);\n      lp.subjectTo!.push(artifSlotSubject);\n    }\n\n    if (this.options.stats.minTiers > 0 || this.options.stats.maxWaste < 54) {\n      // I want to have the TIERS of the armor stats\n      // for this, I introduce two variables per stat:\n      // - The first is the \"waste\", which is bound between 0 and 9\n      // - The second is the \"tier\", which is bound between -5 and 20\n      // We will set these variables as \"mobility - waste - 10 tier = 0\"\n      for (let stat = 0; stat < 6; stat++) {\n        lp.bounds!.push({ name: `waste_${stat}`, type: this.glpk.GLP_DB, ub: 9, lb: 0 });\n        //lp.bounds!.push({name: `tier_${stat}`, type: this.glpk.GLP_DB, ub: 100, lb: -100});\n        lp.generals!.push(`waste_${stat}`);\n        lp.generals!.push(`tier_${stat}`);\n\n        //lp.objective.vars.push({name: `tier_${stat}`, coef: 2})\n        //lp.objective.vars.push({name: `waste_${stat}`, coef: -100})\n\n        const setWasteAndTierSubject = {\n          name: `set_waste_and_tier_${stat}`,\n          vars: [\n            { name: `waste_${stat}`, coef: -1 },\n            { name: `tier_${stat}`, coef: -10 },\n            ...lp.subjectTo![stat].vars,\n          ],\n          bnds: { type: this.glpk.GLP_FX, ub: 0, lb: 0 },\n        };\n\n        lp.subjectTo!.push(setWasteAndTierSubject);\n      }\n\n      // set minTiers <= the sum of the tiers\n      if (this.options.stats.minTiers > 0) {\n        const minTierSubject = {\n          name: `require_tier_minimum`,\n          vars: [] as any[],\n          bnds: { type: this.glpk.GLP_LO, ub: 0, lb: this.options.stats.minTiers },\n        };\n        console.log(\"this.options.stats.minTiers\", this.options.stats.minTiers);\n        for (let stat = 0; stat < 6; stat++) {\n          minTierSubject.vars.push({ name: `tier_${stat}`, coef: 1 });\n        }\n        lp.subjectTo!.push(minTierSubject);\n      }\n\n      // Specify maxWaste\n      if (this.options.stats.maxWaste < 54) {\n        const maxWasteSubject = {\n          name: `require_waste_maximum`,\n          vars: [] as any[],\n          bnds: {\n            type: this.options.stats.maxWaste > 0 ? this.glpk.GLP_UP : this.glpk.GLP_FX,\n            ub: this.options.stats.maxWaste,\n            lb: 0,\n          },\n        };\n        for (let stat = 0; stat < 6; stat++) {\n          maxWasteSubject.vars.push({ name: `waste_${stat}`, coef: 1 });\n        }\n        lp.subjectTo!.push(maxWasteSubject);\n      }\n    }\n\n    // Fix the stats if we enforce them\n    if (this.options.stats.statsAreFixed) {\n      for (let n = 0; n < 6; n++) {\n        lp.subjectTo[n].bnds.ub = lp.subjectTo[n].bnds.lb;\n        lp.subjectTo[n].bnds.type = this.glpk.GLP_FX;\n      }\n    }\n\n    return lp;\n  }\n}\n","/*\n * Copyright (c) 2023 D2ArmorPicker by Mijago.\n *\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU Affero General Public License as published\n * by the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU Affero General Public License for more details.\n *\n * You should have received a copy of the GNU Affero General Public License\n * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n */\n\nimport { NgModule } from \"@angular/core\";\nimport { CommonModule } from \"@angular/common\";\nimport { TheorizerPageComponent } from \"./theorizer-page.component\";\nimport { RouterModule, Routes } from \"@angular/router\";\nimport { CommonMaterialModule } from \"../../../../modules/common-material/common-material.module\";\n\n// router\nconst routes: Routes = [\n  {\n    path: \"\",\n    component: TheorizerPageComponent,\n  },\n];\n\n@NgModule({\n  declarations: [TheorizerPageComponent],\n  exports: [TheorizerPageComponent],\n  imports: [CommonModule, CommonMaterialModule, RouterModule.forChild(routes)],\n})\nexport class TheorizerPageModule {}\n"],"x_google_ignoreList":[]}