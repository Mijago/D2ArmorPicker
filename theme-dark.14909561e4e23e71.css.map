{"version":3,"sources":["./src/theme.scss","./node_modules/@angular/material/core/ripple/_ripple.scss","./node_modules/@angular/cdk/a11y/_index.scss","./node_modules/@angular/cdk/overlay/_index.scss","./node_modules/@angular/cdk/text-field/_index.scss","./node_modules/@angular/material/core/focus-indicators/_private.scss","./node_modules/@angular/material/core/style/_layout-common.scss","./node_modules/@angular/material/core/ripple/_ripple-theme.scss","./node_modules/@angular/material/core/style/_sass-utils.scss","./node_modules/@material/theme/_css.scss","./node_modules/@angular/material/core/option/_option-theme.scss","./node_modules/@angular/material/core/selection/pseudo-checkbox/_pseudo-checkbox-theme.scss","./node_modules/@angular/material/core/_core-theme.scss","./node_modules/@angular/material/card/_card-theme.scss","./node_modules/@angular/material/progress-bar/_progress-bar-theme.scss","./node_modules/@material/linear-progress/_linear-progress-theme.scss","./node_modules/@material/theme/_gss.scss","./node_modules/@material/dom/_dom.scss","./node_modules/@angular/material/tooltip/_tooltip-theme.scss","./node_modules/@angular/material/form-field/_form-field-subscript.scss","./node_modules/@material/typography/_typography.scss","./node_modules/@angular/material/form-field/_form-field-focus-overlay.scss","./node_modules/@angular/material/form-field/_mdc-text-field-theme-variable-refresh.scss","./node_modules/@angular/material/form-field/_form-field-native-select.scss","./node_modules/@angular/material/core/theming/_palette.scss","./node_modules/@angular/material/form-field/_form-field-theme.scss","./node_modules/@angular/material/form-field/_form-field-density.scss","./node_modules/@angular/material/select/_select-theme.scss","./node_modules/@angular/material/dialog/_dialog-theme.scss","./node_modules/@angular/material/chips/_chips-theme.scss","./node_modules/@angular/material/slide-toggle/_slide-toggle-theme.scss","./node_modules/@material/form-field/_form-field.scss","./node_modules/@angular/material/radio/_radio-theme.scss","./node_modules/@angular/material/slider/_slider-theme.scss","./node_modules/@angular/material/list/_list-theme.scss","./node_modules/@material/list/_list.scss","./node_modules/@angular/material/core/typography/_typography-utils.scss","./node_modules/@angular/material/tabs/_tabs-theme.scss","./node_modules/@angular/material/checkbox/_checkbox-theme.scss","./node_modules/@angular/material/button/_button-theme.scss","./node_modules/@angular/material/button/_button-theme-private.scss","./node_modules/@material/button/_button-base.scss","./node_modules/@angular/material/button/_icon-button-theme.scss","./node_modules/@angular/material/button/_fab-theme.scss","./node_modules/@material/fab/_fab.scss","./node_modules/@angular/material/snack-bar/_snack-bar-theme.scss","./node_modules/@angular/material/table/_table-theme.scss","./node_modules/@angular/material/progress-spinner/_progress-spinner-theme.scss","./node_modules/@angular/material/badge/_badge-theme.scss","./node_modules/@angular/material/datepicker/_datepicker-theme.scss","./node_modules/@angular/material/icon/_icon-theme.scss","./node_modules/@angular/material/stepper/_stepper-theme.scss","./node_modules/@angular/material/sort/_sort-theme.scss","./node_modules/@angular/material/toolbar/_toolbar-theme.scss","./node_modules/@angular/material/tree/_tree-theme.scss"],"sourcesContent":["/*!\n * Copyright (c) 2023 D2ArmorPicker by Mijago.\n *\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU Affero General Public License as published\n * by the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU Affero General Public License for more details.\n *\n * You should have received a copy of the GNU Affero General Public License\n * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n */\n\n@use \"@angular/material\" as mat;\n@import \"@angular/material/theming\";\n@include mat.core();\n\n$my-primary: mat.define-palette(mat.$indigo-palette, 500);\n$my-accent: mat.define-palette(mat.$pink-palette, A200, A100, A400);\n\n$my-theme: mat.define-dark-theme(\n  (\n    color: (\n      primary: $my-primary,\n      accent: $my-accent,\n    ),\n    typography: mat.define-typography-config(),\n  )\n);\n\n@mixin mix-app-theme($my-theme) {\n  $primary: $my-primary;\n  $primary-contrast: $my-primary;\n  html,\n  body {\n    height: 100%;\n    background-color: #292929;\n    color: white;\n  }\n\n  a:not(.mdc-button) {\n    color: #99afe3;\n  }\n  a:visited:not(.mdc-button) {\n    color: #7294dc;\n  }\n\n  .mat-button-toggle {\n    &.mat-button-toggle-checked:not(.isFromMod) {\n      background-color: mat-color($primary) !important;\n      color: mat-color($primary, default-contrast) !important;\n    }\n\n    &.mat-button-toggle-checked.isFromMod {\n      background-color: color-mix(in srgb, mat-color($primary) 70%, transparent);\n    }\n\n    &.not-checked.isFromMod {\n      background-color: color-mix(in srgb, mat-color($primary) 20%, transparent);\n    }\n  }\n}\n\n@include mat.all-component-themes($my-theme);\n@include mix-app-theme($my-theme);\n","@use '@angular/cdk';\n\n@mixin ripple() {\n  // The host element of an mat-ripple directive should always have a position of \"absolute\" or\n  // \"relative\" so that the ripples inside are correctly positioned relatively to the container.\n  .mat-ripple {\n    overflow: hidden;\n\n    // By default, every ripple container should have position: relative in favor of creating an\n    // easy API for developers using the MatRipple directive.\n    position: relative;\n\n    // Promote containers that have ripples to a new layer. We want to target `:not(:empty)`,\n    // because we don't want all ripple containers to have their own layer since they're used in a\n    // lot of places and the layer is only relevant while animating. Note that ideally we'd use\n    // the `contain` property here (see #13175), because `:empty` can be broken by having extra\n    // text inside the element, but it isn't very well supported yet.\n    &:not(:empty) {\n      transform: translateZ(0);\n    }\n  }\n\n  .mat-ripple.mat-ripple-unbounded {\n    overflow: visible;\n  }\n\n  .mat-ripple-element {\n    position: absolute;\n    border-radius: 50%;\n    pointer-events: none;\n\n    transition: opacity, transform 0ms cubic-bezier(0, 0, 0.2, 1);\n\n    // We use a 3d transform here in order to avoid an issue in Safari where\n    // the ripples aren't clipped when inside the shadow DOM (see #24028).\n    transform: scale3d(0, 0, 0);\n\n    // In high contrast mode the ripple is opaque, causing it to obstruct the content.\n    @include cdk.high-contrast(active, off) {\n      display: none;\n    }\n  }\n}\n","/// Emits a CSS class, `.cdk-visually-hidden`. This class can be applied to an element\n/// to make that element visually hidden while remaining available to assistive technology.\n@mixin a11y-visually-hidden() {\n  .cdk-visually-hidden {\n    border: 0;\n    clip: rect(0 0 0 0);\n    height: 1px;\n    margin: -1px;\n    overflow: hidden;\n    padding: 0;\n    position: absolute;\n    width: 1px;\n\n    // This works around a Chrome bug that can cause the tab to crash when large amounts of\n    // non-English text get wrapped: https://bugs.chromium.org/p/chromium/issues/detail?id=1201444\n    white-space: nowrap;\n\n    // Avoid browsers rendering the focus ring in some cases.\n    outline: 0;\n\n    // Avoid some cases where the browser will still render the native controls (see #9049).\n    -webkit-appearance: none;\n    -moz-appearance: none;\n\n    // We need at least one of top/bottom/left/right in order to prevent cases where the\n    // absolute-positioned element is pushed down and can affect scrolling (see #24597).\n    // `left` was chosen here, because it's the least likely to break overrides where the\n    // element might have been positioned (e.g. `mat-checkbox`).\n    left: 0;\n\n    [dir='rtl'] & {\n      left: auto;\n      right: 0;\n    }\n  }\n}\n\n/// @deprecated Use `a11y-visually-hidden`.\n@mixin a11y() {\n  @include a11y-visually-hidden;\n}\n\n/// Emits the mixin's content nested under `$selector-context` if `$selector-context`\n/// is non-empty.\n/// @param {String} selector-context The selector under which to nest the mixin's content.\n@mixin _optionally-nest-content($selector-context) {\n  @if ($selector-context == '') {\n    @content;\n  }\n  @else {\n    #{$selector-context} {\n      @content;\n    }\n  }\n}\n\n/// Applies styles for users in high contrast mode. Note that this only applies\n/// to Microsoft browsers. Chrome can be included by checking for the `html[hc]`\n/// attribute, however Chrome handles high contrast differently.\n///\n/// @param {String} target Type of high contrast setting to target. Defaults to `active`, can be\n///     `white-on-black` or `black-on-white`.\n/// @param {String} encapsulation Whether to emit styles for view encapsulation. Values are:\n///     * `on` - works for `Emulated`, `Native`, and `ShadowDom`\n///     * `off` - works for `None`\n///     * `any` - works for all encapsulation modes by emitting the CSS twice (default).\n@mixin high-contrast($target: active, $encapsulation: 'any') {\n  @if ($target != 'active' and $target != 'black-on-white' and $target != 'white-on-black') {\n    @error 'Unknown cdk-high-contrast value \"#{$target}\" provided. ' +\n           'Allowed values are \"active\", \"black-on-white\", and \"white-on-black\"';\n  }\n\n  @if ($encapsulation != 'on' and $encapsulation != 'off' and $encapsulation != 'any') {\n    @error 'Unknown cdk-high-contrast encapsulation \"#{$encapsulation}\" provided. ' +\n           'Allowed values are \"on\", \"off\", and \"any\"';\n  }\n\n  // If the selector context has multiple parts, such as `.section, .region`, just doing\n  // `.cdk-high-contrast-xxx #{&}` will only apply the parent selector to the first part of the\n  // context. We address this by nesting the selector context under .cdk-high-contrast.\n  @at-root {\n    $selector-context: #{&};\n\n    @if ($encapsulation != 'on') {\n      // Note that if this selector is updated, the same change has to be made inside\n      // `_overlay.scss` which can't depend on this mixin due to some infrastructure limitations.\n      .cdk-high-contrast-#{$target} {\n        @include _optionally-nest-content($selector-context) {\n          @content;\n        }\n      }\n    }\n\n    @if ($encapsulation != 'off') {\n      .cdk-high-contrast-#{$target} :host {\n        @include _optionally-nest-content($selector-context) {\n          @content;\n        }\n      }\n    }\n  }\n}\n","// We want overlays to always appear over user content, so set a baseline\n// very high z-index for the overlay container, which is where we create the new\n// stacking context for all overlays.\n$overlay-container-z-index: 1000 !default;\n$overlay-z-index: 1000 !default;\n$overlay-backdrop-z-index: 1000 !default;\n\n// Background color for all of the backdrops\n$overlay-backdrop-color: rgba(0, 0, 0, 0.32) !default;\n\n// Default backdrop animation is based on the Material Design swift-ease-out.\n$backdrop-animation-duration: 400ms !default;\n$backdrop-animation-timing-function: cubic-bezier(0.25, 0.8, 0.25, 1) !default;\n\n/// Emits structural styles required for cdk/overlay to function.\n@mixin overlay() {\n  .cdk-overlay-container, .cdk-global-overlay-wrapper {\n    // Disable events from being captured on the overlay container.\n    pointer-events: none;\n\n    // The container should be the size of the viewport.\n    top: 0;\n    left: 0;\n    height: 100%;\n    width: 100%;\n  }\n\n  // The overlay-container is an invisible element which contains all individual overlays.\n  .cdk-overlay-container {\n    position: fixed;\n    z-index: $overlay-container-z-index;\n\n    &:empty {\n      // Hide the element when it doesn't have any child nodes. This doesn't\n      // include overlays that have been detached, rather than disposed.\n      display: none;\n    }\n  }\n\n  // We use an extra wrapper element in order to use make the overlay itself a flex item.\n  // This makes centering the overlay easy without running into the subpixel rendering\n  // problems tied to using `transform` and without interfering with the other position\n  // strategies.\n  .cdk-global-overlay-wrapper {\n    display: flex;\n    position: absolute;\n    z-index: $overlay-z-index;\n  }\n\n  // A single overlay pane.\n  .cdk-overlay-pane {\n    // Note: it's important for this one to start off `absolute`,\n    // in order for us to be able to measure it correctly.\n    position: absolute;\n    pointer-events: auto;\n    box-sizing: border-box;\n    z-index: $overlay-z-index;\n\n    // For connected-position overlays, we set `display: flex` in\n    // order to force `max-width` and `max-height` to take effect.\n    display: flex;\n    max-width: 100%;\n    max-height: 100%;\n  }\n\n  .cdk-overlay-backdrop {\n    // TODO(jelbourn): reuse sidenav fullscreen mixin.\n    position: absolute;\n    top: 0;\n    bottom: 0;\n    left: 0;\n    right: 0;\n\n    z-index: $overlay-backdrop-z-index;\n    pointer-events: auto;\n    -webkit-tap-highlight-color: transparent;\n    transition: opacity $backdrop-animation-duration $backdrop-animation-timing-function;\n    opacity: 0;\n\n    &.cdk-overlay-backdrop-showing {\n      opacity: 1;\n\n      // Note that we can't import and use the `high-contrast` mixin from `_a11y.scss`, because\n      // this file will be copied to the top-level `cdk` package when putting together the files\n      // for npm. Any relative import paths we use here will become invalid once the file is copied.\n      .cdk-high-contrast-active & {\n        // In high contrast mode the rgba background will become solid\n        // so we need to fall back to making it opaque using `opacity`.\n        opacity: 0.6;\n      }\n    }\n  }\n\n  .cdk-overlay-dark-backdrop {\n    background: $overlay-backdrop-color;\n  }\n\n  .cdk-overlay-transparent-backdrop {\n    // Define a transition on the visibility so that the `transitionend` event can fire immediately.\n    transition: visibility 1ms linear, opacity 1ms linear;\n    visibility: hidden;\n    opacity: 1;\n\n    // Note: as of Firefox 57, having the backdrop be `background: none` will prevent it from\n    // capturing the user's mouse scroll events. Since we also can't use something like\n    // `rgba(0, 0, 0, 0)`, we work around the inconsistency by not setting the background at\n    // all and using `opacity` to make the element transparent.\n    &.cdk-overlay-backdrop-showing {\n      opacity: 0;\n      visibility: visible;\n    }\n  }\n\n  .cdk-overlay-backdrop-noop-animation {\n    transition: none;\n  }\n\n  // Overlay parent element used with the connected position strategy. Used to constrain the\n  // overlay element's size to fit within the viewport.\n  .cdk-overlay-connected-position-bounding-box {\n    position: absolute;\n    z-index: $overlay-z-index;\n\n    // We use `display: flex` on this element exclusively for centering connected overlays.\n    // When *not* centering, a top/left/bottom/right will be set which overrides the normal\n    // flex layout.\n    display: flex;\n\n    // We use the `column` direction here to avoid some flexbox issues in Edge\n    // when using the \"grow after open\" options.\n    flex-direction: column;\n\n    // Add some dimensions so the element has an `innerText` which some people depend on in tests.\n    min-width: 1px;\n    min-height: 1px;\n  }\n\n  // Used when disabling global scrolling.\n  .cdk-global-scrollblock {\n    position: fixed;\n\n    // Necessary for the content not to lose its width. Note that we're using 100%, instead of\n    // 100vw, because 100vw includes the width plus the scrollbar, whereas 100% is the width\n    // that the element had before we made it `fixed`.\n    width: 100%;\n\n    // Note: this will always add a scrollbar to whatever element it is on, which can\n    // potentially result in double scrollbars. It shouldn't be an issue, because we won't\n    // block scrolling on a page that doesn't have a scrollbar in the first place.\n    overflow-y: scroll;\n  }\n}\n","// Structural styles for the autosize text fields.\n@mixin text-field-autosize() {\n  // Remove the resize handle on autosizing textareas, because whatever height\n  // the user resized to will be overwritten once they start typing again.\n  textarea.cdk-textarea-autosize {\n    resize: none;\n  }\n\n  // This class is temporarily applied to the textarea when it is being measured. It is immediately\n  // removed when measuring is complete. We use `!important` rules here to make sure user-specified\n  // rules do not interfere with the measurement.\n  textarea.cdk-textarea-autosize-measuring {\n    @include _autosize-measuring-base;\n    height: auto !important;\n    overflow: hidden !important;\n  }\n\n  // Similar to the `cdk-textarea-autosize-measuring` class, but only applied on Firefox. We need\n  // to use this class, because Firefox has a bug where changing the `overflow` breaks the user's\n  // ability to undo/redo what they were typing (see #16629). This class is only scoped to Firefox,\n  // because the measurements there don't seem to be affected by the `height: 0`, whereas on other\n  // browsers they are, e.g. Chrome detects longer text and IE does't resize back to normal.\n  // Identical issue report: https://bugzilla.mozilla.org/show_bug.cgi?id=448784\n  textarea.cdk-textarea-autosize-measuring-firefox {\n    @include _autosize-measuring-base;\n    height: 0 !important;\n  }\n}\n\n// Core styles that enable monitoring autofill state of text fields.\n@mixin text-field-autofill() {\n  // Keyframes that apply no styles, but allow us to monitor when an text field becomes autofilled\n  // by watching for the animation events that are fired when they start. Note: the /*!*/ comment is\n  // needed to prevent LibSass from stripping the keyframes out.\n  // Based on: https://medium.com/@brunn/detecting-autofilled-fields-in-javascript-aed598d25da7\n  @keyframes cdk-text-field-autofill-start {/*!*/}\n  @keyframes cdk-text-field-autofill-end {/*!*/}\n\n  .cdk-text-field-autofill-monitored:-webkit-autofill {\n    // Since Chrome 80 we need a 1ms delay, or the animationstart event won't fire.\n    animation: cdk-text-field-autofill-start 0s 1ms;\n  }\n\n  .cdk-text-field-autofill-monitored:not(:-webkit-autofill) {\n    // Since Chrome 80 we need a 1ms delay, or the animationstart event won't fire.\n    animation: cdk-text-field-autofill-end 0s 1ms;\n  }\n}\n\n@mixin _autosize-measuring-base {\n  // Having 2px top and bottom padding seems to fix a bug where Chrome gets an incorrect\n  // measurement. We just have to account for it later and subtract it off the final result.\n  padding: 2px 0 !important;\n  box-sizing: content-box !important;\n}\n\n// Used to generate UIDs for keyframes used to change the text field autofill styles.\n$autofill-color-frame-count: 0;\n\n// Mixin used to apply custom background and foreground colors to an autofilled text field.\n// Based on: https://stackoverflow.com/questions/2781549/\n// removing-input-background-colour-for-chrome-autocomplete#answer-37432260\n@mixin text-field-autofill-color($background, $foreground:'') {\n  @keyframes cdk-text-field-autofill-color-#{$autofill-color-frame-count} {\n    to {\n      background: $background;\n      @if $foreground != '' { color: $foreground; }\n    }\n  }\n\n  &:-webkit-autofill {\n    animation: cdk-text-field-autofill-color-#{$autofill-color-frame-count} both;\n  }\n\n  &.cdk-text-field-autofill-monitored:-webkit-autofill {\n    // Since Chrome 80 we need a 1ms delay for cdk-text-field-autofill-start, or the animationstart\n    // event won't fire.\n    animation: cdk-text-field-autofill-start 0s 1ms,\n               cdk-text-field-autofill-color-#{$autofill-color-frame-count} both;\n  }\n\n  $autofill-color-frame-count: $autofill-color-frame-count + 1 !global;\n}\n\n// @deprecated Use `autosize` and `autofill` instead.\n@mixin text-field {\n  @include text-field-autosize();\n  @include text-field-autofill();\n}\n","@use 'sass:map';\n@use 'sass:meta';\n@use '@angular/cdk';\n@use '../style/layout-common';\n@use '../theming/theming';\n\n// Private sass variables that will be used as reference throughout component stylesheets.\n$default-border-width: 3px;\n$default-border-style: solid;\n$default-border-color: transparent;\n$default-border-radius: 4px;\n\n// Mixin that renders the focus indicator structural styles.\n@mixin structural-styling($prefix) {\n  .#{$prefix}-focus-indicator {\n    position: relative;\n\n    &::before {\n      @include layout-common.fill();\n      box-sizing: border-box;\n      pointer-events: none;\n      display: var(--#{$prefix}-focus-indicator-display, none); // Hide the indicator by default.\n      border: var(\n          --#{$prefix}-focus-indicator-border-width,\n          #{$default-border-width}\n        )\n        var(\n          --#{$prefix}-focus-indicator-border-style,\n          #{$default-border-style}\n        )\n        var(\n          --#{$prefix}-focus-indicator-border-color,\n          #{$default-border-color}\n        );\n      border-radius: var(\n        --#{$prefix}-focus-indicator-border-radius,\n        #{$default-border-radius}\n      );\n    }\n\n    // By default, render the focus indicator when the focus indicator host element takes focus.\n    // Defining a pseudo element's content will cause it to render.\n    &:focus::before {\n      content: '';\n    }\n  }\n\n  // Enable the indicator in high contrast mode.\n  @include cdk.high-contrast(active, off) {\n    @include customize-focus-indicators((display: block), $prefix);\n  }\n}\n\n// Generates CSS variable declarations from a map.\n@mixin _output-variables($map) {\n  @each $key, $value in $map {\n    @if ($value) {\n      --#{$key}: #{$value};\n    }\n  }\n}\n\n// Mixin that dedups CSS variables for the strong-focus-indicators mixin.\n@mixin customize-focus-indicators($config, $prefix) {\n  $border-style: map.get($config, border-style);\n  $border-width: map.get($config, border-width);\n  $border-radius: map.get($config, border-radius);\n  $border-color: map.get($config, border-color);\n  $display: map.get($config, display);\n  $map: (\n    '#{$prefix}-focus-indicator-border-style': $border-style,\n    '#{$prefix}-focus-indicator-border-width': $border-width,\n    '#{$prefix}-focus-indicator-border-radius': $border-radius,\n    '#{$prefix}-focus-indicator-border-color': $border-color,\n    '#{$prefix}-focus-indicator-display': $display,\n  );\n\n  @if (&) {\n    @include _output-variables($map);\n  }\n  @else {\n    // We use `html` here instead of `:root`, because the\n    // latter causes some issues with internal tooling.\n    html {\n      @include _output-variables($map);\n    }\n  }\n}\n\n@mixin strong-focus-indicators($config: ()) {\n  // Default focus indicator config.\n  $default-config: (\n      border-color: black,\n      display: block,\n  );\n\n  // Merge default config with user config.\n  $config: map.merge($default-config, $config);\n\n  @include customize-focus-indicators($config, 'mat');\n}\n\n@mixin mdc-strong-focus-indicators($config: ()) {\n  // Default focus indicator config.\n  $default-config: (\n      border-color: black,\n      display: block,\n  );\n\n  // Merge default config with user config.\n  $config: map.merge($default-config, $config);\n\n  @include customize-focus-indicators($config, 'mat-mdc');\n}\n\n@mixin strong-focus-indicators-color($config-or-theme-or-color) {\n  @if meta.type-of($config-or-theme-or-color) == 'color' {\n    @include customize-focus-indicators((\n        border-color: $config-or-theme-or-color\n    ), 'mat');\n  }\n  @else {\n    $config: theming.get-color-config($config-or-theme-or-color);\n    $border-color: theming.get-color-from-palette(map.get($config, primary));\n    @include customize-focus-indicators((\n        border-color: $border-color\n    ), 'mat');\n  }\n}\n\n@mixin strong-focus-indicators-theme($theme-or-color-config-or-color) {\n  @if meta.type-of($theme-or-color-config-or-color) == 'color' {\n    @include customize-focus-indicators((\n        border-color: $theme-or-color-config-or-color\n    ), 'mat');\n  }\n  @else {\n    $theme: theming.private-legacy-get-theme($theme-or-color-config-or-color);\n    @include theming.private-check-duplicate-theme-styles($theme, 'mat-focus-indicators') {\n      $color: theming.get-color-config($theme);\n      @if $color != null {\n        @include strong-focus-indicators-color($color);\n      }\n    }\n  }\n}\n\n@mixin mdc-strong-focus-indicators-color($config-or-theme-or-color) {\n  @if meta.type-of($config-or-theme-or-color) == 'color' {\n    @include customize-focus-indicators((\n        border-color: $config-or-theme-or-color\n    ), 'mat-mdc');\n  }\n  @else {\n    $config: theming.get-color-config($config-or-theme-or-color);\n    $border-color: theming.get-color-from-palette(map.get($config, primary));\n    @include customize-focus-indicators((\n        border-color: $border-color\n    ), 'mat-mdc');\n  }\n}\n\n@mixin mdc-strong-focus-indicators-theme($theme-or-color-config-or-color) {\n  @if meta.type-of($theme-or-color-config-or-color) == 'color' {\n    @include customize-focus-indicators((\n        border-color: $theme-or-color-config-or-color\n    ), 'mat-mdc');\n  }\n  @else {\n    $theme: theming.private-legacy-get-theme($theme-or-color-config-or-color);\n    @include theming.private-check-duplicate-theme-styles($theme, 'mat-mdc-focus-indicators') {\n      $color: theming.get-color-config($theme);\n      @if $color != null {\n        @include mdc-strong-focus-indicators-color($color);\n      }\n    }\n  }\n}\n","// This mixin ensures an element spans to fill the nearest ancestor with defined positioning.\n@mixin fill {\n  top: 0;\n  left: 0;\n  right: 0;\n  bottom: 0;\n  position: absolute;\n}\n","@use 'sass:map';\n@use 'sass:meta';\n@use '../theming/theming';\n\n// Colors for the ripple elements.\n@mixin color($config-or-theme) {\n  $config: theming.get-color-config($config-or-theme);\n  $foreground: map.get($config, foreground);\n  $foreground-base: map.get($foreground, base);\n  $color-opacity: 0.1;\n\n  .mat-ripple-element {\n    // If the ripple color is resolves to a color *type*, we can use it directly, otherwise\n    // (e.g. it resolves to a CSS variable) we fall back to using the color and setting an opacity.\n    @if (meta.type-of($foreground-base) == color) {\n      background-color: rgba($foreground-base, $color-opacity);\n    }\n    @else {\n      background-color: $foreground-base;\n      opacity: $color-opacity;\n    }\n  }\n}\n\n@mixin theme($theme-or-color-config) {\n  $theme: theming.private-legacy-get-theme($theme-or-color-config);\n  @include theming.private-check-duplicate-theme-styles($theme, 'mat-ripple') {\n    $color: theming.get-color-config($theme);\n    @if $color != null {\n      @include color($color);\n    }\n  }\n}\n","@use 'sass:map';\n@use 'sass:meta';\n\n/// Include content under the current selector (&) or the document root if there is no current\n/// selector.\n/// @param {String} $root [html] The default root selector to use when there is no current selector.\n/// @output The given content under the current selector, or root selector if there is no current\n///     selector.\n/// @content Content to output under the current selector, or root selector if there is no current\n///     selector.\n@mixin current-selector-or-root($root: html) {\n  @at-root #{& or $root} {\n    @content;\n  }\n}\n\n/// A version of the standard `map.merge` function that takes a variable number of arguments.\n/// Each argument is merged into the final result from left to right.\n/// @param {List} $maps The maps to combine with map.merge\n/// @return {Map} The combined result of successively calling map.merge with each parameter.\n@function merge-all($maps...) {\n  $result: ();\n  @each $map in $maps {\n    $result: map.merge($result, $map);\n  }\n  @return $result;\n}\n\n/// A version of the standard `map.deep-merge` function that takes a variable number of arguments.\n/// Each argument is deep-merged into the final result from left to right.\n/// @param {List} $maps The maps to combine with map.deep-merge\n/// @return {Map} The combined result of successively calling map.deep-merge with each parameter.\n@function deep-merge-all($maps...) {\n  $result: ();\n  @each $map in $maps {\n    $result: map.deep-merge($result, $map);\n  }\n  @return $result;\n}\n\n/// Coerces the given value to a list, by converting any non-list value into a single-item list.\n/// This should be used when dealing with user-passed lists of args to avoid confusing errors,\n/// since Sass treats `($x)` as equivalent to `$x`.\n/// @param {Any} $value The value to coerce to a list.\n/// @return {List} The original $value if it was a list, otherwise a single-item list containing\n///     $value.\n@function coerce-to-list($value) {\n  @return if(meta.type-of($value) != 'list', ($value,), $value);\n}\n","//\n// Copyright 2020 Google Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n//\n\n@use 'sass:list';\n@use 'sass:map';\n@use 'sass:meta';\n@use './gss';\n\n/// When true, add an additional property/value declaration before declarations\n/// that use advanced features such as custom properties or CSS functions. This\n/// adds fallback support for older browsers such as IE11 that do not support\n/// these features at the cost of additional CSS. Set this variable to false to\n/// disable generating fallback declarations.\n$enable-fallback-declarations: true !default;\n\n/// Writes a CSS property/value declaration. This mixin is used throughout the\n/// theme package for consistency for dynamically setting CSS property values.\n///\n/// This mixin may optionally take a fallback value. For advanced features such\n/// as custom properties or CSS functions like min and max, a fallback value is\n/// recommended to support older browsers.\n///\n/// @param {String} $property - The CSS property of the declaration.\n/// @param {*} $value - The value of the CSS declaration. The value should be\n///     resolved by other theme functions first (i.e. custom property Maps and\n///     Material theme keys are not supported in this mixin). If the value is\n///     null, no declarations will be emitted.\n/// @param {*} $fallback - An optional fallback value for older browsers. If\n///     provided, a second property/value declaration will be added before the\n///     main property/value declaration.\n/// @param {Map} $gss - An optional Map of GSS annotations to add.\n/// @param {Bool} $important - If true, add `!important` to the declaration.\n@mixin declaration(\n  $property,\n  $value,\n  $fallback-value: null,\n  $gss: (),\n  $important: false\n) {\n  // Normally setting a null value to a property will not emit CSS, so mixins\n  // wouldn't need to check this. However, Sass will throw an error if the\n  // interpolated property is a custom property.\n  @if $value != null {\n    $important-rule: if($important, ' !important', '');\n\n    @if $fallback-value and $enable-fallback-declarations {\n      @include gss.annotate($gss);\n      #{$property}: #{$fallback-value} #{$important-rule};\n\n      // Add @alternate to annotations.\n      $gss: map.merge(\n        $gss,\n        (\n          alternate: true,\n        )\n      );\n    }\n\n    @include gss.annotate($gss);\n    #{$property}: #{$value}#{$important-rule};\n  }\n}\n\n/// Unpacks shorthand values for CSS properties (i.e. lists of 1-3 values).\n/// If a list of 4 values is given, it is returned as-is.\n///\n/// Examples:\n///\n/// unpack-value(4px) => 4px 4px 4px 4px\n/// unpack-value(4px 2px) => 4px 2px 4px 2px\n/// unpack-value(4px 2px 2px) => 4px 2px 2px 2px\n/// unpack-value(4px 2px 0 2px) => 4px 2px 0 2px\n///\n/// @param {Number | Map | List} $value - List of 1 to 4 value numbers.\n/// @return {List} a List of 4 value numbers.\n@function unpack-value($value) {\n  @if meta.type-of($value) == 'map' or list.length($value) == 1 {\n    @return $value $value $value $value;\n  } @else if list.length($value) == 4 {\n    @return $value;\n  } @else if list.length($value) == 3 {\n    @return list.nth($value, 1) list.nth($value, 2) list.nth($value, 3)\n      list.nth($value, 2);\n  } @else if list.length($value) == 2 {\n    @return list.nth($value, 1) list.nth($value, 2) list.nth($value, 1)\n      list.nth($value, 2);\n  }\n\n  @error \"Invalid CSS property value: '#{$value}' is more than 4 values\";\n}\n","@use 'sass:map';\n@use '../tokens/m2/mat/option' as tokens-mat-option;\n@use '../tokens/token-utils';\n@use '../style/sass-utils';\n\n@use '../theming/theming';\n@use '../typography/typography';\n@use '../mdc-helpers/mdc-helpers';\n\n@mixin color($config-or-theme) {\n  $config: theming.get-color-config($config-or-theme);\n\n  @include mdc-helpers.using-mdc-theme($config) {\n    @include sass-utils.current-selector-or-root() {\n      @include token-utils.create-token-values(tokens-mat-option.$prefix,\n        tokens-mat-option.get-color-tokens($config));\n    }\n\n    .mat-accent {\n      @include token-utils.create-token-values(tokens-mat-option.$prefix,\n        tokens-mat-option.private-get-color-palette-color-tokens(map.get($config, accent)));\n    }\n\n    .mat-warn {\n      @include token-utils.create-token-values(tokens-mat-option.$prefix,\n        tokens-mat-option.private-get-color-palette-color-tokens(map.get($config, warn)));\n    }\n  }\n}\n\n@mixin typography($config-or-theme) {\n  $config: typography.private-typography-to-2018-config(\n      theming.get-typography-config($config-or-theme));\n\n  @include sass-utils.current-selector-or-root() {\n    @include token-utils.create-token-values(tokens-mat-option.$prefix,\n      tokens-mat-option.get-typography-tokens($config));\n  }\n}\n\n@mixin density($config-or-theme) {\n  $density-scale: theming.get-density-config($config-or-theme);\n}\n\n@mixin theme($theme-or-color-config) {\n  $theme: theming.private-legacy-get-theme($theme-or-color-config);\n  @include theming.private-check-duplicate-theme-styles($theme, 'mat-option') {\n    $color: theming.get-color-config($theme);\n    $density: theming.get-density-config($theme);\n    $typography: theming.get-typography-config($theme);\n\n    @if $color != null {\n      @include color($color);\n    }\n    @if $density != null {\n      @include density($density);\n    }\n    @if $typography != null {\n      @include typography($typography);\n    }\n  }\n}\n","@use 'sass:map';\n@use '../../theming/theming';\n\n@mixin _psuedo-checkbox-styles-with-color($text-color, $background) {\n  .mat-pseudo-checkbox-checked,\n  .mat-pseudo-checkbox-indeterminate {\n    &.mat-pseudo-checkbox-minimal::after {\n      color: $text-color;\n    }\n\n    // Full (checkbox) appearance inverts colors of text and background.\n    &.mat-pseudo-checkbox-full {\n      &::after {\n        color: $background;\n      }\n\n      background: $text-color;\n    }\n  }\n}\n\n@mixin color($config-or-theme) {\n  $config: theming.get-color-config($config-or-theme);\n  $is-dark-theme: map.get($config, is-dark);\n\n  $primary: theming.get-color-from-palette(map.get($config, primary));\n  $accent: theming.get-color-from-palette(map.get($config, accent));\n  $warn: theming.get-color-from-palette(map.get($config, warn));\n  $background: theming.get-color-from-palette(map.get($config, background), background);\n  $secondary-text: theming.get-color-from-palette(map.get($config, foreground), secondary-text);\n\n  // NOTE(traviskaufman): While the spec calls for translucent blacks/whites for disabled colors,\n  // this does not work well with elements layered on top of one another. To get around this we\n  // blend the colors together based on the base color and the theme background.\n  $white-30pct-opacity-on-dark: #686868;\n  $black-26pct-opacity-on-light: #b0b0b0;\n  $disabled-color: if($is-dark-theme, $white-30pct-opacity-on-dark, $black-26pct-opacity-on-light);\n  $colored-box-selector: '.mat-pseudo-checkbox-checked, .mat-pseudo-checkbox-indeterminate';\n\n  .mat-pseudo-checkbox-full {\n    color: $secondary-text;\n    &.mat-pseudo-checkbox-disabled {\n      color: $disabled-color;\n    }\n  }\n\n  .mat-primary {\n    @include _psuedo-checkbox-styles-with-color($primary, $background);\n  }\n\n  // Default to the accent color. Note that the pseudo checkboxes are meant to inherit the\n  // theme from their parent, rather than implementing their own theming, which is why we\n  // don't attach to the `mat-*` classes. Also note that this needs to be below `.mat-primary`\n  // in order to allow for the color to be overwritten if the checkbox is inside a parent that\n  // has `mat-accent` and is placed inside another parent that has `mat-primary`.\n  @include _psuedo-checkbox-styles-with-color($accent, $background);\n  .mat-accent {\n    @include _psuedo-checkbox-styles-with-color($accent, $background);\n  }\n\n  .mat-warn {\n    @include _psuedo-checkbox-styles-with-color($warn, $background);\n  }\n\n  .mat-pseudo-checkbox-disabled.mat-pseudo-checkbox-checked,\n  .mat-pseudo-checkbox-disabled.mat-pseudo-checkbox-indeterminate {\n    &.mat-pseudo-checkbox-minimal::after {\n      color: $disabled-color;\n    }\n\n    &.mat-pseudo-checkbox-full {\n      background: $disabled-color;\n    }\n  }\n}\n\n@mixin typography($config-or-theme) {}\n\n@mixin _density($config-or-theme) {}\n\n@mixin theme($theme-or-color-config) {\n  $theme: theming.private-legacy-get-theme($theme-or-color-config);\n  @include theming.private-check-duplicate-theme-styles($theme, 'mat-pseudo-checkbox') {\n    $color: theming.get-color-config($theme);\n    $density: theming.get-density-config($theme);\n    $typography: theming.get-typography-config($theme);\n\n    @if $color != null {\n      @include color($color);\n    }\n    @if $density != null {\n      @include _density($density);\n    }\n    @if $typography != null {\n      @include typography($typography);\n    }\n  }\n}\n","@use 'sass:map';\n@use 'theming/theming';\n@use './style/private';\n@use './ripple/ripple-theme';\n@use './option/option-theme';\n@use './option/optgroup-theme';\n@use './selection/pseudo-checkbox/pseudo-checkbox-theme';\n@use './style/elevation';\n@use './typography/typography';\n\n@mixin color($config-or-theme) {\n  $config: theming.get-color-config($config-or-theme);\n\n  @include ripple-theme.color($config);\n  @include option-theme.color($config);\n  @include optgroup-theme.color($config);\n  @include pseudo-checkbox-theme.color($config);\n\n  // Wrapper element that provides the theme background when the user's content isn't\n  // inside of a `mat-sidenav-container`. Note that we need to exclude the ampersand\n  // selector in case the mixin is included at the top level.\n  .mat-app-background#{if(&, ', &.mat-app-background', '')} {\n    $background: map.get($config, background);\n    $foreground: map.get($config, foreground);\n\n    background-color: theming.get-color-from-palette($background, background);\n    color: theming.get-color-from-palette($foreground, text);\n  }\n\n  // Provides external CSS classes for each elevation value. Each CSS class is formatted as\n  // `mat-elevation-z$zValue` where `$zValue` corresponds to the z-space to which the element is\n  // elevated.\n  @for $zValue from 0 through 24 {\n    $selector: elevation.$prefix + $zValue;\n    // We need the `mat-mdc-elevation-specific`, because some MDC mixins\n    // come with elevation baked in and we don't have a way of removing it.\n    .#{$selector}, .mat-mdc-elevation-specific.#{$selector} {\n      @include private.private-theme-elevation($zValue, $config);\n    }\n  }\n\n  // Marker that is used to determine whether the user has added a theme to their page.\n  @at-root {\n    .mat-theme-loaded-marker {\n      display: none;\n    }\n  }\n}\n\n@mixin typography($config-or-theme) {\n  $config: typography.private-typography-to-2018-config(\n          theming.get-typography-config($config-or-theme));\n\n  @include option-theme.typography($config);\n  @include optgroup-theme.typography($config);\n  @include pseudo-checkbox-theme.typography($config);\n  // TODO(mmalerba): add typography mixin for this.\n  // @include ripple-theme.typography($config);\n}\n\n@mixin density($config-or-theme) {\n  $density-scale: theming.get-density-config($config-or-theme);\n\n  @include option-theme.density($density-scale);\n  @include optgroup-theme.density($density-scale);\n  // TODO(mmalerba): add density mixins for these.\n  // @include ripple-theme.density($density-scale);\n  // @include pseudo-checkbox-theme.density($density-scale);\n}\n\n// Mixin that renders all of the core styles that depend on the theme.\n@mixin theme($theme-or-color-config) {\n  $theme: theming.private-legacy-get-theme($theme-or-color-config);\n  // Wrap the sub-theme includes in the duplicate theme styles mixin. This ensures that\n  // there won't be multiple warnings. e.g. if `mat-core-theme` reports a warning, then\n  // the imported themes (such as `mat-ripple-theme`) should not report again.\n  @include theming.private-check-duplicate-theme-styles($theme, 'mat-core') {\n    $color: theming.get-color-config($theme);\n    $density: theming.get-density-config($theme);\n    $typography: theming.get-typography-config($theme);\n\n    @if $color != null {\n      @include color($color);\n    }\n    @if $density != null {\n      @include density($density);\n    }\n    @if $typography != null {\n      @include typography($typography);\n    }\n  }\n}\n","@use 'sass:map';\n@use '../core/theming/theming';\n@use '../core/typography/typography';\n@use '../core/tokens/token-utils';\n@use '../core/tokens/m2/mat/card' as tokens-mat-card;\n@use '../core/tokens/m2/mdc/elevated-card' as tokens-mdc-elevated-card;\n@use '../core/tokens/m2/mdc/outlined-card' as tokens-mdc-outlined-card;\n@use '@material/card/elevated-card-theme' as mdc-elevated-card-theme;\n@use '@material/card/outlined-card-theme' as mdc-outlined-card-theme;\n\n@mixin color($config-or-theme) {\n  $config: theming.get-color-config($config-or-theme);\n  $mdc-elevated-card-color-tokens: token-utils.resolve-elevation(\n      tokens-mdc-elevated-card.get-color-tokens($config),\n      container-elevation,\n      container-shadow-color\n  );\n  $mdc-outlined-card-color-tokens: token-utils.resolve-elevation(\n      tokens-mdc-outlined-card.get-color-tokens($config),\n      container-elevation,\n      container-shadow-color,\n  );\n  $mat-card-color-tokens: tokens-mat-card.get-color-tokens($config);\n\n  // Add values for card tokens.\n  .mat-mdc-card {\n    @include mdc-elevated-card-theme.theme($mdc-elevated-card-color-tokens);\n    @include mdc-outlined-card-theme.theme($mdc-outlined-card-color-tokens);\n    @include token-utils.create-token-values(tokens-mat-card.$prefix, $mat-card-color-tokens);\n  }\n}\n\n@mixin typography($config-or-theme) {\n  $config: typography.private-typography-to-2018-config(\n      theming.get-typography-config($config-or-theme));\n  $mdc-elevated-card-typography-tokens: tokens-mdc-elevated-card.get-typography-tokens($config);\n  $mdc-outlined-card-typography-tokens: tokens-mdc-outlined-card.get-typography-tokens($config);\n  $mat-card-typography-tokens: tokens-mat-card.get-typography-tokens($config);\n\n  // Add values for card tokens.\n  .mat-mdc-card {\n    @include mdc-elevated-card-theme.theme($mdc-elevated-card-typography-tokens);\n    @include mdc-outlined-card-theme.theme($mdc-outlined-card-typography-tokens);\n    @include token-utils.create-token-values(tokens-mat-card.$prefix, $mat-card-typography-tokens);\n  }\n}\n\n@mixin density($config-or-theme) {\n  $density-scale: theming.get-density-config($config-or-theme);\n  $mdc-elevated-card-density-tokens: tokens-mdc-elevated-card.get-density-tokens($density-scale);\n  $mdc-outlined-card-density-tokens: tokens-mdc-outlined-card.get-density-tokens($density-scale);\n  $mat-card-density-tokens: tokens-mat-card.get-density-tokens($density-scale);\n\n  // Add values for card tokens.\n  .mat-mdc-card {\n    @include mdc-elevated-card-theme.theme($mdc-elevated-card-density-tokens);\n    @include mdc-outlined-card-theme.theme($mdc-outlined-card-density-tokens);\n    @include token-utils.create-token-values(tokens-mat-card.$prefix, $mat-card-density-tokens);\n  }\n}\n\n@mixin theme($theme-or-color-config) {\n  $theme: theming.private-legacy-get-theme($theme-or-color-config);\n  @include theming.private-check-duplicate-theme-styles($theme, 'mat-card') {\n    $color: theming.get-color-config($theme);\n    $density: theming.get-density-config($theme);\n    $typography: theming.get-typography-config($theme);\n\n    @if $color != null {\n      @include color($color);\n    }\n    @if $density != null {\n      @include density($density);\n    }\n    @if $typography != null {\n      @include typography($typography);\n    }\n  }\n}\n\n@mixin theme-from-tokens($tokens) {\n  @if ($tokens != ()) {\n    $elevated-card-tokens: map.get($tokens, tokens-mdc-elevated-card.$prefix);\n    // Work around a bug in MDC where the elevation is not resolved to an actual shadow value.\n    $elevated-card-tokens: token-utils.resolve-elevation(\n        $elevated-card-tokens,\n        container-elevation,\n        container-shadow-color\n    );\n    $outlined-card-tokens: map.get($tokens, tokens-mdc-outlined-card.$prefix);\n    // Work around a bug in MDC where the elevation is not resolved to an actual shadow value.\n    $outlined-card-tokens: token-utils.resolve-elevation(\n        $outlined-card-tokens,\n        container-elevation,\n        container-shadow-color\n    );\n    @include mdc-elevated-card-theme.theme($elevated-card-tokens);\n    @include mdc-outlined-card-theme.theme($outlined-card-tokens);\n    @include token-utils.create-token-values(\n        tokens-mat-card.$prefix, map.get($tokens, tokens-mat-card.$prefix));\n  }\n}\n","@use '../core/theming/theming';\n@use '../core/tokens/m2/mdc/linear-progress' as tokens-mdc-linear-progress;\n@use '@material/linear-progress/linear-progress-theme' as mdc-linear-progress-theme;\n@use 'sass:map';\n\n@mixin _palette-styles($config, $palette-name) {\n  $palette-config: map.merge($config, (primary: map.get($config, $palette-name)));\n  $color-tokens: tokens-mdc-linear-progress.get-color-tokens($palette-config);\n\n  // We can't set the `track-color` using `theme`, because it isn't possible for it to use a CSS\n  // variable since MDC's buffer animation works by constructing an SVG string from this color.\n  // We also can't set the `track-color` by creating our own token slot because the track-color\n  // is set in the SVG string in `theme-styles`.\n  @include mdc-linear-progress-theme.theme-styles((\n    // TODO(crisbeto): the buffer color should come from somewhere in MDC, however at the time of\n    // writing, their buffer color is hardcoded to #e6e6e6 which both doesn't account for theming\n    // and doesn't match the Material design spec. For now we approximate the buffer background by\n    // applying an opacity to the color of the bar.\n    track-color: map.get($color-tokens, track-color),\n  ));\n\n  @include mdc-linear-progress-theme.theme($color-tokens);\n}\n\n@mixin color($config-or-theme) {\n  $config: theming.get-color-config($config-or-theme);\n\n  .mat-mdc-progress-bar {\n    @include _palette-styles($config, primary);\n\n    &.mat-accent {\n      @include _palette-styles($config, accent);\n    }\n\n    &.mat-warn {\n      @include _palette-styles($config, warn);\n    }\n  }\n}\n\n@mixin typography($config-or-theme) {}\n\n@mixin density($config-or-theme) {}\n\n@mixin theme($theme-or-color-config) {\n  $theme: theming.private-legacy-get-theme($theme-or-color-config);\n  @include theming.private-check-duplicate-theme-styles($theme, 'mat-progress-bar') {\n    $color: theming.get-color-config($theme);\n    $density: theming.get-density-config($theme);\n    $typography: theming.get-typography-config($theme);\n\n    @if $color != null {\n      @include color($color);\n    }\n    @if $density != null {\n      @include density($density);\n    }\n    @if $typography != null {\n      @include typography($typography);\n    }\n  }\n}\n","//\n// Copyright 2017 Google Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n//\n\n// stylelint-disable selector-class-pattern --\n// Selector '.mdc-*' should only be used in this project.\n\n@use 'sass:map';\n@use 'sass:math';\n@use 'sass:string';\n@use '@material/dom/dom';\n@use '@material/feature-targeting/feature-targeting';\n@use '@material/rtl/rtl';\n@use '@material/theme/custom-properties';\n@use '@material/theme/theme';\n@use '@material/theme/theme-color';\n@use '@material/theme/keys';\n\n$baseline-buffer-color: #e6e6e6 !default;\n$height: 4px;\n\n$custom-property-prefix: 'linear-progress';\n\n// TODO(b/254889918): Support all linear progress tokens.\n$light-theme: (\n  active-indicator-color: theme-color.$primary,\n  active-indicator-height: 4px,\n  track-color: $baseline-buffer-color,\n  track-height: 4px,\n  track-shape: 0px,\n);\n\n@mixin theme($theme) {\n  @include theme.validate-theme($light-theme, $theme);\n  @include keys.declare-custom-properties(\n    $theme,\n    $prefix: $custom-property-prefix\n  );\n}\n\n@mixin theme-styles($theme, $query: feature-targeting.all()) {\n  $feat-structure: feature-targeting.create-target($query, structure);\n  @include theme.validate-theme-styles($light-theme, $theme);\n\n  $theme: keys.create-theme-properties(\n    $theme,\n    $prefix: $custom-property-prefix\n  );\n\n  @include buffering-keyframes(map.get($theme, track-height), $query);\n  @include bar-color(map.get($theme, active-indicator-color), $query);\n  @include buffer-color(map.get($theme, track-color), $query);\n\n  .mdc-linear-progress {\n    @include feature-targeting.targets($feat-structure) {\n      @include theme.property(\n        height,\n        'max(track-height, bar-height)',\n        $replace: (\n          track-height: map.get($theme, track-height),\n          bar-height: map.get($theme, active-indicator-height)\n        )\n      );\n\n      @include dom.ie11-support() {\n        $track-height: map.get($theme, track-height);\n        $track-height: if(\n          custom-properties.is-custom-prop($track-height),\n          custom-properties.get-fallback($track-height),\n          $track-height\n        );\n\n        $bar-height: map.get($theme, active-indicator-height);\n        $bar-height: if(\n          custom-properties.is-custom-prop($bar-height),\n          custom-properties.get-fallback($bar-height),\n          $bar-height\n        );\n\n        @if ($track-height != null) and\n          ($bar-height != null) and\n          (not custom-properties.is-custom-prop-string($track-height)) and\n          (not custom-properties.is-custom-prop-string($bar-height))\n        {\n          @include theme.property(height, math.max($track-height, $bar-height));\n        }\n      }\n    }\n  }\n\n  @include _bar-height(map.get($theme, active-indicator-height), $query);\n  @include _track-height(map.get($theme, track-height), $query);\n  @include _track-shape(map.get($theme, track-shape), $query);\n\n  // TODO(b/155129310): Add styles for 4-color linear progress once this variant\n  // is supported.\n}\n\n@mixin bar-color($color, $query: feature-targeting.all()) {\n  $feat-color: feature-targeting.create-target($query, color);\n\n  .mdc-linear-progress__bar-inner {\n    @include feature-targeting.targets($feat-color) {\n      // Border is used rather than background-color to ensure that the\n      // bar is visible in Windows High Contrast Mode.\n      @include theme.property(border-color, $color);\n    }\n  }\n}\n\n@mixin buffer-color($color, $query: feature-targeting.all()) {\n  // We need to escape the '#' character as \"%23\" for SVG because '#' is a reserved character in URIs.\n  $concrete-color: $color;\n  @if custom-properties.is-custom-prop($color) {\n    $concrete-color: custom-properties.get-fallback($color);\n  }\n  $concrete-color-for-svg: str-replace_(\n    string.unquote('#{$concrete-color}'),\n    '#',\n    '%23'\n  );\n  $feat-color: feature-targeting.create-target($query, color);\n\n  .mdc-linear-progress__buffer-dots {\n    @include feature-targeting.targets($feat-color) {\n      @include theme.property(background-color, $color);\n\n      @media (forced-colors: active) {\n        background-color: ButtonBorder;\n      }\n\n      @include dom.ie11-support() {\n        background-color: transparent;\n        // stylelint-disable function-url-quotes -- SVG data URI\n        // SVG is optimized for data URI (https://codepen.io/tigt/post/optimizing-svgs-in-data-uris)\n        @include theme.property(\n          background-image,\n          url(\"data:image/svg+xml,%3Csvg version='1.1' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink' x='0px' y='0px' enable-background='new 0 0 5 2' xml:space='preserve' viewBox='0 0 5 2' preserveAspectRatio='none slice'%3E%3Ccircle cx='1' cy='1' r='1' fill='concrete-color-for-svg'/%3E%3C/svg%3E\"),\n          $replace: (concrete-color-for-svg: $concrete-color-for-svg)\n        );\n        // stylelint-enable function-url-quotes\n      }\n    }\n  }\n\n  .mdc-linear-progress__buffer-bar {\n    @include feature-targeting.targets($feat-color) {\n      @include theme.property(background-color, $color);\n    }\n  }\n}\n\n/// @deprecated Use Theming API instead.\n@mixin bar-and-track-height($height, $query: feature-targeting.all()) {\n  $feat-structure: feature-targeting.create-target($query, structure);\n\n  .mdc-linear-progress {\n    @include feature-targeting.targets($feat-structure) {\n      @include theme.property(height, $height);\n    }\n  }\n\n  @include _bar-height($height, $query);\n  @include _track-height($height, $query);\n}\n\n@mixin buffering-keyframes($track-height, $query: feature-targeting.all()) {\n  $feat-animation: feature-targeting.create-target($query, animation);\n\n  @include feature-targeting.targets($feat-animation) {\n    @keyframes mdc-linear-progress-buffering {\n      from {\n        // Normally the buffer dots start from the left and overflow to the right.\n        // We rotate by 180deg so that the buffer dots start on the right when\n        // in non-reversed mode and overflow to the left.\n        @include rtl.ignore-next-line();\n        @include theme.property(\n          transform,\n          'rotate(180deg) translateX(calc(track-height * -2.5))',\n          $replace: (track-height: $track-height)\n        );\n      }\n    }\n  }\n}\n\n// Based on https://css-tricks.com/snippets/sass/str-replace-function/\n@function str-replace_($string, $search, $replace) {\n  $index: string.index($string, $search);\n\n  @if $index {\n    $head: string.slice($string, 1, $index - 1);\n    $tail: str-replace_(\n      string.slice($string, $index + string.length($search)),\n      $search,\n      $replace\n    );\n\n    @return $head + $replace + $tail;\n  }\n\n  @return $string;\n}\n\n@mixin _bar-height($height, $query: feature-targeting.all()) {\n  $feat-structure: feature-targeting.create-target($query, structure);\n\n  @include feature-targeting.targets($feat-structure) {\n    .mdc-linear-progress__bar {\n      @include theme.property(height, $height);\n    }\n\n    .mdc-linear-progress__bar-inner {\n      @include theme.property(border-top-width, $height);\n    }\n  }\n}\n\n@mixin _track-height($height, $query: feature-targeting.all()) {\n  $feat-structure: feature-targeting.create-target($query, structure);\n\n  @include feature-targeting.targets($feat-structure) {\n    .mdc-linear-progress__buffer {\n      @include theme.property(height, $height);\n    }\n\n    .mdc-linear-progress__buffer-dots {\n      @include dom.ie11-support() {\n        @include theme.property(\n          background-size,\n          10px height,\n          $replace: (height: $height)\n        );\n      }\n    }\n  }\n}\n\n@mixin _track-shape($shape, $query: feature-targeting.all()) {\n  $feat-structure: feature-targeting.create-target($query, structure);\n\n  @include feature-targeting.targets($feat-structure) {\n    .mdc-linear-progress__buffer {\n      @include theme.property(border-radius, $shape);\n    }\n  }\n}\n","//\n// Copyright 2020 Google Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n//\n\n@use 'sass:list';\n@use 'sass:map';\n@use 'sass:meta';\n\n/// Adds optional GSS annotation comments. Useful for theme mixins where one or\n/// more properties are set indirectly.\n///\n/// Annotations may be provided as a Map of annotations or as named arguments.\n///\n/// @example - scss\n///   @include annotate((noflip: true));\n///   left: 0;\n///\n/// @example - scss\n///   @include annotate($noflip: true);\n///   left: 0;\n///\n/// @example - css\n///   /* @noflip */ /*rtl:ignore*/\n///   left: 0;\n///\n/// @param {Map} $annotations - Map of annotations. Values must be set to `true`\n///     for an annotation to be added.\n@mixin annotate($annotations...) {\n  $keywords: meta.keywords($annotations);\n  @if list.length($annotations) > 0 {\n    $annotations: list.nth($annotations, 1);\n  } @else {\n    $annotations: $keywords;\n  }\n\n  @if (map.get($annotations, alternate) == true) {\n    /* @alternate */\n  }\n\n  // noflip must be the last tag right before the property\n  @if (map.get($annotations, noflip) == true) {\n    /* @noflip */ /*rtl:ignore*/\n  }\n}\n","// Copyright 2020 Google Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\n@use '@material/feature-targeting/feature-targeting';\n@use '@material/rtl/rtl';\n\n///\n/// Emits necessary layout styles to set a transparent border around an element\n/// without interfering with the rest of its component layout. The border is\n/// only visible in high-contrast mode. The target element should be a child of\n/// a relatively positioned top-level element (i.e. a ::before pseudo-element).\n///\n/// @param {number} $border-width - The width of the transparent border.\n/// @param {string} $border-style - The style of the transparent border.\n///\n@mixin transparent-border(\n  $border-width: 1px,\n  $border-style: solid,\n  $query: feature-targeting.all()\n) {\n  $feat-structure: feature-targeting.create-target($query, structure);\n\n  @include feature-targeting.targets($feat-structure) {\n    position: absolute;\n    box-sizing: border-box;\n    width: 100%;\n    height: 100%;\n    top: 0;\n    @include rtl.ignore-next-line();\n    left: 0;\n    border: $border-width $border-style transparent;\n    border-radius: inherit;\n    content: '';\n    pointer-events: none;\n  }\n\n  // Used to satisfy Firefox v94 which does not render transparent borders in HCM (b/206440838).\n  @include forced-colors-mode($exclude-ie11: true) {\n    @include feature-targeting.targets($feat-structure) {\n      border-color: CanvasText;\n    }\n  }\n}\n\n///\n/// Visually hides text content for accessibility. This text should only be\n/// visible to screen reader users.\n/// See https://a11yproject.com/posts/how-to-hide-content/\n///\n@mixin visually-hidden($query: feature-targeting.all()) {\n  $feat-structure: feature-targeting.create-target($query, structure);\n\n  @include feature-targeting.targets($feat-structure) {\n    clip: rect(1px, 1px, 1px, 1px);\n    height: 1px;\n    overflow: hidden;\n    position: absolute;\n    white-space: nowrap; /* added line */\n    width: 1px;\n  }\n}\n\n/// Selects for IE11 support.\n///\n/// @content styles to emit for IE11 support\n@mixin ie11-support {\n  @media all and (-ms-high-contrast: none), (-ms-high-contrast: active) {\n    @content;\n  }\n}\n\n/// Selects for `forced-colors` high contrast mode.\n///\n/// While in `forced-colors` mode, only system colors should be used.\n///\n/// @link https://developer.mozilla.org/en-US/docs/Web/CSS/color_value#system_colors\n/// @link https://developer.mozilla.org/en-US/docs/Web/CSS/@media/forced-colors\n/// @content styles to emit in `forced-colors` mode\n@mixin forced-colors-mode($exclude-ie11: false) {\n  @if $exclude-ie11 {\n    @media screen and (forced-colors: active) {\n      @content;\n    }\n  } @else {\n    @media screen and (forced-colors: active), (-ms-high-contrast: active) {\n      @content;\n    }\n  }\n}\n","@use '@material/tooltip/plain-tooltip-theme' as mdc-plain-tooltip-theme;\n@use '../core/theming/theming';\n@use '../core/typography/typography';\n@use '../core/tokens/m2/mdc/plain-tooltip' as m2-mdc-plain-tooltip;\n\n@mixin color($config-or-theme) {\n  $config: theming.get-color-config($config-or-theme);\n  $mdc-tooltip-color-tokens: m2-mdc-plain-tooltip.get-color-tokens($config);\n\n  // Add values for MDC tooltip tokens.\n  .mat-mdc-tooltip {\n    @include mdc-plain-tooltip-theme.theme($mdc-tooltip-color-tokens);\n  }\n}\n\n@mixin typography($config-or-theme) {\n  $config: typography.private-typography-to-2018-config(\n          theming.get-typography-config($config-or-theme));\n  $mdc-tooltip-typography-tokens: m2-mdc-plain-tooltip.get-typography-tokens($config);\n\n  // Add values for MDC tooltip tokens.\n  .mat-mdc-tooltip {\n    @include mdc-plain-tooltip-theme.theme($mdc-tooltip-typography-tokens);\n  }\n}\n\n@mixin density($config-or-theme) {\n  $density-scale: theming.get-density-config($config-or-theme);\n  $mdc-tooltip-density-tokens: m2-mdc-plain-tooltip.get-density-tokens($density-scale);\n\n  // Add values for MDC tooltip tokens.\n  .mat-mdc-tooltip {\n    @include mdc-plain-tooltip-theme.theme($mdc-tooltip-density-tokens);\n  }\n}\n\n@mixin theme($theme-or-color-config) {\n  $theme: theming.private-legacy-get-theme($theme-or-color-config);\n  @include theming.private-check-duplicate-theme-styles($theme, 'mat-tooltip') {\n    $color: theming.get-color-config($theme);\n    $density: theming.get-density-config($theme);\n    $typography: theming.get-typography-config($theme);\n\n    @if $color != null {\n      @include color($color);\n    }\n    @if $density != null {\n      @include density($density);\n    }\n    @if $typography != null {\n      @include typography($typography);\n    }\n  }\n}\n","@use '@material/textfield' as mdc-textfield;\n@use '@material/theme/theme' as mdc-theme;\n@use '@material/typography' as mdc-typography;\n@use '@material/textfield/variables' as mdc-textfield-variables;\n\n@use '../core/tokens/m2/mat/form-field' as tokens-mat-form-field;\n@use '../core/tokens/token-utils';\n@use './form-field-sizing';\n\n@mixin private-form-field-subscript() {\n  // Wrapper for the hints and error messages.\n  .mat-mdc-form-field-subscript-wrapper {\n    box-sizing: border-box;\n    width: 100%;\n    position: relative;\n  }\n\n  .mat-mdc-form-field-hint-wrapper,\n  .mat-mdc-form-field-error-wrapper {\n    position: absolute;\n    top: 0;\n    left: 0;\n    right: 0;\n    padding: 0 mdc-textfield-variables.$padding-horizontal;\n  }\n\n  .mat-mdc-form-field-subscript-dynamic-size {\n    .mat-mdc-form-field-hint-wrapper,\n    .mat-mdc-form-field-error-wrapper {\n      position: static;\n    }\n  }\n\n  .mat-mdc-form-field-bottom-align::before {\n    content: '';\n    display: inline-block;\n    height: 16px;\n  }\n\n  .mat-mdc-form-field-bottom-align.mat-mdc-form-field-subscript-dynamic-size::before {\n    content: unset;\n  }\n\n  .mat-mdc-form-field-hint-end {\n    order: 1;\n  }\n\n  // Clears the floats on the hints. This is necessary for the hint animation to work.\n  .mat-mdc-form-field-hint-wrapper {\n    display: flex;\n  }\n\n  // Spacer used to make sure start and end hints have enough space between them.\n  .mat-mdc-form-field-hint-spacer {\n    flex: 1 0 form-field-sizing.$mat-form-field-hint-min-space;\n  }\n\n  // Single error message displayed beneath the form field underline.\n  .mat-mdc-form-field-error {\n    display: block;\n  }\n}\n\n@mixin private-form-field-subscript-color() {\n  // MDC does not have built-in error treatment.\n  .mat-mdc-form-field-error {\n    @include mdc-theme.prop(color, mdc-textfield.$error);\n  }\n\n  // The subscript wrapper has a minimum height to avoid that the form-field\n  // jumps when hints or errors are displayed.\n  .mat-mdc-form-field-subscript-wrapper,\n  .mat-mdc-form-field-bottom-align::before {\n    @include token-utils.use-tokens(tokens-mat-form-field.$prefix,\n      tokens-mat-form-field.get-token-slots()) {\n      @include mdc-typography.smooth-font();\n      @include token-utils.create-token-slot(font-family, subscript-text-font);\n      @include token-utils.create-token-slot(line-height, subscript-text-line-height);\n      @include token-utils.create-token-slot(font-size, subscript-text-size);\n      @include token-utils.create-token-slot(letter-spacing, subscript-text-tracking);\n      @include token-utils.create-token-slot(font-weight, subscript-text-weight);\n    }\n  }\n}\n","//\n// Copyright 2017 Google Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n//\n\n// stylelint-disable selector-class-pattern --\n// Selector '.mdc-*' should only be used in this project.\n\n@use 'sass:math';\n@use 'sass:list';\n@use 'sass:map';\n@use 'sass:meta';\n@use 'sass:string';\n@use '@material/feature-targeting/feature-targeting';\n@use '@material/theme/custom-properties';\n@use '@material/theme/keys';\n@use '@material/theme/theme';\n\n/// @deprecated Avoid calling this function directly. Instead, configure the\n/// `$styles-<style>` variable Maps.\n@function set-styles_($base-styles, $scale-styles, $override-styles) {\n  $options: (\n    custom-property-prefix: typography,\n  );\n\n  $base-styles: keys.set-values($base-styles, $options: $options);\n\n  @each $style, $style-props in $scale-styles {\n    @each $base-key in map.keys($base-styles) {\n      // Ignore the return result, it's not needed\n      $unused: keys.add-link(keys.combine($style, $base-key), $base-key);\n    }\n\n    // Merge base properties for all styles.\n    $style-props: map.merge($base-styles, $style-props);\n\n    // Merge overrides onto each style.\n    $style-props: map.merge($style-props, map.get($override-styles, $style));\n\n    // Register keys for this style\n    @each $property, $value in $style-props {\n      $unused: keys.set-value(\n        keys.combine($style, $property),\n        $value,\n        $options: $options\n      );\n    }\n\n    // Override original styles with new styles.\n    $scale-styles: map.merge($scale-styles, (#{$style}: $style-props));\n  }\n\n  @return $scale-styles;\n}\n\n@function get-letter-spacing_($tracking, $font-size) {\n  @return math.div($tracking, $font-size * 16) * 1em;\n}\n\n@function px-to-rem($px) {\n  @if custom-properties.is-custom-prop($px) {\n    @return custom-properties.set-fallback(\n      $px,\n      _px-to-rem(custom-properties.get-fallback($px))\n    );\n  }\n  @return _px-to-rem($px);\n}\n\n@function _px-to-rem($px) {\n  @if $px == null {\n    @return null;\n  }\n  @return math.div($px, 16px) * 1rem;\n}\n\n$font-family: string.unquote('Roboto, sans-serif') !default;\n\n// Override styles\n$styles-headline1: () !default;\n$styles-headline2: () !default;\n$styles-headline3: () !default;\n$styles-headline4: () !default;\n$styles-headline5: () !default;\n$styles-headline6: () !default;\n$styles-subtitle1: () !default;\n$styles-subtitle2: () !default;\n$styles-body1: () !default;\n$styles-body2: () !default;\n$styles-caption: () !default;\n$styles-button: () !default;\n$styles-overline: () !default;\n\n/// @deprecated Do not override this variable. Use the $styles-<style> override\n/// Map variables instead, or $font-family to set the base font family.\n$base: (\n  font-family: $font-family,\n) !default;\n\n$font-weight-values: (\n  thin: 100,\n  light: 300,\n  regular: 400,\n  medium: 500,\n  bold: 700,\n  black: 900,\n) !default;\n\n/// @deprecated Do not override this variable. Use the $styles-<style> override\n/// Map variables instead.\n$styles: set-styles_(\n  $base,\n  (\n    headline1: (\n      font-size: px-to-rem(96px),\n      line-height: px-to-rem(96px),\n      font-weight: map.get($font-weight-values, light),\n      letter-spacing: get-letter-spacing_(-1.5, 6),\n      text-decoration: inherit,\n      text-transform: inherit,\n    ),\n    headline2: (\n      font-size: px-to-rem(60px),\n      line-height: px-to-rem(60px),\n      font-weight: map.get($font-weight-values, light),\n      letter-spacing: get-letter-spacing_(-0.5, 3.75),\n      text-decoration: inherit,\n      text-transform: inherit,\n    ),\n    headline3: (\n      font-size: px-to-rem(48px),\n      line-height: px-to-rem(50px),\n      font-weight: map.get($font-weight-values, regular),\n      letter-spacing: normal,\n      text-decoration: inherit,\n      text-transform: inherit,\n    ),\n    headline4: (\n      font-size: px-to-rem(34px),\n      line-height: px-to-rem(40px),\n      font-weight: map.get($font-weight-values, regular),\n      letter-spacing: get-letter-spacing_(0.25, 2.125),\n      text-decoration: inherit,\n      text-transform: inherit,\n    ),\n    headline5: (\n      font-size: px-to-rem(24px),\n      line-height: px-to-rem(32px),\n      font-weight: map.get($font-weight-values, regular),\n      letter-spacing: normal,\n      text-decoration: inherit,\n      text-transform: inherit,\n    ),\n    headline6: (\n      font-size: px-to-rem(20px),\n      line-height: px-to-rem(32px),\n      font-weight: map.get($font-weight-values, medium),\n      letter-spacing: get-letter-spacing_(0.25, 1.25),\n      text-decoration: inherit,\n      text-transform: inherit,\n    ),\n    subtitle1: (\n      font-size: px-to-rem(16px),\n      line-height: px-to-rem(28px),\n      font-weight: map.get($font-weight-values, regular),\n      letter-spacing: get-letter-spacing_(0.15, 1),\n      text-decoration: inherit,\n      text-transform: inherit,\n    ),\n    subtitle2: (\n      font-size: px-to-rem(14px),\n      line-height: px-to-rem(22px),\n      font-weight: map.get($font-weight-values, medium),\n      letter-spacing: get-letter-spacing_(0.1, 0.875),\n      text-decoration: inherit,\n      text-transform: inherit,\n    ),\n    body1: (\n      font-size: px-to-rem(16px),\n      line-height: px-to-rem(24px),\n      font-weight: map.get($font-weight-values, regular),\n      letter-spacing: get-letter-spacing_(0.5, 1),\n      text-decoration: inherit,\n      text-transform: inherit,\n    ),\n    body2: (\n      font-size: px-to-rem(14px),\n      line-height: px-to-rem(20px),\n      font-weight: map.get($font-weight-values, regular),\n      letter-spacing: get-letter-spacing_(0.25, 0.875),\n      text-decoration: inherit,\n      text-transform: inherit,\n    ),\n    caption: (\n      font-size: px-to-rem(12px),\n      line-height: px-to-rem(20px),\n      font-weight: map.get($font-weight-values, regular),\n      letter-spacing: get-letter-spacing_(0.4, 0.75),\n      text-decoration: inherit,\n      text-transform: inherit,\n    ),\n    button: (\n      font-size: px-to-rem(14px),\n      line-height: px-to-rem(36px),\n      font-weight: map.get($font-weight-values, medium),\n      letter-spacing: get-letter-spacing_(1.25, 0.875),\n      text-decoration: none,\n      text-transform: uppercase,\n    ),\n    overline: (\n      font-size: px-to-rem(12px),\n      line-height: px-to-rem(32px),\n      font-weight: map.get($font-weight-values, medium),\n      letter-spacing: get-letter-spacing_(2, 0.75),\n      text-decoration: none,\n      text-transform: uppercase,\n    ),\n  ),\n  (\n    headline1: $styles-headline1,\n    headline2: $styles-headline2,\n    headline3: $styles-headline3,\n    headline4: $styles-headline4,\n    headline5: $styles-headline5,\n    headline6: $styles-headline6,\n    subtitle1: $styles-subtitle1,\n    subtitle2: $styles-subtitle2,\n    body1: $styles-body1,\n    body2: $styles-body2,\n    caption: $styles-caption,\n    button: $styles-button,\n    overline: $styles-overline,\n  )\n) !default;\n\n// A copy of the styles Map that is used to detect compile-time changes for\n// Angular support.\n$_styles-copy: $styles;\n\n@function is-typography-style($style) {\n  @return map.has-key($styles, $style);\n}\n\n@function get-typography-styles() {\n  @return map.keys($styles);\n}\n\n@mixin core-styles($query: feature-targeting.all()) {\n  .mdc-typography {\n    @include base($query: $query);\n  }\n\n  @each $style in get-typography-styles() {\n    .mdc-typography--#{$style} {\n      @include typography($style, $query: $query);\n    }\n  }\n}\n\n@mixin base($query: feature-targeting.all()) {\n  $feat-typography: feature-targeting.create-target($query, typography);\n\n  @include smooth-font($query: $query);\n  @include feature-targeting.targets($feat-typography) {\n    @include theme.property(font-family, font-family);\n  }\n}\n\n@mixin typography($style, $query: feature-targeting.all(), $exclude-props: ()) {\n  $feat-typography: feature-targeting.create-target($query, typography);\n\n  @if not is-typography-style($style) {\n    @error \"Invalid style specified! #{$style} doesn't exist. Choose one of #{get-typography-styles()}\";\n  }\n\n  @include smooth-font($query: $query);\n  @include feature-targeting.targets($feat-typography) {\n    @each $key in keys.get-keys($style) {\n      // <style>-<property>: headline1-font-size\n      // Slice the string past the first key separator to retrieve the\n      // property name\n      $property: string.slice($key, string.index($key, '-') + 1);\n      @if list.index($exclude-props, $property) == null {\n        $current-global-value: map.get($styles, $style, $property);\n        $configured-global-value: map.get($_styles-copy, $style, $property);\n        @if $current-global-value != $configured-global-value {\n          // A compile time change was made to $mdc-typography-styles. To\n          // support Angular, use this value instead of the key's value.\n          @if $current-global-value {\n            // Only emit if the overridden value exists\n            $custom-prop: keys.create-custom-property($key);\n            $custom-prop: custom-properties.set-fallback(\n              $custom-prop,\n              $current-global-value\n            );\n            @include theme.property($property, $custom-prop);\n          }\n        } @else {\n          // Otherwise, use the key, which may be different from the original\n          // configured global value.\n          @include theme.property($property, $key);\n        }\n      }\n    }\n  }\n}\n\n/// Applies antialiasing via font-smoothing to text.\n@mixin smooth-font($query: feature-targeting.all()) {\n  $feat-typography: feature-targeting.create-target($query, typography);\n\n  @include feature-targeting.targets($feat-typography) {\n    -moz-osx-font-smoothing: grayscale;\n    -webkit-font-smoothing: antialiased;\n  }\n}\n\n// Element must be `display: block` or `display: inline-block` for this to work.\n@mixin overflow-ellipsis($query: feature-targeting.all()) {\n  $feat-structure: feature-targeting.create-target($query, structure);\n\n  @include feature-targeting.targets($feat-structure) {\n    text-overflow: ellipsis;\n    white-space: nowrap;\n    overflow: hidden;\n  }\n}\n\n/// Sets a container's baseline that text content will align to.\n///\n/// If the `$display` is set to a flexbox display, only `$top` baseline may be\n/// set. A separate element must be added as a child of the container with a\n/// `$bottom` baseline.\n///\n/// @param {Number} $top - the distance from the top of the container to the\n///     text's baseline.\n/// @param {Number} $bottom - the distance from the text's baseline to the\n///     bottom of the container.\n/// @param {String} $display - the display type of the container. May be `flex`,\n///     `inline-flex`, `block`, or `inline-block`.\n@mixin baseline(\n  $top: 0,\n  $bottom: 0,\n  $display: block,\n  $query: feature-targeting.all()\n) {\n  $validDisplayTypes: (flex, inline-flex, block, inline-block);\n\n  @if list.index($validDisplayTypes, $display) == null {\n    @error \"mdc-typography: invalid display specified! #{$display} must be one of #{$validDisplayTypes}\";\n  }\n\n  $isFlexbox: $display == 'flex' or $display == 'inline-flex';\n  $feat-structure: feature-targeting.create-target($query, structure);\n\n  @include feature-targeting.targets($feat-structure) {\n    display: $display;\n\n    @if $isFlexbox {\n      align-items: baseline;\n    }\n  }\n\n  @if $top > 0 {\n    @include baseline-top($top, $query: $query);\n  }\n\n  @if $bottom > 0 {\n    @if $isFlexbox {\n      @error \"mdc-typography: invalid baseline with display type. #{$display} cannot specifiy $bottom. Add a separate child element with its own $bottom.\";\n    }\n\n    @include baseline-bottom($bottom, $query: $query);\n  }\n}\n\n/// Sets the baseline of flow text content.\n///\n/// Separate `$top` and `$bottom` baselines may be specified. You should ensure\n/// that the `$top` baseline matches the previous text content's $bottom\n/// baseline to ensure text is positioned appropriately.\n///\n/// See go/css-baseline for reference on how this mixin works.\n///\n/// This is intended for text flow content only (e.g. `<h1>`, `<p>`, `<span>`,\n/// or `<div>` with only text content). Use `baseline()` to set the baseline of\n/// containers that are flexbox or have non-flow content children.\n///\n/// @param {Number} $top - the distance from the top of the container to the\n///     text's baseline.\n/// @param {Number} $bottom - the distance from the text's baseline to the\n///     bottom of the container.\n/// @param {Boolean} $lineHeight - the line-height to use for the text. This\n///     is the distance between baselines of multiple lines of text.\n/// @param {String} $display - the display type of the container. May be `block`\n///     or `inline-block`.\n@mixin text-baseline(\n  $top: 0,\n  $bottom: 0,\n  $display: block,\n  $lineHeight: normal,\n  $query: feature-targeting.all()\n) {\n  $validDisplayTypes: (block, inline-block);\n\n  @if list.index($validDisplayTypes, $display) == null {\n    @error \"mdc-typography: invalid display specified! #{$display} must be one of #{$validDisplayTypes}\";\n  }\n\n  $feat-structure: feature-targeting.create-target($query, structure);\n\n  @include baseline(\n    $display: $display,\n    $top: $top,\n    $bottom: $bottom,\n    $query: $query\n  );\n  @include feature-targeting.targets($feat-structure) {\n    @if $top > 0 {\n      margin-top: 0;\n      /* @alternate */\n      line-height: #{$lineHeight};\n    }\n\n    @if $bottom > 0 {\n      margin-bottom: -1 * $bottom;\n    }\n  }\n}\n\n/// Creates a baseline strut from the top of a container. This mixin is for\n/// advanced users, prefer `baseline()`.\n///\n/// @param {Number} $distance - The distance from the top of the container to\n///     the text's baseline.\n@mixin baseline-top($distance, $query: feature-targeting.all()) {\n  $feat-structure: feature-targeting.create-target($query, structure);\n\n  &::before {\n    @include feature-targeting.targets($feat-structure) {\n      @include baseline-strut_($distance);\n\n      vertical-align: 0;\n    }\n  }\n}\n\n/// Creates a baseline strut from the baseline to the bottom of a container.\n/// This mixin is for advanced users, prefer `baseline()`.\n///\n/// @param {Number} $distance - The distance from the text's baseline to the\n///     bottom of the container.\n@mixin baseline-bottom($distance, $query: feature-targeting.all()) {\n  $feat-structure: feature-targeting.create-target($query, structure);\n\n  &::after {\n    @include feature-targeting.targets($feat-structure) {\n      @include baseline-strut_($distance);\n\n      vertical-align: -1 * $distance;\n    }\n  }\n}\n\n/// Adds an invisible, zero-width prefix to a container's text.\n/// This ensures that the baseline is always where the text would be, instead\n/// of defaulting to the container bottom when text is empty. Do not use this\n/// mixin if the `baseline` mixin is already applied.\n@mixin zero-width-prefix($query: feature-targeting.all()) {\n  $feat-structure: feature-targeting.create-target($query, structure);\n\n  &::before {\n    @include feature-targeting.targets($feat-structure) {\n      content: '\\200b';\n    }\n  }\n}\n\n@mixin baseline-strut_($distance) {\n  display: inline-block;\n  width: 0;\n  height: $distance;\n  content: '';\n}\n\n@function get-font($typography) {\n  @return map.get($styles, $typography, font-family);\n}\n\n@function get-line-height($typography) {\n  @return map.get($styles, $typography, line-height);\n}\n\n@function get-size($typography) {\n  @return map.get($styles, $typography, font-size);\n}\n\n@function get-weight($typography) {\n  @return map.get($styles, $typography, font-weight);\n}\n\n@function get-tracking($typography) {\n  @return map.get($styles, $typography, letter-spacing);\n}\n\n$_typography-theme: (\n  font: null,\n  line-height: null,\n  size: null,\n  weight: null,\n  tracking: null,\n);\n\n@mixin theme-styles($theme) {\n  @include theme.validate-theme-styles($_typography-theme, $theme);\n\n  @include theme.property(font-family, map.get($theme, font));\n  @include theme.property(line-height, map.get($theme, line-height));\n  @include theme.property(font-size, map.get($theme, size));\n  @include theme.property(font-weight, map.get($theme, weight));\n  @include theme.property(letter-spacing, map.get($theme, tracking));\n}\n\n/// Resolves a theme's typography tokens for the given prefix.\n///\n/// @example - scss\n///   // $theme has the following tokens:\n///   // - label-text-font\n///   // - label-text-line-height\n///   // - label-text-size\n///   // - label-text-tracking\n///   // - label-text-weight\n///   $theme: resolve-theme($theme, map.get($resolvers, typography), label-text);\n///\n/// @param {Map} $theme - The theme to resolve tokens for.\n/// @param {Function} $resolver - The typography resolver to use.\n/// @param {String...} $token-prefixes - The prefix(es) of a typography token\n///     set.\n/// @return {Map} The theme with resolved typography tokens.\n@function resolve-theme($theme, $resolver, $token-prefixes...) {\n  @if $resolver == null {\n    @return $theme;\n  }\n\n  @each $token-prefix in $token-prefixes {\n    $typography-theme: meta.call(\n      $resolver,\n      $font: map.get($theme, '#{$token-prefix}-font'),\n      $line-height: map.get($theme, '#{$token-prefix}-line-height'),\n      $size: map.get($theme, '#{$token-prefix}-size'),\n      $tracking: map.get($theme, '#{$token-prefix}-tracking'),\n      $weight: map.get($theme, '#{$token-prefix}-weight')\n    );\n\n    $theme: map.merge(\n      $theme,\n      (\n        '#{$token-prefix}-font': map.get($typography-theme, font),\n        '#{$token-prefix}-line-height': map.get($typography-theme, line-height),\n        '#{$token-prefix}-size': map.get($typography-theme, size),\n        '#{$token-prefix}-tracking': map.get($typography-theme, tracking),\n        '#{$token-prefix}-weight': map.get($typography-theme, weight),\n      )\n    );\n  }\n\n  @return $theme;\n}\n","@use '@material/ripple/functions' as mdc-ripple-functions;\n@use '@material/textfield' as mdc-textfield;\n@use '../core/style/layout-common';\n\n// MDC text-field uses `@material/ripple` in order to show a focus and hover effect for\n// text-fields. This is unnecessary because the ripples bring in a lot of unnecessary\n// styles and runtime code while the actual goal for the text-field is simply showing a\n// focus and hover effect. The ripples will unnecessarily provide CSS selectors and JS\n// runtime code for launching interaction ripples at pointer location. This is not needed\n// for the text-field, so we create our own minimal focus overlay styles. Our focus overlay\n// uses the exact same logic to compute the colors as in the default MDC text-field ripples.\n@mixin private-form-field-focus-overlay() {\n  .mat-mdc-form-field-focus-overlay {\n    @include layout-common.fill;\n    opacity: 0;\n    // Make sure we don't block click on the prefix/suffix.\n    pointer-events: none;\n  }\n}\n\n@mixin private-form-field-focus-overlay-color() {\n  $focus-opacity: mdc-ripple-functions.states-opacity(mdc-textfield.$ink-color, focus);\n  $hover-opacity: mdc-ripple-functions.states-opacity(mdc-textfield.$ink-color, hover);\n\n  .mat-mdc-form-field-focus-overlay {\n    background-color: mdc-textfield.$ink-color;\n  }\n\n  .mat-mdc-form-field:hover .mat-mdc-form-field-focus-overlay {\n    opacity: $hover-opacity;\n  }\n\n  .mat-mdc-form-field.mat-focused .mat-mdc-form-field-focus-overlay {\n    opacity: $focus-opacity;\n  }\n}\n","@use '@material/textfield' as mdc-textfield;\n@use '@material/theme/variables' as mdc-theme-variables;\n@use 'sass:color';\n@use 'sass:meta';\n\n// Mixin that refreshes the MDC text-field theming variables. This mixin should be used when\n// the base MDC theming variables have been explicitly updated, but the component specific\n// theming-based variables are still based on the old MDC base theming variables. The mixin\n// restores the previous values for the variables to avoid unexpected global side effects.\n@mixin private-text-field-refresh-theme-variables() {\n  $_disabled-border: mdc-textfield.$disabled-border;\n  mdc-textfield.$disabled-border:\n    _variable-safe-rgba(mdc-theme-variables.prop-value(on-surface), 0.06);\n  $_bottom-line-hover: mdc-textfield.$bottom-line-hover;\n  mdc-textfield.$bottom-line-hover:\n    _variable-safe-rgba(mdc-theme-variables.prop-value(on-surface), 0.87);\n  $_bottom-line-idle: mdc-textfield.$bottom-line-idle;\n  mdc-textfield.$bottom-line-idle:\n    _variable-safe-rgba(mdc-theme-variables.prop-value(on-surface), 0.42);\n  $_label: mdc-textfield.$label;\n  mdc-textfield.$label: _variable-safe-rgba(mdc-theme-variables.prop-value(on-surface), 0.6);\n  $_ink-color: mdc-textfield.$ink-color;\n  mdc-textfield.$ink-color: _variable-safe-rgba(mdc-theme-variables.prop-value(on-surface), 0.87);\n  $_focused-label-color: mdc-textfield.$focused-label-color;\n  mdc-textfield.$focused-label-color:\n    _variable-safe-rgba(mdc-theme-variables.prop-value(primary), 0.87);\n  $_placeholder-ink-color: mdc-textfield.$placeholder-ink-color;\n  mdc-textfield.$placeholder-ink-color:\n    _variable-safe-rgba(mdc-theme-variables.prop-value(on-surface), 0.6);\n  $_disabled-label-color: mdc-textfield.$disabled-label-color;\n  mdc-textfield.$disabled-label-color:\n    _variable-safe-rgba(mdc-theme-variables.prop-value(on-surface), 0.38);\n  $_disabled-ink-color: mdc-textfield.$disabled-ink-color;\n  mdc-textfield.$disabled-ink-color:\n    _variable-safe-rgba(mdc-theme-variables.prop-value(on-surface), 0.38);\n  $_disabled-placeholder-ink-color: mdc-textfield.$disabled-placeholder-ink-color;\n  mdc-textfield.$disabled-placeholder-ink-color:\n      _variable-safe-rgba(mdc-theme-variables.prop-value(on-surface), 0.38);\n  $_background: mdc-textfield.$background;\n  mdc-textfield.$background: _variable-safe-mix(mdc-theme-variables.prop-value(on-surface),\n    mdc-theme-variables.prop-value(surface), 4%);\n  $_disabled-background: mdc-textfield.$disabled-background;\n  mdc-textfield.$disabled-background: _variable-safe-mix(mdc-theme-variables.prop-value(on-surface),\n    mdc-theme-variables.prop-value(surface), 2%);\n  $_outlined-idle-border: mdc-textfield.$outlined-idle-border;\n  mdc-textfield.$outlined-idle-border:\n    _variable-safe-rgba(mdc-theme-variables.prop-value(on-surface), 0.38);\n  $_outlined-disabled-border: mdc-textfield.$outlined-disabled-border;\n  mdc-textfield.$outlined-disabled-border:\n    _variable-safe-rgba(mdc-theme-variables.prop-value(on-surface), 0.06);\n  $_outlined-hover-border: mdc-textfield.$outlined-hover-border;\n  mdc-textfield.$outlined-hover-border:\n    _variable-safe-rgba(mdc-theme-variables.prop-value(on-surface), 0.87);\n\n  // The content will be generated with the refreshed MDC text-field theming variables.\n  @content;\n\n  // Reset all variables to ensure that this mixin does not cause unexpected side effects.\n  mdc-textfield.$disabled-border: $_disabled-border;\n  mdc-textfield.$bottom-line-hover: $_bottom-line-hover;\n  mdc-textfield.$bottom-line-idle: $_bottom-line-idle;\n  mdc-textfield.$label: $_label;\n  mdc-textfield.$ink-color: $_ink-color;\n  mdc-textfield.$focused-label-color: $_focused-label-color;\n  mdc-textfield.$placeholder-ink-color: $_placeholder-ink-color;\n  mdc-textfield.$disabled-label-color: $_disabled-label-color;\n  mdc-textfield.$disabled-ink-color: $_disabled-ink-color;\n  mdc-textfield.$disabled-placeholder-ink-color: $_disabled-placeholder-ink-color;\n  mdc-textfield.$background: $_background;\n  mdc-textfield.$disabled-background: $_disabled-background;\n  mdc-textfield.$outlined-idle-border: $_outlined-idle-border;\n  mdc-textfield.$outlined-disabled-border: $_outlined-disabled-border;\n  mdc-textfield.$outlined-hover-border: $_outlined-hover-border;\n}\n\n@function _variable-safe-rgba($color, $opacity) {\n  @if (meta.type-of($color) == color) {\n    @return rgba($color, $opacity);\n  }\n  @return $color;\n}\n\n@function _variable-safe-mix($first-color, $second-color, $amount) {\n  @if (meta.type-of($first-color) == color and meta.type-of($second-color) == color) {\n    @return color.mix($first-color, $second-color, $amount);\n  }\n  @return $first-color;\n}\n","@use 'sass:map';\n@use 'sass:math';\n@use '@material/theme/theme-color' as mdc-theme-color;\n@use '../core/theming/palette';\n@use '../core/mdc-helpers/mdc-helpers';\n\n// Width of the Material Design form-field select arrow.\n$mat-form-field-select-arrow-width: 10px;\n// Height of the Material Design form-field select arrow.\n$mat-form-field-select-arrow-height: 5px;\n// Horizontal padding that needs to be applied to the native select in an form-field so\n// that the absolute positioned arrow does not overlap the select content.\n$mat-form-field-select-horizontal-end-padding: $mat-form-field-select-arrow-width + 5px;\n\n// Mixin that creates styles for native select controls in a form-field.\n@mixin private-form-field-native-select() {\n  // Remove the native select down arrow and ensure that the native appearance\n  // does not conflict with the form-field. e.g. Focus indication of the native\n  // select is undesired since we handle focus as part of the form-field.\n  select.mat-mdc-form-field-input-control {\n    -moz-appearance: none;\n    -webkit-appearance: none;\n    background-color: transparent;\n    display: inline-flex;\n    box-sizing: border-box;\n\n    // By default the cursor does not change when hovering over a select. We want to\n    // change this for non-disabled select elements so that it's more obvious that the\n    // control can be clicked.\n    &:not(:disabled) {\n      cursor: pointer;\n    }\n  }\n\n  // Native select elements with the `matInput` directive should have Material Design\n  // styling. This means that we add an arrow to the form-field that is based on the\n  // Material Design specification. We achieve this by adding a pseudo element to the\n  // form-field infix.\n  .mat-mdc-form-field-type-mat-native-select {\n    .mat-mdc-form-field-infix::after {\n      content: '';\n      width: 0;\n      height: 0;\n      border-left: math.div($mat-form-field-select-arrow-width, 2) solid transparent;\n      border-right: math.div($mat-form-field-select-arrow-width, 2) solid transparent;\n      border-top: $mat-form-field-select-arrow-height solid;\n      position: absolute;\n      right: 0;\n      top: 50%;\n      margin-top: -#{math.div($mat-form-field-select-arrow-height, 2)};\n\n      // Make the arrow non-clickable so the user can click on the form control under it.\n      pointer-events: none;\n\n      [dir='rtl'] & {\n        right: auto;\n        left: 0;\n      }\n    }\n\n    // Add padding on the end of the native select so that the content does not\n    // overlap with the Material Design arrow.\n    .mat-mdc-form-field-input-control {\n      padding-right: $mat-form-field-select-horizontal-end-padding;\n      [dir='rtl'] & {\n        padding-right: 0;\n        padding-left: $mat-form-field-select-horizontal-end-padding;\n      }\n    }\n  }\n}\n\n// Gets the color to use for some text that is highlighted while a select has focus.\n@function _get-focused-arrow-color($palette) {\n  @return rgba(mdc-theme-color.prop-value($palette), 0.87);\n}\n\n@mixin private-form-field-native-select-color($config) {\n  @include mdc-helpers.using-mdc-theme($config) {\n    // These values are taken from the MDC select implementation:\n    // https://github.com/material-components/material-components-web/blob/master/packages/mdc-select/_select-theme.scss\n    $dropdown-icon-color: rgba(mdc-theme-color.prop-value(on-surface), 0.54);\n    $disabled-dropdown-icon-color: rgba(mdc-theme-color.prop-value(on-surface), 0.38);\n\n    select.mat-mdc-form-field-input-control:not(.mat-mdc-native-select-inline) {\n      // On dark themes we set the native `select` color to some shade of white,\n      // however the color propagates to all of the `option` elements, which are\n      // always on a white background inside the dropdown, causing them to blend in.\n      // Since we can't change background of the dropdown, we need to explicitly\n      // reset the color of the options to something dark.\n      @if (map.get($config, is-dark)) {\n        option {\n          color: palette.$dark-primary-text;\n        }\n\n        option:disabled {\n          color: palette.$dark-disabled-text;\n        }\n      }\n    }\n\n    .mat-mdc-form-field-type-mat-native-select {\n      .mat-mdc-form-field-infix::after {\n        color: $dropdown-icon-color;\n      }\n\n      &.mat-focused {\n        &.mat-primary {\n          .mat-mdc-form-field-infix::after {\n            color: _get-focused-arrow-color(primary);\n          }\n        }\n\n        &.mat-accent {\n          .mat-mdc-form-field-infix::after {\n            color: _get-focused-arrow-color(secondary);\n          }\n        }\n\n        &.mat-warn {\n          .mat-mdc-form-field-infix::after {\n            color: _get-focused-arrow-color(error);\n          }\n        }\n      }\n\n      &.mat-form-field-disabled {\n        .mat-mdc-form-field-infix::after {\n          color: $disabled-dropdown-icon-color;\n        }\n      }\n    }\n  }\n}\n","@use 'sass:map';\n// Color palettes from the Material Design spec.\n// See https://material.io/design/color/\n//\n// Contrast colors are hard-coded because it is too difficult (probably impossible) to\n// calculate them. These contrast colors are pulled from the public Material Design spec swatches.\n// While the contrast colors in the spec are not prescriptive, we use them for convenience.\n\n\n// @deprecated renamed to $dark-primary-text.\n// @breaking-change 8.0.0\n$black-87-opacity: rgba(black, 0.87);\n// @deprecated renamed to $light-primary-text.\n// @breaking-change 8.0.0\n$white-87-opacity: rgba(white, 0.87);\n// @deprecated use $dark-[secondary-text,disabled-text,dividers,focused] instead.\n// @breaking-change 8.0.0\n$black-12-opacity: rgba(black, 0.12);\n// @deprecated use $light-[secondary-text,disabled-text,dividers,focused] instead.\n// @breaking-change 8.0.0\n$white-12-opacity: rgba(white, 0.12);\n// @deprecated use $dark-[secondary-text,disabled-text,dividers,focused] instead.\n// @breaking-change 8.0.0\n$black-6-opacity: rgba(black, 0.06);\n// @deprecated use $light-[secondary-text,disabled-text,dividers,focused] instead.\n// @breaking-change 8.0.0\n$white-6-opacity: rgba(white, 0.06);\n\n$dark-primary-text: rgba(black, 0.87);\n$dark-secondary-text: rgba(black, 0.54);\n$dark-disabled-text: rgba(black, 0.38);\n$dark-dividers: rgba(black, 0.12);\n$dark-focused: rgba(black, 0.12);\n$light-primary-text: white;\n$light-secondary-text: rgba(white, 0.7);\n$light-disabled-text: rgba(white, 0.5);\n$light-dividers: rgba(white, 0.12);\n$light-focused: rgba(white, 0.12);\n\n$red-palette: (\n  50: #ffebee,\n  100: #ffcdd2,\n  200: #ef9a9a,\n  300: #e57373,\n  400: #ef5350,\n  500: #f44336,\n  600: #e53935,\n  700: #d32f2f,\n  800: #c62828,\n  900: #b71c1c,\n  A100: #ff8a80,\n  A200: #ff5252,\n  A400: #ff1744,\n  A700: #d50000,\n  contrast: (\n    50: $dark-primary-text,\n    100: $dark-primary-text,\n    200: $dark-primary-text,\n    300: $dark-primary-text,\n    400: $dark-primary-text,\n    500: $light-primary-text,\n    600: $light-primary-text,\n    700: $light-primary-text,\n    800: $light-primary-text,\n    900: $light-primary-text,\n    A100: $dark-primary-text,\n    A200: $light-primary-text,\n    A400: $light-primary-text,\n    A700: $light-primary-text,\n  )\n);\n\n$pink-palette: (\n  50: #fce4ec,\n  100: #f8bbd0,\n  200: #f48fb1,\n  300: #f06292,\n  400: #ec407a,\n  500: #e91e63,\n  600: #d81b60,\n  700: #c2185b,\n  800: #ad1457,\n  900: #880e4f,\n  A100: #ff80ab,\n  A200: #ff4081,\n  A400: #f50057,\n  A700: #c51162,\n  contrast: (\n    50: $dark-primary-text,\n    100: $dark-primary-text,\n    200: $dark-primary-text,\n    300: $dark-primary-text,\n    400: $dark-primary-text,\n    500: $light-primary-text,\n    600: $light-primary-text,\n    700: $light-primary-text,\n    800: $light-primary-text,\n    900: $light-primary-text,\n    A100: $dark-primary-text,\n    A200: $light-primary-text,\n    A400: $light-primary-text,\n    A700: $light-primary-text,\n  )\n);\n\n$purple-palette: (\n  50: #f3e5f5,\n  100: #e1bee7,\n  200: #ce93d8,\n  300: #ba68c8,\n  400: #ab47bc,\n  500: #9c27b0,\n  600: #8e24aa,\n  700: #7b1fa2,\n  800: #6a1b9a,\n  900: #4a148c,\n  A100: #ea80fc,\n  A200: #e040fb,\n  A400: #d500f9,\n  A700: #aa00ff,\n  contrast: (\n    50: $dark-primary-text,\n    100: $dark-primary-text,\n    200: $dark-primary-text,\n    300: $light-primary-text,\n    400: $light-primary-text,\n    500: $light-primary-text,\n    600: $light-primary-text,\n    700: $light-primary-text,\n    800: $light-primary-text,\n    900: $light-primary-text,\n    A100: $dark-primary-text,\n    A200: $light-primary-text,\n    A400: $light-primary-text,\n    A700: $light-primary-text,\n  )\n);\n\n$deep-purple-palette: (\n  50: #ede7f6,\n  100: #d1c4e9,\n  200: #b39ddb,\n  300: #9575cd,\n  400: #7e57c2,\n  500: #673ab7,\n  600: #5e35b1,\n  700: #512da8,\n  800: #4527a0,\n  900: #311b92,\n  A100: #b388ff,\n  A200: #7c4dff,\n  A400: #651fff,\n  A700: #6200ea,\n  contrast: (\n    50: $dark-primary-text,\n    100: $dark-primary-text,\n    200: $dark-primary-text,\n    300: $light-primary-text,\n    400: $light-primary-text,\n    500: $light-primary-text,\n    600: $light-primary-text,\n    700: $light-primary-text,\n    800: $light-primary-text,\n    900: $light-primary-text,\n    A100: $dark-primary-text,\n    A200: $light-primary-text,\n    A400: $light-primary-text,\n    A700: $light-primary-text,\n  )\n);\n\n$indigo-palette: (\n  50: #e8eaf6,\n  100: #c5cae9,\n  200: #9fa8da,\n  300: #7986cb,\n  400: #5c6bc0,\n  500: #3f51b5,\n  600: #3949ab,\n  700: #303f9f,\n  800: #283593,\n  900: #1a237e,\n  A100: #8c9eff,\n  A200: #536dfe,\n  A400: #3d5afe,\n  A700: #304ffe,\n  contrast: (\n    50: $dark-primary-text,\n    100: $dark-primary-text,\n    200: $dark-primary-text,\n    300: $light-primary-text,\n    400: $light-primary-text,\n    500: $light-primary-text,\n    600: $light-primary-text,\n    700: $light-primary-text,\n    800: $light-primary-text,\n    900: $light-primary-text,\n    A100: $dark-primary-text,\n    A200: $light-primary-text,\n    A400: $light-primary-text,\n    A700: $light-primary-text,\n  )\n);\n\n$blue-palette: (\n  50: #e3f2fd,\n  100: #bbdefb,\n  200: #90caf9,\n  300: #64b5f6,\n  400: #42a5f5,\n  500: #2196f3,\n  600: #1e88e5,\n  700: #1976d2,\n  800: #1565c0,\n  900: #0d47a1,\n  A100: #82b1ff,\n  A200: #448aff,\n  A400: #2979ff,\n  A700: #2962ff,\n  contrast: (\n    50: $dark-primary-text,\n    100: $dark-primary-text,\n    200: $dark-primary-text,\n    300: $dark-primary-text,\n    400: $dark-primary-text,\n    500: $light-primary-text,\n    600: $light-primary-text,\n    700: $light-primary-text,\n    800: $light-primary-text,\n    900: $light-primary-text,\n    A100: $dark-primary-text,\n    A200: $light-primary-text,\n    A400: $light-primary-text,\n    A700: $light-primary-text,\n  )\n);\n\n$light-blue-palette: (\n  50: #e1f5fe,\n  100: #b3e5fc,\n  200: #81d4fa,\n  300: #4fc3f7,\n  400: #29b6f6,\n  500: #03a9f4,\n  600: #039be5,\n  700: #0288d1,\n  800: #0277bd,\n  900: #01579b,\n  A100: #80d8ff,\n  A200: #40c4ff,\n  A400: #00b0ff,\n  A700: #0091ea,\n  contrast: (\n    50: $dark-primary-text,\n    100: $dark-primary-text,\n    200: $dark-primary-text,\n    300: $dark-primary-text,\n    400: $dark-primary-text,\n    500: $light-primary-text,\n    600: $light-primary-text,\n    700: $light-primary-text,\n    800: $light-primary-text,\n    900: $light-primary-text,\n    A100: $dark-primary-text,\n    A200: $dark-primary-text,\n    A400: $dark-primary-text,\n    A700: $light-primary-text,\n  )\n);\n\n$cyan-palette: (\n  50: #e0f7fa,\n  100: #b2ebf2,\n  200: #80deea,\n  300: #4dd0e1,\n  400: #26c6da,\n  500: #00bcd4,\n  600: #00acc1,\n  700: #0097a7,\n  800: #00838f,\n  900: #006064,\n  A100: #84ffff,\n  A200: #18ffff,\n  A400: #00e5ff,\n  A700: #00b8d4,\n  contrast: (\n    50: $dark-primary-text,\n    100: $dark-primary-text,\n    200: $dark-primary-text,\n    300: $dark-primary-text,\n    400: $dark-primary-text,\n    500: $light-primary-text,\n    600: $light-primary-text,\n    700: $light-primary-text,\n    800: $light-primary-text,\n    900: $light-primary-text,\n    A100: $dark-primary-text,\n    A200: $dark-primary-text,\n    A400: $dark-primary-text,\n    A700: $dark-primary-text,\n  )\n);\n\n$teal-palette: (\n  50: #e0f2f1,\n  100: #b2dfdb,\n  200: #80cbc4,\n  300: #4db6ac,\n  400: #26a69a,\n  500: #009688,\n  600: #00897b,\n  700: #00796b,\n  800: #00695c,\n  900: #004d40,\n  A100: #a7ffeb,\n  A200: #64ffda,\n  A400: #1de9b6,\n  A700: #00bfa5,\n  contrast: (\n    50: $dark-primary-text,\n    100: $dark-primary-text,\n    200: $dark-primary-text,\n    300: $dark-primary-text,\n    400: $dark-primary-text,\n    500: $light-primary-text,\n    600: $light-primary-text,\n    700: $light-primary-text,\n    800: $light-primary-text,\n    900: $light-primary-text,\n    A100: $dark-primary-text,\n    A200: $dark-primary-text,\n    A400: $dark-primary-text,\n    A700: $dark-primary-text,\n  )\n);\n\n$green-palette: (\n  50: #e8f5e9,\n  100: #c8e6c9,\n  200: #a5d6a7,\n  300: #81c784,\n  400: #66bb6a,\n  500: #4caf50,\n  600: #43a047,\n  700: #388e3c,\n  800: #2e7d32,\n  900: #1b5e20,\n  A100: #b9f6ca,\n  A200: #69f0ae,\n  A400: #00e676,\n  A700: #00c853,\n  contrast: (\n    50: $dark-primary-text,\n    100: $dark-primary-text,\n    200: $dark-primary-text,\n    300: $dark-primary-text,\n    400: $dark-primary-text,\n    500: $dark-primary-text,\n    600: $light-primary-text,\n    700: $light-primary-text,\n    800: $light-primary-text,\n    900: $light-primary-text,\n    A100: $dark-primary-text,\n    A200: $dark-primary-text,\n    A400: $dark-primary-text,\n    A700: $dark-primary-text,\n  )\n);\n\n$light-green-palette: (\n  50: #f1f8e9,\n  100: #dcedc8,\n  200: #c5e1a5,\n  300: #aed581,\n  400: #9ccc65,\n  500: #8bc34a,\n  600: #7cb342,\n  700: #689f38,\n  800: #558b2f,\n  900: #33691e,\n  A100: #ccff90,\n  A200: #b2ff59,\n  A400: #76ff03,\n  A700: #64dd17,\n  contrast: (\n    50: $dark-primary-text,\n    100: $dark-primary-text,\n    200: $dark-primary-text,\n    300: $dark-primary-text,\n    400: $dark-primary-text,\n    500: $dark-primary-text,\n    600: $dark-primary-text,\n    700: $light-primary-text,\n    800: $light-primary-text,\n    900: $light-primary-text,\n    A100: $dark-primary-text,\n    A200: $dark-primary-text,\n    A400: $dark-primary-text,\n    A700: $dark-primary-text,\n  )\n);\n\n$lime-palette: (\n  50: #f9fbe7,\n  100: #f0f4c3,\n  200: #e6ee9c,\n  300: #dce775,\n  400: #d4e157,\n  500: #cddc39,\n  600: #c0ca33,\n  700: #afb42b,\n  800: #9e9d24,\n  900: #827717,\n  A100: #f4ff81,\n  A200: #eeff41,\n  A400: #c6ff00,\n  A700: #aeea00,\n  contrast: (\n    50: $dark-primary-text,\n    100: $dark-primary-text,\n    200: $dark-primary-text,\n    300: $dark-primary-text,\n    400: $dark-primary-text,\n    500: $dark-primary-text,\n    600: $dark-primary-text,\n    700: $dark-primary-text,\n    800: $dark-primary-text,\n    900: $light-primary-text,\n    A100: $dark-primary-text,\n    A200: $dark-primary-text,\n    A400: $dark-primary-text,\n    A700: $dark-primary-text,\n  )\n);\n\n$yellow-palette: (\n  50: #fffde7,\n  100: #fff9c4,\n  200: #fff59d,\n  300: #fff176,\n  400: #ffee58,\n  500: #ffeb3b,\n  600: #fdd835,\n  700: #fbc02d,\n  800: #f9a825,\n  900: #f57f17,\n  A100: #ffff8d,\n  A200: #ffff00,\n  A400: #ffea00,\n  A700: #ffd600,\n  contrast: (\n    50: $dark-primary-text,\n    100: $dark-primary-text,\n    200: $dark-primary-text,\n    300: $dark-primary-text,\n    400: $dark-primary-text,\n    500: $dark-primary-text,\n    600: $dark-primary-text,\n    700: $dark-primary-text,\n    800: $dark-primary-text,\n    900: $dark-primary-text,\n    A100: $dark-primary-text,\n    A200: $dark-primary-text,\n    A400: $dark-primary-text,\n    A700: $dark-primary-text,\n  )\n);\n\n$amber-palette: (\n  50: #fff8e1,\n  100: #ffecb3,\n  200: #ffe082,\n  300: #ffd54f,\n  400: #ffca28,\n  500: #ffc107,\n  600: #ffb300,\n  700: #ffa000,\n  800: #ff8f00,\n  900: #ff6f00,\n  A100: #ffe57f,\n  A200: #ffd740,\n  A400: #ffc400,\n  A700: #ffab00,\n  contrast: (\n    50: $dark-primary-text,\n    100: $dark-primary-text,\n    200: $dark-primary-text,\n    300: $dark-primary-text,\n    400: $dark-primary-text,\n    500: $dark-primary-text,\n    600: $dark-primary-text,\n    700: $dark-primary-text,\n    800: $dark-primary-text,\n    900: $dark-primary-text,\n    A100: $dark-primary-text,\n    A200: $dark-primary-text,\n    A400: $dark-primary-text,\n    A700: $dark-primary-text,\n  )\n);\n\n$orange-palette: (\n  50: #fff3e0,\n  100: #ffe0b2,\n  200: #ffcc80,\n  300: #ffb74d,\n  400: #ffa726,\n  500: #ff9800,\n  600: #fb8c00,\n  700: #f57c00,\n  800: #ef6c00,\n  900: #e65100,\n  A100: #ffd180,\n  A200: #ffab40,\n  A400: #ff9100,\n  A700: #ff6d00,\n  contrast: (\n    50: $dark-primary-text,\n    100: $dark-primary-text,\n    200: $dark-primary-text,\n    300: $dark-primary-text,\n    400: $dark-primary-text,\n    500: $dark-primary-text,\n    600: $dark-primary-text,\n    700: $dark-primary-text,\n    800: $light-primary-text,\n    900: $light-primary-text,\n    A100: $dark-primary-text,\n    A200: $dark-primary-text,\n    A400: $dark-primary-text,\n    A700: black,\n  )\n);\n\n$deep-orange-palette: (\n  50: #fbe9e7,\n  100: #ffccbc,\n  200: #ffab91,\n  300: #ff8a65,\n  400: #ff7043,\n  500: #ff5722,\n  600: #f4511e,\n  700: #e64a19,\n  800: #d84315,\n  900: #bf360c,\n  A100: #ff9e80,\n  A200: #ff6e40,\n  A400: #ff3d00,\n  A700: #dd2c00,\n  contrast: (\n    50: $dark-primary-text,\n    100: $dark-primary-text,\n    200: $dark-primary-text,\n    300: $dark-primary-text,\n    400: $dark-primary-text,\n    500: $light-primary-text,\n    600: $light-primary-text,\n    700: $light-primary-text,\n    800: $light-primary-text,\n    900: $light-primary-text,\n    A100: $dark-primary-text,\n    A200: $dark-primary-text,\n    A400: $light-primary-text,\n    A700: $light-primary-text,\n  )\n);\n\n$brown-palette: (\n  50: #efebe9,\n  100: #d7ccc8,\n  200: #bcaaa4,\n  300: #a1887f,\n  400: #8d6e63,\n  500: #795548,\n  600: #6d4c41,\n  700: #5d4037,\n  800: #4e342e,\n  900: #3e2723,\n  A100: #d7ccc8,\n  A200: #bcaaa4,\n  A400: #8d6e63,\n  A700: #5d4037,\n  contrast: (\n    50: $dark-primary-text,\n    100: $dark-primary-text,\n    200: $dark-primary-text,\n    300: $light-primary-text,\n    400: $light-primary-text,\n    500: $light-primary-text,\n    600: $light-primary-text,\n    700: $light-primary-text,\n    800: $light-primary-text,\n    900: $light-primary-text,\n    A100: $dark-primary-text,\n    A200: $dark-primary-text,\n    A400: $light-primary-text,\n    A700: $light-primary-text,\n  )\n);\n\n$grey-palette: (\n  50: #fafafa,\n  100: #f5f5f5,\n  200: #eeeeee,\n  300: #e0e0e0,\n  400: #bdbdbd,\n  500: #9e9e9e,\n  600: #757575,\n  700: #616161,\n  800: #424242,\n  900: #212121,\n  A100: #ffffff,\n  A200: #eeeeee,\n  A400: #bdbdbd,\n  A700: #616161,\n  contrast: (\n    50: $dark-primary-text,\n    100: $dark-primary-text,\n    200: $dark-primary-text,\n    300: $dark-primary-text,\n    400: $dark-primary-text,\n    500: $dark-primary-text,\n    600: $light-primary-text,\n    700: $light-primary-text,\n    800: $light-primary-text,\n    900: $light-primary-text,\n    A100: $dark-primary-text,\n    A200: $dark-primary-text,\n    A400: $dark-primary-text,\n    A700: $light-primary-text,\n  )\n);\n\n// Alias for alternate spelling.\n$gray-palette: $grey-palette;\n\n$blue-grey-palette: (\n  50: #eceff1,\n  100: #cfd8dc,\n  200: #b0bec5,\n  300: #90a4ae,\n  400: #78909c,\n  500: #607d8b,\n  600: #546e7a,\n  700: #455a64,\n  800: #37474f,\n  900: #263238,\n  A100: #cfd8dc,\n  A200: #b0bec5,\n  A400: #78909c,\n  A700: #455a64,\n  contrast: (\n    50: $dark-primary-text,\n    100: $dark-primary-text,\n    200: $dark-primary-text,\n    300: $dark-primary-text,\n    400: $light-primary-text,\n    500: $light-primary-text,\n    600: $light-primary-text,\n    700: $light-primary-text,\n    800: $light-primary-text,\n    900: $light-primary-text,\n    A100: $dark-primary-text,\n    A200: $dark-primary-text,\n    A400: $light-primary-text,\n    A700: $light-primary-text,\n  )\n);\n\n// Alias for alternate spelling.\n$blue-gray-palette: $blue-grey-palette;\n\n\n// Background palette for light themes.\n$light-theme-background-palette: (\n  status-bar: map.get($grey-palette, 300),\n  app-bar:    map.get($grey-palette, 100),\n  background: map.get($grey-palette, 50),\n  hover:      rgba(black, 0.04), // TODO(kara): check style with Material Design UX\n  card:       white,\n  dialog:     white,\n  disabled-button: rgba(black, 0.12),\n  raised-button: white,\n  focused-button: $dark-focused,\n  selected-button: map.get($grey-palette, 300),\n  selected-disabled-button: map.get($grey-palette, 400),\n  disabled-button-toggle: map.get($grey-palette, 200),\n  unselected-chip: map.get($grey-palette, 300),\n  disabled-list-option: map.get($grey-palette, 200),\n  tooltip: map.get($grey-palette, 700),\n);\n\n// Background palette for dark themes.\n$dark-theme-background-palette: (\n  status-bar: black,\n  app-bar:    map.get($grey-palette, 900),\n  background: #303030,\n  hover:      rgba(white, 0.04), // TODO(kara): check style with Material Design UX\n  card:       map.get($grey-palette, 800),\n  dialog:     map.get($grey-palette, 800),\n  disabled-button: rgba(white, 0.12),\n  raised-button: map.get($grey-palette, 800),\n  focused-button: $light-focused,\n  selected-button: map.get($grey-palette, 900),\n  selected-disabled-button: map.get($grey-palette, 800),\n  disabled-button-toggle: black,\n  unselected-chip: map.get($grey-palette, 700),\n  disabled-list-option: rgba(white, 0.12),\n  tooltip: map.get($grey-palette, 700),\n);\n\n// Foreground palette for light themes.\n$light-theme-foreground-palette: (\n  base:              black,\n  divider:           $dark-dividers,\n  dividers:          $dark-dividers,\n  disabled:          $dark-disabled-text,\n  disabled-button:   rgba(black, 0.26),\n  disabled-text:     $dark-disabled-text,\n  elevation:         black,\n  hint-text:         $dark-disabled-text,\n  secondary-text:    $dark-secondary-text,\n  icon:              rgba(black, 0.54),\n  icons:             rgba(black, 0.54),\n  text:              rgba(black, 0.87),\n  slider-min:        rgba(black, 0.87),\n  slider-off:        rgba(black, 0.26),\n  slider-off-active: rgba(black, 0.38),\n);\n\n// Foreground palette for dark themes.\n$dark-theme-foreground-palette: (\n  base:              white,\n  divider:           $light-dividers,\n  dividers:          $light-dividers,\n  disabled:          $light-disabled-text,\n  disabled-button:   rgba(white, 0.3),\n  disabled-text:     $light-disabled-text,\n  elevation:         black,\n  hint-text:         $light-disabled-text,\n  secondary-text:    $light-secondary-text,\n  icon:              white,\n  icons:             white,\n  text:              white,\n  slider-min:        white,\n  slider-off:        rgba(white, 0.3),\n  slider-off-active: rgba(white, 0.3),\n);\n","@use '@material/textfield/filled-text-field-theme' as mdc-filled-text-field-theme;\n@use '@material/textfield/outlined-text-field-theme' as mdc-outlined-text-field-theme;\n\n@use '../core/tokens/m2/mdc/filled-text-field' as tokens-mdc-filled-text-field;\n@use '../core/tokens/m2/mdc/outlined-text-field' as tokens-mdc-outlined-text-field;\n@use '../core/tokens/m2/mat/form-field' as tokens-mat-form-field;\n@use '../core/theming/theming';\n@use '../core/typography/typography';\n@use '../core/mdc-helpers/mdc-helpers';\n@use '../core/style/sass-utils';\n@use '../core/tokens/token-utils';\n@use './form-field-density';\n@use './form-field-subscript';\n@use './form-field-focus-overlay';\n@use './form-field-native-select';\n@use './mdc-text-field-theme-variable-refresh';\n\n@mixin color($config-or-theme) {\n  $config: theming.get-color-config($config-or-theme);\n\n  @include sass-utils.current-selector-or-root() {\n    @include mdc-filled-text-field-theme.theme(\n      tokens-mdc-filled-text-field.get-color-tokens($config));\n    @include mdc-outlined-text-field-theme.theme(\n      tokens-mdc-outlined-text-field.get-color-tokens($config));\n    @include token-utils.create-token-values(tokens-mat-form-field.$prefix,\n      tokens-mat-form-field.get-color-tokens($config));\n  }\n\n  @include mdc-helpers.using-mdc-theme($config) {\n    @include mdc-text-field-theme-variable-refresh.private-text-field-refresh-theme-variables() {\n      @include form-field-subscript.private-form-field-subscript-color();\n      @include form-field-focus-overlay.private-form-field-focus-overlay-color();\n      @include form-field-native-select.private-form-field-native-select-color($config);\n\n      .mat-mdc-form-field.mat-accent {\n        @include mdc-filled-text-field-theme.theme(\n          tokens-mdc-filled-text-field.private-get-color-palette-color-tokens($config, accent));\n        @include mdc-outlined-text-field-theme.theme(\n          tokens-mdc-outlined-text-field.private-get-color-palette-color-tokens($config, accent));\n      }\n\n      .mat-mdc-form-field.mat-warn {\n        @include mdc-filled-text-field-theme.theme(\n          tokens-mdc-filled-text-field.private-get-color-palette-color-tokens($config, warn));\n        @include mdc-outlined-text-field-theme.theme(\n          tokens-mdc-outlined-text-field.private-get-color-palette-color-tokens($config, warn));\n      }\n\n      // This fixes an issue where the notch appears to be thicker than the rest of the outline when\n      // zoomed in on Chrome. The border inconsistency seems to be some kind of rendering artifact\n      // that arises from a combination of the fact that the notch contains text, while the leading\n      // and trailing outline do not, combined with the fact that the border is semi-transparent.\n      // Experimentally, I discovered that adding a transparent left border fixes the inconsistency.\n      // Note: class name is repeated to achieve sufficient specificity over the various MDC states.\n      // (hover, focus, etc.)\n      // TODO(mmalerba): port this fix into MDC\n      // TODO(crisbeto): move this into the structural styles\n      .mat-mdc-form-field.mat-mdc-form-field.mat-mdc-form-field.mat-mdc-form-field {\n        &.mat-mdc-form-field.mat-mdc-form-field .mdc-notched-outline__notch {\n          border-left: 1px solid transparent;\n        }\n      }\n\n      [dir='rtl'] {\n        .mat-mdc-form-field.mat-mdc-form-field.mat-mdc-form-field.mat-mdc-form-field {\n          &.mat-mdc-form-field.mat-mdc-form-field .mdc-notched-outline__notch {\n            border-left: none;\n            border-right: 1px solid transparent;\n          }\n        }\n      }\n    }\n  }\n}\n\n@mixin typography($config-or-theme) {\n  $config: typography.private-typography-to-2018-config(\n      theming.get-typography-config($config-or-theme));\n\n  @include sass-utils.current-selector-or-root() {\n    @include mdc-filled-text-field-theme.theme(\n      tokens-mdc-filled-text-field.get-typography-tokens($config));\n    @include mdc-outlined-text-field-theme.theme(\n      tokens-mdc-outlined-text-field.get-typography-tokens($config));\n    @include token-utils.create-token-values(tokens-mat-form-field.$prefix,\n      tokens-mat-form-field.get-typography-tokens($config));\n  }\n}\n\n@mixin density($config-or-theme) {\n  $density-scale: theming.get-density-config($config-or-theme);\n  @include form-field-density.private-form-field-density($density-scale);\n}\n\n@mixin theme($theme-or-color-config) {\n  $theme: theming.private-legacy-get-theme($theme-or-color-config);\n  @include theming.private-check-duplicate-theme-styles($theme, 'mat-form-field') {\n    $color: theming.get-color-config($theme);\n    $density: theming.get-density-config($theme);\n    $typography: theming.get-typography-config($theme);\n\n    @if $color != null {\n      @include color($color);\n    }\n    @if $density != null {\n      @include density($density);\n    }\n    @if $typography != null {\n      @include typography($typography);\n    }\n  }\n}\n","@use 'sass:map';\n@use 'sass:math';\n@use '@material/density' as mdc-density;\n@use '@material/textfield' as mdc-textfield;\n@use '../core/theming/theming';\n\n@use './form-field-sizing';\n\n// Mixin that sets the vertical spacing for the infix container of filled form fields.\n// We need to apply spacing to the infix container because we removed the input padding\n// provided by MDC in order to support arbitrary form-field controls.\n@mixin _infix-vertical-spacing-filled($with-label-padding, $no-label-padding) {\n  .mat-mdc-text-field-wrapper:not(.mdc-text-field--outlined) .mat-mdc-form-field-infix {\n    padding-top: map.get($with-label-padding, top);\n    padding-bottom: map.get($with-label-padding, bottom);\n  }\n\n  .mdc-text-field--no-label:not(.mdc-text-field--outlined):not(.mdc-text-field--textarea)\n  .mat-mdc-form-field-infix {\n    padding-top: map.get($no-label-padding, top);\n    padding-bottom: map.get($no-label-padding, bottom);\n  }\n}\n\n// Mixin that sets the vertical spacing for the infix container of outlined form fields.\n// We need to apply spacing to the infix container because we removed the input padding\n// provided by MDC in order to support arbitrary form-field controls.\n@mixin _infix-vertical-spacing-outlined($padding) {\n  .mat-mdc-text-field-wrapper.mdc-text-field--outlined .mat-mdc-form-field-infix {\n    padding-top: map.get($padding, top);\n    padding-bottom: map.get($padding, bottom);\n  }\n}\n\n// Mixin that includes the density styles for form fields. MDC provides their own density\n// styles for MDC text-field which we cannot use. MDC relies on input elements to stretch\n// vertically when the height is reduced as per density scale. This doesn't work for our\n// form field since we support custom form field controls without a fixed height. Instead, we\n// provide spacing that makes arbitrary controls align as specified in the Material Design\n// specification. In order to support density, we need to adjust the vertical spacing to be\n// based on the density scale.\n@mixin private-form-field-density($config-or-theme) {\n  $density-scale: theming.get-density-config($config-or-theme);\n  // Height of the form field that is based on the current density scale.\n  $height: mdc-density.prop-value(\n    $density-config: mdc-textfield.$density-config,\n    $density-scale: $density-scale,\n    $property-name: height,\n  );\n\n  // Whether floating labels for filled form fields should be hidden. MDC hides the label in\n  // their density styles when the height decreases too much. We match their density styles.\n  $hide-filled-floating-label: $height < mdc-textfield.$minimum-height-for-filled-label;\n  // We computed the desired height of the form-field using the density configuration. The\n  // spec only describes vertical spacing/alignment in non-dense mode. This means that we\n  // cannot update the spacing to explicit numbers based on the density scale. Instead, we\n  // determine the height reduction and equally subtract it from the default `top` and `bottom`\n  // padding that is provided by the Material Design specification.\n  $vertical-deduction: math.div(mdc-textfield.$height - $height, 2);\n  // Map that describes the padding for form-fields with label.\n  $with-label-padding: (\n    top: form-field-sizing.$mat-form-field-with-label-input-padding-top - $vertical-deduction,\n    bottom: form-field-sizing.$mat-form-field-with-label-input-padding-bottom - $vertical-deduction,\n  );\n  // Map that describes the padding for form-fields without label.\n  $no-label-padding: (\n    top: form-field-sizing.$mat-form-field-no-label-padding-top - $vertical-deduction,\n    bottom: form-field-sizing.$mat-form-field-no-label-padding-bottom - $vertical-deduction,\n  );\n\n  // We add a minimum height to the infix container in order to ensure that custom controls have\n  // the same default vertical space as text-field inputs (with respect to the vertical padding).\n  .mat-mdc-form-field-infix {\n    min-height: $height;\n  }\n\n  // By default, MDC aligns the label using percentage. This will be overwritten based\n  // on whether a textarea is used. This is not possible in our implementation of the\n  // form-field because we do not know what type of form-field control is set up. Hence\n  // we always use a fixed position for the label. This does not have any implications.\n  .mat-mdc-text-field-wrapper .mat-mdc-form-field-flex .mat-mdc-floating-label {\n    top: math.div($height, 2);\n  }\n\n  // For the outline appearance, we re-create the active floating label transform. This is\n  // necessary because the transform for docked floating labels can be updated to account for\n  // the width of prefix container.\n  .mat-mdc-text-field-wrapper.mdc-text-field--outlined .mdc-notched-outline--upgraded\n  .mdc-floating-label--float-above {\n    --mat-mdc-form-field-label-transform: translateY(\n            -#{mdc-textfield.get-outlined-label-position-y($height)})\n            scale(var(--mat-mdc-form-field-floating-label-scale, 0.75));\n    transform: var(--mat-mdc-form-field-label-transform);\n  }\n\n  // Add vertical spacing to the infix to ensure that outlined form fields have their controls\n  // aligned as if there is no label. This is done similarly in MDC and is specified in the\n  // Material Design specification. Outline form fields position the control as if there is no\n  // label. This is because the label overflows the form-field and doesn't need space at the top.\n  @include _infix-vertical-spacing-outlined($no-label-padding);\n\n  // MDC hides labels for filled form fields when the form field height decreases. We match\n  // this behavior in our custom density styles.\n  @if $hide-filled-floating-label {\n    // Update the spacing for filled form fields to account for the hidden floating label.\n    @include _infix-vertical-spacing-filled(\n          $no-label-padding, $no-label-padding);\n    .mat-mdc-text-field-wrapper:not(.mdc-text-field--outlined) .mat-mdc-floating-label {\n        display: none;\n    }\n  }\n  @else {\n    // By default, filled form fields align their controls differently based on whether there\n    // is a label or not. MDC does this too, but we cannot rely on their styles as we support\n    // arbitrary form field controls and MDC only applies their spacing to the `<input>` elements.\n    @include _infix-vertical-spacing-filled(\n          $with-label-padding, $no-label-padding);\n  }\n}\n","@use 'sass:map';\n@use '@material/density' as mdc-density;\n@use '@material/textfield' as mdc-textfield;\n@use '../core/tokens/m2/mat/select' as tokens-mat-select;\n@use '../core/tokens/token-utils';\n@use '../core/style/sass-utils';\n\n@use '../core/theming/theming';\n@use '../core/typography/typography';\n\n@mixin color($config-or-theme) {\n  $config: theming.get-color-config($config-or-theme);\n\n  @include sass-utils.current-selector-or-root() {\n    @include token-utils.create-token-values(tokens-mat-select.$prefix,\n      tokens-mat-select.get-color-tokens($config));\n\n    .mat-mdc-form-field.mat-accent {\n      $accent: map.get($config, accent);\n      $accent-config: map.merge($config, (primary: $accent));\n      @include token-utils.create-token-values(tokens-mat-select.$prefix,\n        tokens-mat-select.get-color-tokens($accent-config));\n    }\n\n    .mat-mdc-form-field.mat-warn {\n      $warn: map.get($config, warn);\n      $warn-config: map.merge($config, (primary: $warn));\n      @include token-utils.create-token-values(tokens-mat-select.$prefix,\n        tokens-mat-select.get-color-tokens($warn-config));\n    }\n  }\n}\n\n@mixin typography($config-or-theme) {\n  $config: typography.private-typography-to-2018-config(\n      theming.get-typography-config($config-or-theme));\n\n  @include sass-utils.current-selector-or-root() {\n    @include token-utils.create-token-values(tokens-mat-select.$prefix,\n      tokens-mat-select.get-typography-tokens($config));\n  }\n}\n\n@mixin density($config-or-theme) {\n  $density-scale: theming.get-density-config($config-or-theme);\n\n  // Density is clamped at -5 here, because MDC's form field throws an error for anything lower.\n  $form-field-height: mdc-density.prop-value(\n    $density-config: mdc-textfield.$density-config,\n    $density-scale: theming.clamp-density($density-scale, -5),\n    $property-name: height,\n  );\n\n  // On lower densities the filled form field hides its label which causes the label to\n  // be misaligned. Remove the additional offset that was added because of the label.\n  @if ($form-field-height < mdc-textfield.$minimum-height-for-filled-label) {\n    .mat-form-field-appearance-fill .mat-mdc-select-arrow-wrapper {\n      transform: none;\n    }\n  }\n\n  @include sass-utils.current-selector-or-root() {\n    @include token-utils.create-token-values(tokens-mat-select.$prefix,\n      tokens-mat-select.get-density-tokens($density-scale));\n  }\n}\n\n@mixin theme($theme-or-color-config) {\n  $theme: theming.private-legacy-get-theme($theme-or-color-config);\n  @include theming.private-check-duplicate-theme-styles($theme, 'mat-select') {\n    $color: theming.get-color-config($theme);\n    $density: theming.get-density-config($theme);\n    $typography: theming.get-typography-config($theme);\n\n    @if $color != null {\n      @include color($color);\n    }\n    @if $density != null {\n      @include density($density);\n    }\n    @if $typography != null {\n      @include typography($typography);\n    }\n  }\n}\n","@use '@material/dialog/dialog-theme' as mdc-dialog-theme;\n@use '../core/tokens/m2/mdc/dialog' as tokens-mdc-dialog;\n@use '../core/theming/theming';\n@use '../core/typography/typography';\n\n@mixin color($config-or-theme) {\n  $config: theming.get-color-config($config-or-theme);\n\n  .mat-mdc-dialog-container {\n    @include mdc-dialog-theme.theme(tokens-mdc-dialog.get-color-tokens($config));\n  }\n}\n\n@mixin typography($config-or-theme) {\n  $config: typography.private-typography-to-2018-config(\n      theming.get-typography-config($config-or-theme));\n\n  .mat-mdc-dialog-container {\n    @include mdc-dialog-theme.theme(tokens-mdc-dialog.get-typography-tokens($config));\n  }\n}\n\n@mixin density($config-or-theme) {\n  $density-scale: theming.get-density-config($config-or-theme);\n}\n\n@mixin theme($theme-or-color-config) {\n  $theme: theming.private-legacy-get-theme($theme-or-color-config);\n  @include theming.private-check-duplicate-theme-styles($theme, 'mat-dialog') {\n    $color: theming.get-color-config($theme);\n    $density: theming.get-density-config($theme);\n    $typography: theming.get-typography-config($theme);\n\n    @if $color != null {\n      @include color($color);\n    }\n    @if $density != null {\n      @include density($density);\n    }\n    @if $typography != null {\n      @include typography($typography);\n    }\n  }\n}\n","@use 'sass:color';\n@use 'sass:map';\n@use 'sass:meta';\n@use '@material/chips/chip-theme' as mdc-chip-theme;\n@use '../core/tokens/m2/mdc/chip' as tokens-mdc-chip;\n@use '../core/theming/palette';\n@use '../core/theming/theming';\n@use '../core/typography/typography';\n@use '../core/mdc-helpers/mdc-helpers';\n\n@function _get-default-palette($config) {\n  $is-dark: map.get($config, is-dark);\n  $grey-50: map.get(palette.$grey-palette, 50);\n  $grey-900: map.get(palette.$grey-palette, 900);\n  $default-foreground: if($is-dark, $grey-50, $grey-900);\n\n  $surface: map.get(map.get($config, background), card);\n  $on-surface: if(\n    mdc-helpers.variable-safe-contrast-tone($surface, $is-dark) == 'dark',\n    #000,\n    #fff\n  );\n  $default-background: if(\n    meta.type-of($on-surface) == color and meta.type-of($surface) == color,\n    color.mix($on-surface, $surface, 12%),\n    $on-surface\n  );\n\n  @return (default: $default-background, default-contrast: $default-foreground);\n}\n\n@mixin color($config-or-theme) {\n  $config: theming.get-color-config($config-or-theme);\n\n  .mat-mdc-standard-chip {\n    $default-palette: _get-default-palette($config);\n    $default-config: map.merge($config, (primary: $default-palette));\n    $default-color-tokens: tokens-mdc-chip.get-color-tokens($default-config);\n    @include mdc-chip-theme.theme($default-color-tokens);\n\n    &.mat-mdc-chip-selected,\n    &.mat-mdc-chip-highlighted {\n      &.mat-primary {\n        $primary-color-tokens: tokens-mdc-chip.get-color-tokens($config);\n        @include mdc-chip-theme.theme($primary-color-tokens);\n      }\n\n      &.mat-accent {\n        $accent-config: map.merge($config, (primary: map.get($config, accent)));\n        $accent-color-tokens: tokens-mdc-chip.get-color-tokens($accent-config);\n        @include mdc-chip-theme.theme($accent-color-tokens);\n      }\n\n      &.mat-warn {\n        $warn-config: map.merge($config, (primary: map.get($config, warn)));\n        $warn-color-tokens: tokens-mdc-chip.get-color-tokens($warn-config);\n        @include mdc-chip-theme.theme($warn-color-tokens);\n      }\n    }\n  }\n}\n\n@mixin typography($config-or-theme) {\n  $config: typography.private-typography-to-2018-config(\n    theming.get-typography-config($config-or-theme)\n  );\n  $typography-tokens: tokens-mdc-chip.get-typography-tokens($config);\n\n  .mat-mdc-standard-chip {\n    @include mdc-chip-theme.theme($typography-tokens);\n  }\n}\n\n@mixin density($config-or-theme) {\n  $density-scale: theming.get-density-config($config-or-theme);\n  $density-tokens: tokens-mdc-chip.get-density-tokens($density-scale);\n  .mat-mdc-chip.mat-mdc-standard-chip {\n    @include mdc-chip-theme.theme($density-tokens);\n  }\n}\n\n@mixin theme($theme-or-color-config) {\n  $theme: theming.private-legacy-get-theme($theme-or-color-config);\n  @include theming.private-check-duplicate-theme-styles($theme, 'mat-chips') {\n    $color: theming.get-color-config($theme);\n    $density: theming.get-density-config($theme);\n    $typography: theming.get-typography-config($theme);\n\n    @if $color != null {\n      @include color($color);\n    }\n    @if $density != null {\n      @include density($density);\n    }\n    @if $typography != null {\n      @include typography($typography);\n    }\n  }\n}\n","@use 'sass:map';\n@use '@material/switch/switch-theme' as mdc-switch-theme;\n@use '@material/form-field' as mdc-form-field;\n@use '../core/theming/theming';\n@use '../core/mdc-helpers/mdc-helpers';\n@use '../core/typography/typography';\n@use '../core/tokens/m2/mdc/switch' as m2-mdc-switch;\n@use '../core/tokens/m2/mat/slide-toggle' as m2-mat-slide-toggle;\n@use '../core/tokens/token-utils';\n\n@mixin color($config-or-theme) {\n  $config: theming.get-color-config($config-or-theme);\n  $primary: map.get($config, primary);\n  $accent: map.get($config, accent);\n  $warn: map.get($config, warn);\n  $is-dark: map.get($config, is-dark);\n  $foreground: map.get($config, foreground);\n\n  $mdc-switch-color-tokens: m2-mdc-switch.get-color-tokens($config);\n\n  @include mdc-helpers.using-mdc-theme($config) {\n    // Add values for MDC slide toggles tokens\n    .mat-mdc-slide-toggle {\n      @include mdc-form-field.core-styles($query: mdc-helpers.$mdc-theme-styles-query);\n      @include mdc-switch-theme.theme($mdc-switch-color-tokens);\n\n      // MDC should set the disabled color on the label, but doesn't, so we do it here instead.\n      .mdc-switch--disabled + label {\n        color: theming.get-color-from-palette($foreground, disabled-text);\n      }\n\n      // Change the color palette related tokens to accent or warn if applicable\n      &.mat-accent {\n        @include mdc-switch-theme.theme(m2-mdc-switch.private-get-color-palette-color-tokens(\n          map.get($config, accent),\n          map.get($config, is-dark)\n        ));\n      }\n\n      &.mat-warn {\n        @include mdc-switch-theme.theme(m2-mdc-switch.private-get-color-palette-color-tokens(\n          map.get($config, warn),\n          map.get($config, is-dark)\n        ));\n      }\n    }\n  }\n}\n\n@mixin typography($config-or-theme) {\n  $config: typography.private-typography-to-2018-config(\n      theming.get-typography-config($config-or-theme));\n  $mdc-switch-typography-tokens: m2-mdc-switch.get-typography-tokens($config);\n  $mat-slide-toggle-typography-tokens: m2-mat-slide-toggle.get-typography-tokens($config);\n\n  //Add values for MDC slide toggle tokens\n  .mat-mdc-slide-toggle {\n    @include mdc-form-field.core-styles($query: mdc-helpers.$mdc-typography-styles-query);\n    @include mdc-switch-theme.theme($mdc-switch-typography-tokens);\n    @include token-utils.create-token-values(\n      m2-mat-slide-toggle.$prefix,\n      $mat-slide-toggle-typography-tokens\n    );\n  }\n}\n\n@mixin density($config-or-theme) {\n  $density-scale: theming.get-density-config($config-or-theme);\n  .mat-mdc-slide-toggle {\n    @include mdc-switch-theme.theme(mdc-switch-theme.density($density-scale));\n  }\n}\n\n@mixin theme($theme-or-color-config) {\n  $theme: theming.private-legacy-get-theme($theme-or-color-config);\n\n  @include theming.private-check-duplicate-theme-styles($theme, 'mat-slide-toggle') {\n    $color: theming.get-color-config($theme);\n    $density: theming.get-density-config($theme);\n    $typography: theming.get-typography-config($theme);\n\n    @if $color != null {\n      @include color($color);\n    }\n    @if $density != null {\n      @include density($density);\n    }\n    @if $typography != null {\n      @include typography($typography);\n    }\n  }\n}\n","//\n// Copyright 2023 Google Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n//\n\n// stylelint-disable selector-class-pattern --\n// Selector '.mdc-*' should only be used in this project.\n\n@use '@material/feature-targeting/feature-targeting';\n@use '@material/rtl/rtl';\n@use '@material/theme/theme';\n@use '@material/typography/typography';\n@use './form-field-theme';\n@use './variables';\n\n@mixin core-styles($query: feature-targeting.all()) {\n  $feat-color: feature-targeting.create-target($query, color);\n\n  @include static-styles($query);\n\n  // TODO: Replace with call to theme-styles after Angular moves to Theming API\n  .mdc-form-field {\n    @include typography.typography(body2, $query);\n\n    @include feature-targeting.targets($feat-color) {\n      @include theme.property(color, text-primary-on-background);\n    }\n  }\n}\n\n@mixin static-styles($query: feature-targeting.all()) {\n  $feat-structure: feature-targeting.create-target($query, structure);\n\n  .mdc-form-field {\n    @include feature-targeting.targets($feat-structure) {\n      display: inline-flex;\n      &[hidden] {\n        display: none;\n      }\n      align-items: center;\n      vertical-align: middle;\n    }\n\n    > label {\n      @include feature-targeting.targets($feat-structure) {\n        @include rtl.reflexive-property(margin, 0, auto);\n        @include rtl.reflexive-property(padding, variables.$item-spacing, 0);\n\n        order: 0;\n      }\n    }\n  }\n\n  .mdc-form-field--nowrap {\n    > label {\n      @include feature-targeting.targets($feat-structure) {\n        text-overflow: ellipsis;\n        overflow: hidden;\n        white-space: nowrap;\n      }\n    }\n  }\n\n  .mdc-form-field--align-end {\n    > label {\n      @include feature-targeting.targets($feat-structure) {\n        @include rtl.reflexive-property(margin, auto, 0);\n        @include rtl.reflexive-property(padding, 0, variables.$item-spacing);\n\n        order: -1;\n      }\n    }\n  }\n\n  .mdc-form-field--space-between {\n    @include feature-targeting.targets($feat-structure) {\n      justify-content: space-between;\n    }\n\n    > label {\n      @include feature-targeting.targets($feat-structure) {\n        margin: 0;\n\n        @include rtl.rtl {\n          // RTL needed for specificity\n          margin: 0;\n        }\n      }\n    }\n  }\n}\n","@use '@material/radio/radio' as mdc-radio;\n@use '@material/radio/radio-theme' as mdc-radio-theme;\n@use '@material/form-field' as mdc-form-field;\n@use '../core/mdc-helpers/mdc-helpers';\n@use '../core/theming/theming';\n@use '../core/tokens/token-utils';\n@use '../core/typography/typography';\n@use '../core/tokens/m2/mdc/radio' as tokens-mdc-radio;\n@use '../core/tokens/m2/mat/radio' as tokens-mat-radio;\n@use 'sass:map';\n\n@mixin color($config-or-theme) {\n  $config: theming.get-color-config($config-or-theme);\n  $primary: map.get($config, primary);\n  $accent: map.get($config, accent);\n  $warn: map.get($config, warn);\n\n  @include mdc-helpers.using-mdc-theme($config) {\n    .mat-mdc-radio-button {\n      @include mdc-form-field.core-styles($query: mdc-helpers.$mdc-theme-styles-query);\n    }\n  }\n\n  .mat-mdc-radio-button {\n    &.mat-primary {\n      $primary-config: map.merge($config, (accent: $primary));\n      @include mdc-radio-theme.theme(tokens-mdc-radio.get-color-tokens($primary-config));\n      @include token-utils.create-token-values(tokens-mat-radio.$prefix,\n        tokens-mat-radio.get-color-tokens($primary-config));\n    }\n\n    &.mat-accent {\n      $accent-config: map.merge($config, (accent: $accent));\n      @include mdc-radio-theme.theme(tokens-mdc-radio.get-color-tokens($accent-config));\n      @include token-utils.create-token-values(tokens-mat-radio.$prefix,\n        tokens-mat-radio.get-color-tokens($accent-config));\n    }\n\n    &.mat-warn {\n      $warn-config: map.merge($config, (accent: $warn));\n      @include mdc-radio-theme.theme(tokens-mdc-radio.get-color-tokens($warn-config));\n      @include token-utils.create-token-values(tokens-mat-radio.$prefix,\n        tokens-mat-radio.get-color-tokens($warn-config));\n    }\n  }\n}\n\n@mixin typography($config-or-theme) {\n  $config: typography.private-typography-to-2018-config(\n      theming.get-typography-config($config-or-theme));\n\n  .mat-mdc-radio-button {\n    @include mdc-radio-theme.theme(tokens-mdc-radio.get-typography-tokens($config));\n    @include mdc-helpers.using-mdc-typography($config) {\n      @include mdc-form-field.core-styles($query: mdc-helpers.$mdc-typography-styles-query);\n    }\n  }\n}\n\n@mixin density($config-or-theme) {\n  $density-scale: theming.get-density-config($config-or-theme);\n  .mat-mdc-radio-button .mdc-radio {\n    @include mdc-radio-theme.theme(tokens-mdc-radio.get-density-tokens($density-scale));\n  }\n\n  @include mdc-helpers.if-touch-targets-unsupported($density-scale) {\n    .mat-mdc-radio-touch-target {\n      display: none;\n    }\n  }\n}\n\n@mixin theme($theme-or-color-config) {\n  $theme: theming.private-legacy-get-theme($theme-or-color-config);\n  @include theming.private-check-duplicate-theme-styles($theme, 'mat-radio') {\n    $color: theming.get-color-config($theme);\n    $density: theming.get-density-config($theme);\n    $typography: theming.get-typography-config($theme);\n\n    @if $color != null {\n      @include color($color);\n    }\n    @if $density != null {\n      @include density($density);\n    }\n    @if $typography != null {\n      @include typography($typography);\n    }\n  }\n}\n","@use 'sass:map';\n\n@use '@material/slider/slider-theme' as mdc-slider-theme;\n@use '@material/theme/theme-color' as mdc-theme-color;\n@use '@material/typography/typography' as mdc-typography;\n@use '@material/theme/variables' as mdc-theme-variables;\n@use '../core/mdc-helpers/mdc-helpers';\n@use '../core/theming/theming';\n@use '../core/typography/typography';\n\n\n@mixin color($config-or-theme) {\n  $config: theming.get-color-config($config-or-theme);\n\n  @include mdc-helpers.using-mdc-theme($config) {\n    .mat-mdc-slider {\n      $is-dark: map.get($config, is-dark);\n      $on-surface: mdc-theme-color.prop-value(on-surface);\n\n      @include mdc-slider-theme.theme((\n        label-container-color: if($is-dark, white, black),\n        label-label-text-color: if($is-dark, black, white),\n        disabled-handle-color: $on-surface,\n        disabled-active-track-color: $on-surface,\n        disabled-inactive-track-color: $on-surface,\n        with-tick-marks-disabled-container-color: $on-surface,\n      ));\n\n      // Note that technically we can control this using an `rgba` color in `label-container-color`.\n      // We don't do it, because the shapes MDC uses to construct the indicator overlap which causes\n      // their color opacities to stack with an `rgba` color.\n      --mat-mdc-slider-value-indicator-opacity: #{if($is-dark, 0.9, 0.6)};\n\n      &.mat-primary {\n        @include _slider-color(primary, on-primary);\n      }\n\n      &.mat-accent {\n        @include _slider-color(secondary, on-secondary);\n      }\n\n      &.mat-warn {\n        @include _slider-color(error, on-error);\n      }\n    }\n  }\n}\n\n@mixin typography($config-or-theme) {\n  $config: typography.private-typography-to-2018-config(\n      theming.get-typography-config($config-or-theme));\n  @include mdc-helpers.using-mdc-typography($config) {\n    .mat-mdc-slider {\n      @include mdc-slider-theme.theme((\n        label-label-text-font: mdc-typography.get-font(subtitle2),\n        label-label-text-size: mdc-typography.get-size(subtitle2),\n        label-label-text-line-height: mdc-typography.get-line-height(subtitle2),\n        label-label-text-tracking: mdc-typography.get-tracking(subtitle2),\n        label-label-text-weight: mdc-typography.get-weight(subtitle2),\n      ));\n    }\n  }\n}\n\n@mixin density($config-or-theme) {}\n\n@mixin theme($theme-or-color-config) {\n  $theme: theming.private-legacy-get-theme($theme-or-color-config);\n  @include theming.private-check-duplicate-theme-styles($theme, 'mat-slider') {\n    $color: theming.get-color-config($theme);\n    $density: theming.get-density-config($theme);\n    $typography: theming.get-typography-config($theme);\n\n    @if $color != null {\n      @include color($color);\n    }\n    @if $density != null {\n      @include density($density);\n    }\n    @if $typography != null {\n      @include typography($typography);\n    }\n  }\n}\n\n@mixin _slider-color($color, $on-color) {\n  $ripple-color: map.get(mdc-theme-variables.$property-values, $color);\n  $resolved-color: mdc-theme-color.prop-value($color);\n  $resolved-on-color: mdc-theme-color.prop-value($on-color);\n\n  @include mdc-slider-theme.theme((\n    handle-color: $resolved-color,\n    focus-handle-color: $resolved-color,\n    hover-handle-color: $resolved-color,\n    active-track-color: $resolved-color,\n    inactive-track-color: $resolved-color,\n    with-tick-marks-active-container-color: $resolved-on-color,\n    with-tick-marks-inactive-container-color: $resolved-color,\n  ));\n\n  --mat-mdc-slider-ripple-color: #{$ripple-color};\n  --mat-mdc-slider-hover-ripple-color: #{rgba($ripple-color, 0.05)};\n  --mat-mdc-slider-focus-ripple-color: #{rgba($ripple-color, 0.2)};\n}\n","@use 'sass:map';\n@use '@material/list/evolution-mixins';\n@use '@material/checkbox/checkbox-theme' as mdc-checkbox-theme;\n@use '@material/radio/radio-theme' as mdc-radio-theme;\n@use '@material/list/list-theme' as mdc-list-theme;\n\n@use '../core/theming/theming';\n@use '../core/tokens/m2/mdc/checkbox' as tokens-mdc-checkbox;\n@use '../core/tokens/m2/mdc/radio' as tokens-mdc-radio;\n@use '../core/tokens/m2/mdc/list' as tokens-mdc-list;\n@use '../core/typography/typography';\n@use '../core/typography/typography-utils';\n\n@mixin color($config-or-theme) {\n  $config: theming.get-color-config($config-or-theme);\n  $primary: map.get($config, primary);\n  $accent: map.get($config, accent);\n  $warn: map.get($config, warn);\n  $mdc-list-color-tokens: tokens-mdc-list.get-color-tokens($config);\n  $inner-control-primary: map.merge($config, (accent: $primary));\n  $inner-control-accent: map.merge($config, (accent: $accent));\n  $inner-control-warn: map.merge($config, (accent: $warn));\n\n\n  // Add values for MDC list tokens.\n  .mat-mdc-list-base {\n    @include mdc-list-theme.theme($mdc-list-color-tokens);\n  }\n\n  .mdc-list-item__start,\n  .mdc-list-item__end {\n    @include mdc-radio-theme.theme(tokens-mdc-radio.get-color-tokens($inner-control-primary));\n  }\n\n  .mat-accent {\n    .mdc-list-item__start,\n    .mdc-list-item__end {\n      @include mdc-radio-theme.theme(tokens-mdc-radio.get-color-tokens($inner-control-accent));\n    }\n  }\n\n  .mat-warn {\n    .mdc-list-item__start,\n    .mdc-list-item__end {\n      @include mdc-radio-theme.theme(tokens-mdc-radio.get-color-tokens($inner-control-warn));\n    }\n  }\n\n  .mat-mdc-list-option {\n    @include mdc-checkbox-theme.theme(tokens-mdc-checkbox.get-color-tokens($inner-control-primary));\n  }\n  .mat-mdc-list-option.mat-accent {\n    @include mdc-checkbox-theme.theme(tokens-mdc-checkbox.get-color-tokens($inner-control-accent));\n  }\n  .mat-mdc-list-option.mat-warn {\n    @include mdc-checkbox-theme.theme(tokens-mdc-checkbox.get-color-tokens($inner-control-warn));\n  }\n\n  // There is no token for activated color on nav list.\n  // TODO(mmalerba): Add a token to MDC or make a custom one.\n  .mat-mdc-list-base.mat-mdc-list-base {\n    @include evolution-mixins.list-selected-ink-color(theming.get-color-from-palette($primary));\n  }\n\n  // TODO(mmalerba): Leaking styles from the old MDC list mixins used in other components can cause\n  //  opacity issues, so we need this override for now. We can remove it when all Angular Material\n  //  components stop using the old MDC mixins.\n  .mat-mdc-list-base .mdc-list-item--disabled {\n    .mdc-list-item__start,\n    .mdc-list-item__content,\n    .mdc-list-item__end {\n      opacity: 1;\n    }\n  }\n}\n\n@mixin density($config-or-theme) {\n  $density-scale: theming.get-density-config($config-or-theme);\n  $mdc-list-density-tokens: tokens-mdc-list.get-density-tokens($density-scale);\n\n  // Add values for MDC list tokens.\n  .mat-mdc-list-base {\n    @include mdc-list-theme.theme($mdc-list-density-tokens);\n  }\n\n  // TODO(mmalerba): This is added to maintain the same style MDC used prior to the token-based API,\n  //  to avoid screenshot diffs. We should remove it in favor of following MDC's current style, or\n  //  add custom tokens for it.\n  $clamped-density-scale: theming.clamp-density($density-scale, -5);\n  .mat-mdc-list-item {\n    &.mdc-list-item--with-leading-avatar,\n    &.mdc-list-item--with-leading-checkbox,\n    &.mdc-list-item--with-leading-icon {\n      &.mdc-list-item--with-one-line {\n        height: map.get((\n            0: 56px,\n            -1: 52px,\n            -2: 48px,\n            -3: 44px,\n            -4: 40px,\n            -5: 40px,\n        ), $clamped-density-scale);\n      }\n\n      &.mdc-list-item--with-two-lines {\n        height: map.get((\n            0: 72px,\n            -1: 68px,\n            -2: 64px,\n            -3: 60px,\n            -4: 56px,\n            -5: 56px,\n        ), $clamped-density-scale);\n      }\n    }\n  }\n}\n\n@mixin typography($config-or-theme) {\n  $config: typography.private-typography-to-2018-config(\n      theming.get-typography-config($config-or-theme));\n  $mdc-list-typography-tokens: tokens-mdc-list.get-typography-tokens($config);\n\n  // Add values for MDC list tokens.\n  .mat-mdc-list-base {\n    @include mdc-list-theme.theme($mdc-list-typography-tokens);\n  }\n\n  // MDC does not have tokens for the subheader.\n  // TODO(mmalerba): Discuss with MDC about adding them, or create custom tokens.\n  .mdc-list-group__subheader {\n    @include typography-utils.typography-level($config, subtitle-1);\n  }\n}\n\n@mixin theme($theme-or-color-config) {\n  $theme: theming.private-legacy-get-theme($theme-or-color-config);\n  @include theming.private-check-duplicate-theme-styles($theme, 'mat-list') {\n    $color: theming.get-color-config($theme);\n    $density: theming.get-density-config($theme);\n    $typography: theming.get-typography-config($theme);\n\n    @if $color != null {\n      @include color($color);\n    }\n    @if $density != null {\n      @include density($density);\n    }\n    @if $typography != null {\n      @include typography($typography);\n    }\n  }\n}\n","//\n// Copyright 2022 Google Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n//\n\n// stylelint-disable selector-class-pattern --\n// Internal stylesheet for material list component. Selector '.mdc-*' should\n// only be used in this project.\n\n@use '@material/density/functions' as density-functions;\n@use '@material/dom/mixins' as dom-mixins;\n@use '@material/feature-targeting/feature-targeting';\n@use '@material/ripple/ripple-theme';\n@use '@material/ripple/ripple';\n@use '@material/rtl/rtl';\n@use '@material/shape/mixins' as shape-mixins;\n@use '@material/theme/theme-color';\n@use '@material/theme/theme';\n@use '@material/typography/typography';\n@use './evolution-variables' as variables;\n@use 'sass:list';\n@use 'sass:map';\n@use 'sass:math';\n\n$ripple-target: variables.$ripple-target;\n\n@mixin static-styles($query: feature-targeting.all()) {\n  $feat-structure: feature-targeting.create-target($query, structure);\n\n  @include _high-contrast-mode($query: $query);\n  .mdc-list {\n    @include _static-list-base($query: $query);\n  }\n\n  .mdc-list-item__wrapper {\n    @include feature-targeting.targets($feat-structure) {\n      display: block;\n    }\n  }\n\n  .mdc-list-item {\n    @include item-base($query: $query);\n    @include _list-item-baseline-height($query: $query);\n    @include one-line-item-start-alignment(center, $query: $query);\n    @include two-line-item-start-alignment(\n      $alignment: flex-start,\n      $offset: 16px,\n      $query: $query\n    );\n    @include three-line-item-start-alignment(\n      $alignment: flex-start,\n      $offset: 16px,\n      $query: $query\n    );\n\n    @include one-line-item-end-alignment(center, $query: $query);\n    @include two-line-item-end-alignment(center, $query: $query);\n    @include three-line-item-end-alignment(\n      $alignment: flex-start,\n      $offset: 16px,\n      $query: $query\n    );\n\n    @include feature-targeting.targets($feat-structure) {\n      align-items: stretch;\n      cursor: pointer;\n    }\n\n    // Reset mouse cursor for disabled and non-interactive items.\n    &.mdc-list-item--disabled,\n    &.mdc-list-item--non-interactive {\n      @include feature-targeting.targets($feat-structure) {\n        cursor: auto;\n      }\n    }\n\n    // TODO(b/254711887): Likely need to update this to adhere to a HCM focus\n    // ring spec.\n    // For components using aria-activedescendant, the focus pseudoclass is\n    // never applied and use `.mdc-ripple-upgraded--background-focused` instead.\n    &:not(.mdc-list-item--selected):focus::before,\n    &.mdc-ripple-upgraded--background-focused::before {\n      @include dom-mixins.transparent-border($query: $query);\n    }\n\n    &.mdc-list-item--selected::before {\n      @include dom-mixins.transparent-border(\n        $border-width: 3px,\n        $border-style: double,\n        $query: $query\n      );\n    }\n\n    &.mdc-list-item--selected:focus::before {\n      @include dom-mixins.transparent-border(\n        $border-width: 3px,\n        $query: $query\n      );\n    }\n  }\n\n  // stylelint-disable selector-max-type --\n  // Override anchor tag styles for the use-case of a list being used for navigation\n  a.mdc-list-item {\n    @include feature-targeting.targets($feat-structure) {\n      color: inherit;\n      text-decoration: none;\n    }\n  }\n  // stylelint-enable selector-max-type\n\n  .mdc-list-item__start {\n    @include feature-targeting.targets($feat-structure) {\n      fill: currentColor;\n      flex-shrink: 0;\n      pointer-events: none;\n    }\n  }\n\n  .mdc-list-item__end {\n    @include feature-targeting.targets($feat-structure) {\n      flex-shrink: 0;\n      pointer-events: none;\n    }\n  }\n\n  .mdc-list-item__content {\n    @include typography.overflow-ellipsis($query);\n    @include feature-targeting.targets($feat-structure) {\n      align-self: center;\n      flex: 1;\n      pointer-events: none;\n    }\n\n    .mdc-list-item--with-two-lines &,\n    .mdc-list-item--with-three-lines & {\n      @include feature-targeting.targets($feat-structure) {\n        align-self: stretch;\n      }\n    }\n\n    // Disable interaction on label elements that may automatically\n    // toggle corresponding checkbox / radio input.\n    &[for] {\n      @include feature-targeting.targets($feat-structure) {\n        pointer-events: none;\n      }\n    }\n  }\n\n  .mdc-list-item__primary-text {\n    @include typography.overflow-ellipsis($query);\n\n    .mdc-list-item--with-two-lines &,\n    .mdc-list-item--with-three-lines & {\n      @include typography.text-baseline(\n        $top: 28px,\n        $bottom: 20px,\n        $query: $query\n      );\n    }\n  }\n\n  .mdc-list-item__secondary-text {\n    @include typography.overflow-ellipsis($query);\n    @include typography.text-baseline(\n      $top: 20px,\n      $display: block,\n      $query: $query\n    );\n\n    .mdc-list-item--with-three-lines & {\n      @include feature-targeting.targets($feat-structure) {\n        white-space: normal;\n        line-height: 20px;\n      }\n    }\n\n    .mdc-list-item--with-overline & {\n      @include feature-targeting.targets($feat-structure) {\n        white-space: nowrap;\n        line-height: auto;\n      }\n    }\n  }\n\n  .mdc-list-item__overline-text {\n    @include typography.overflow-ellipsis($query);\n\n    .mdc-list-item--with-two-lines & {\n      @include typography.text-baseline(\n        $top: 24px,\n        $bottom: 20px,\n        $query: $query\n      );\n    }\n\n    .mdc-list-item--with-three-lines & {\n      @include typography.text-baseline(\n        $top: 28px,\n        $bottom: 20px,\n        $query: $query\n      );\n    }\n  }\n\n  .mdc-list-item--with-leading-avatar {\n    @include item-start-spacing(16px, $query: $query);\n    @include _two-line-item-text-baseline($query: $query);\n    @include _tall-list-item-baseline-height($query: $query);\n\n    .mdc-list-item__start {\n      @include feature-targeting.targets($feat-structure) {\n        border-radius: 50%;\n      }\n    }\n  }\n\n  .mdc-list-item--with-leading-icon {\n    @include item-start-spacing(\n      $leading: 16px,\n      $trailing: 32px,\n      $query: $query\n    );\n    @include _two-line-item-text-baseline($query: $query);\n    @include _tall-list-item-baseline-height($query: $query);\n  }\n\n  .mdc-list-item--with-leading-thumbnail {\n    @include item-start-spacing(16px, $query: $query);\n    @include _two-line-item-text-baseline($query: $query);\n    @include _tall-list-item-baseline-height($query: $query);\n  }\n\n  .mdc-list-item--with-leading-image {\n    @include item-start-spacing(16px, $query: $query);\n    @include _two-line-item-text-baseline($query: $query);\n    @include _one-line-item-taller-density(\n      variables.$one-line-item-density-scale,\n      $query: $query\n    );\n    @include _two-line-item-tall-density(\n      variables.$two-line-item-density-scale,\n      $query: $query\n    );\n  }\n\n  .mdc-list-item--with-leading-video {\n    @include two-line-item-start-alignment(\n      $alignment: flex-start,\n      $offset: 8px,\n      $query: $query\n    );\n    @include item-start-spacing($leading: 0, $trailing: 16px, $query: $query);\n    @include _two-line-item-text-baseline($query: $query);\n    @include _one-line-item-taller-density(\n      variables.$one-line-item-density-scale,\n      $query: $query\n    );\n    @include _two-line-item-tall-density(\n      variables.$two-line-item-density-scale,\n      $query: $query\n    );\n  }\n\n  .mdc-list-item--with-leading-checkbox {\n    $leading: absorb-overflow(16px, $actual: 40px, $available: 24px);\n    $trailing: absorb-overflow(32px, $actual: 40px, $available: 24px);\n    $top: absorb-overflow(16px, $actual: 40px, $available: 24px);\n\n    @include item-start-spacing($leading, $trailing, $query: $query);\n    @include two-line-item-start-alignment(\n      $alignment: flex-start,\n      $offset: $top,\n      $query: $query\n    );\n    @include _two-line-item-text-baseline($query: $query);\n    @include _tall-list-item-baseline-height($query: $query);\n  }\n\n  .mdc-list-item--with-leading-radio {\n    $leading: absorb-overflow(16px, $actual: 40px, $available: 24px);\n    $trailing: absorb-overflow(32px, $actual: 40px, $available: 24px);\n    $top: absorb-overflow(16px, $actual: 40px, $available: 24px);\n\n    @include item-start-spacing($leading, $trailing, $query: $query);\n    @include two-line-item-start-alignment(\n      $alignment: flex-start,\n      $offset: $top,\n      $query: $query\n    );\n    @include _two-line-item-text-baseline($query: $query);\n    @include _tall-list-item-baseline-height($query: $query);\n  }\n\n  .mdc-list-item--with-leading-switch {\n    @include item-start-spacing(16px, $query: $query);\n    @include two-line-item-start-alignment(\n      $alignment: flex-start,\n      $offset: 16px,\n      $query: $query\n    );\n    @include _two-line-item-text-baseline($query: $query);\n    @include _tall-list-item-baseline-height($query: $query);\n  }\n\n  .mdc-list-item--with-trailing-icon {\n    @include item-end-spacing(16px, $query: $query);\n  }\n\n  .mdc-list-item--with-trailing-meta {\n    @include two-line-item-end-alignment(flex-start, $query: $query);\n    @include three-line-item-end-alignment(flex-start, $query: $query);\n    @include item-end-spacing($leading: 28px, $trailing: 16px, $query: $query);\n    @include _multi-line-item-end-text-baseline($query: $query);\n\n    .mdc-list-item__end {\n      @include typography.typography(caption, $query);\n    }\n  }\n\n  .mdc-list-item--with-trailing-checkbox {\n    $leading: absorb-overflow(32px, $actual: 40px, $available: 24px);\n    $trailing: absorb-overflow(16px, $actual: 40px, $available: 24px);\n    $top: absorb-overflow(16px, $actual: 40px, $available: 24px);\n\n    @include item-end-spacing($leading, $trailing, $query: $query);\n    @include three-line-item-end-alignment(\n      $alignment: flex-start,\n      $offset: $top,\n      $query: $query\n    );\n  }\n\n  .mdc-list-item--with-trailing-radio {\n    $leading: absorb-overflow(32px, $actual: 40px, $available: 24px);\n    $trailing: absorb-overflow(16px, $actual: 40px, $available: 24px);\n    $top: absorb-overflow(16px, $actual: 40px, $available: 24px);\n\n    @include item-end-spacing($leading, $trailing, $query: $query);\n    @include three-line-item-end-alignment(\n      $alignment: flex-start,\n      $offset: $top,\n      $query: $query\n    );\n  }\n\n  .mdc-list-item--with-trailing-switch {\n    @include item-end-spacing(16px, $query: $query);\n    @include three-line-item-end-alignment(\n      $alignment: flex-start,\n      $offset: 16px,\n      $query: $query\n    );\n  }\n\n  .mdc-list-item--with-overline {\n    @include _two-line-item-primary-text-baseline(20px, 0px, $query: $query);\n    @include _three-line-item-primary-baseline(20px, 0px, $query: $query);\n  }\n\n  // This must be specified last to ensure that RTL padding takes priority over\n  // LTR padding in the cascade.\n  .mdc-list-item {\n    @include item-spacing(16px, $query: $query);\n  }\n\n  //\n  // Grouping\n  //\n  .mdc-list-group {\n    @include feature-targeting.targets($feat-structure) {\n      // Cancel top/bottom padding on individual lists within group\n      .mdc-deprecated-list {\n        padding: 0;\n      }\n    }\n  }\n  .mdc-list-group__subheader {\n    @include _list-group-subheader-margin($query: $query);\n  }\n\n  //\n  // Dividers\n  //\n\n  .mdc-list-divider {\n    @include feature-targeting.targets($feat-structure) {\n      padding: 0;\n\n      // Allows the use of padding to specify leading and trailing insets\n      // independently.\n      background-clip: content-box;\n    }\n  }\n\n  // The base inset variant corresponds to the item's padding.\n  .mdc-list-divider,\n  .mdc-list-divider--with-leading-text,\n  .mdc-list-divider--with-leading-icon,\n  .mdc-list-divider--with-leading-image,\n  .mdc-list-divider--with-leading-thumbnail,\n  .mdc-list-divider--with-leading-avatar,\n  .mdc-list-divider--with-leading-checkbox,\n  .mdc-list-divider--with-leading-switch,\n  .mdc-list-divider--with-leading-radio {\n    @include divider-leading-inset(16px, $query: $query);\n    @include divider-trailing-inset(16px, $query: $query);\n  }\n\n  .mdc-list-divider--with-leading-video {\n    @include divider-leading-inset(0px, $query: $query);\n  }\n\n  // This is needed to ensure that default padding isn't applied in RTL locales.\n  .mdc-list-divider {\n    @include feature-targeting.targets($feat-structure) {\n      @include rtl.rtl {\n        padding: 0;\n      }\n    }\n  }\n}\n\n@mixin core-styles($query: feature-targeting.all()) {\n  @include without-ripple($query);\n  @include with-ripple($query);\n}\n\n@mixin without-ripple($query: feature-targeting.all()) {\n  $feat-color: feature-targeting.create-target($query, color);\n  $feat-structure: feature-targeting.create-target($query, structure);\n  $feat-typography: feature-targeting.create-target($query, typography);\n\n  //\n  // Items\n  //\n\n  @include list-primary-text-ink-color(text-primary-on-background, $query);\n  @include list-secondary-text-ink-color(text-secondary-on-background, $query);\n  @include list-overline-text-ink-color(text-hint-on-background, $query);\n  @include list-icon-fill-color(transparent, $query);\n  @include list-icon-ink-color(text-icon-on-background, $query);\n  @include list-meta-text-ink-color(text-hint-on-background, $query);\n  @include list-disabled-opacity(variables.$content-disabled-opacity, $query);\n  @include list-disabled-ink-color(variables.$content-disabled-color, $query);\n  @include list-selected-ink-color(variables.$content-selected-color, $query);\n\n  @include group-subheader-ink-color(text-primary-on-background, $query);\n\n  @include _high-contrast-mode-border-color($query);\n\n  .mdc-list {\n    @include _typography-list-base($query: $query);\n  }\n\n  .mdc-list-item__primary-text {\n    @include typography.typography(subtitle1, $query);\n  }\n\n  .mdc-list-item__secondary-text {\n    @include typography.typography(body2, $query);\n  }\n\n  .mdc-list-item__overline-text {\n    @include typography.typography(overline, $query);\n  }\n\n  .mdc-list-item--with-leading-avatar {\n    @include item-start-size(40px, $query: $query);\n  }\n\n  .mdc-list-item--with-leading-icon {\n    @include item-start-size(24px, $query: $query);\n  }\n\n  .mdc-list-item--with-leading-thumbnail {\n    @include item-start-size(40px, $query: $query);\n  }\n\n  .mdc-list-item--with-leading-image {\n    @include item-start-size(56px, $query: $query);\n  }\n\n  .mdc-list-item--with-leading-video {\n    @include item-start-size($width: 100px, $height: 56px, $query: $query);\n  }\n\n  .mdc-list-item--with-leading-checkbox {\n    @include item-start-size(40px, $query: $query);\n  }\n\n  .mdc-list-item--with-leading-radio {\n    @include item-start-size(40px, $query: $query);\n  }\n\n  .mdc-list-item--with-leading-switch {\n    @include item-start-size($width: 36px, $height: 20px, $query: $query);\n  }\n\n  .mdc-list-item--with-trailing-icon {\n    @include item-end-size(24px, $query: $query);\n  }\n\n  .mdc-list-item--with-trailing-meta {\n    .mdc-list-item__end {\n      @include typography.typography(caption, $query);\n    }\n  }\n\n  .mdc-list-item--with-trailing-checkbox {\n    @include item-end-size(40px, $query: $query);\n  }\n\n  .mdc-list-item--with-trailing-radio {\n    @include item-end-size(40px, $query: $query);\n  }\n\n  .mdc-list-item--with-trailing-switch {\n    @include item-end-size($width: 36px, $height: 20px, $query: $query);\n  }\n\n  .mdc-list-group__subheader {\n    @include typography.typography(subtitle1, $query);\n  }\n\n  //\n  // Dividers\n  //\n\n  $divider-color: if(\n    theme-color.tone(theme-color.$background) == 'dark',\n    variables.$divider-color-on-dark-bg,\n    variables.$divider-color-on-light-bg\n  );\n\n  @include divider-color($divider-color, $query: $query);\n  @include divider-height(1px, $query: $query);\n  @include static-styles($query: $query);\n} // end of without-ripple\n\n@mixin with-ripple($query: feature-targeting.all()) {\n  @include ripple.common($query); // COPYBARA_COMMENT_THIS_LINE\n\n  :not(.mdc-list-item--disabled).mdc-list-item {\n    @include _item-interactive-ripple($query);\n  }\n}\n\n///\n/// Adjusts an offset (i.e., margin) to accomodate contents that are larger than\n/// the space allocated by the specification.\n///\n/// For instance, the specification provides 24x24dp for a checkbox with a 16dp\n/// margin. However, checkboxes are actually 40x40dp. To ensure that the\n/// checkbox is positioned correctly, the margin is reduced by 8dp to reflect\n/// that the margin is already \"baked into\" the checkbox.\n///\n/// Concretely, 40dp - 24dp = 16dp. Assuming that the control is symmetrical,\n/// half of the overflow (8dp) is on the leading side and half on the trailing\n/// side. Therefore, the leading and trailing margins are reduced by 8dp.\n///\n/// Note: this might be more useful if it's added into the leading/trailing\n/// margin mixins as a parameter.\n///\n@function absorb-overflow($offset, $actual, $available, $symmetric: true) {\n  @if $actual <= $available {\n    @return $offset;\n  }\n  $overflow: $actual - $available;\n  @return $offset - math.div($overflow, if($symmetric, 2, 1));\n}\n\n@mixin one-line-item-height($height, $query: feature-targeting.all()) {\n  $feat-structure: feature-targeting.create-target($query, structure);\n  &.mdc-list-item--with-one-line {\n    @include feature-targeting.targets($feat-structure) {\n      height: $height;\n    }\n  }\n}\n\n@mixin two-line-item-height($height, $query: feature-targeting.all()) {\n  $feat-structure: feature-targeting.create-target($query, structure);\n  &.mdc-list-item--with-two-lines {\n    @include feature-targeting.targets($feat-structure) {\n      height: $height;\n    }\n  }\n}\n@mixin three-line-item-height($height, $query: feature-targeting.all()) {\n  $feat-structure: feature-targeting.create-target($query, structure);\n  &.mdc-list-item--with-three-lines {\n    @include feature-targeting.targets($feat-structure) {\n      height: $height;\n    }\n  }\n}\n\n@mixin list-item-height($height) {\n  &.mdc-list-item--with-one-line,\n  &.mdc-list-item--with-two-lines,\n  &.mdc-list-item--with-three-lines {\n    @include theme.property(height, $height);\n  }\n}\n\n@mixin item-spacing(\n  $leading,\n  $trailing: $leading,\n  $query: feature-targeting.all()\n) {\n  $feat-structure: feature-targeting.create-target($query, structure);\n  @include feature-targeting.targets($feat-structure) {\n    @include rtl.reflexive-property(padding, $leading, $trailing);\n  }\n}\n\n@mixin one-line-item-start-alignment(\n  $alignment,\n  $offset: 0,\n  $query: feature-targeting.all()\n) {\n  $feat-structure: feature-targeting.create-target($query, structure);\n  &.mdc-list-item--with-one-line {\n    .mdc-list-item__start {\n      @include feature-targeting.targets($feat-structure) {\n        align-self: $alignment;\n        margin-top: $offset;\n      }\n    }\n  }\n}\n\n@mixin two-line-item-start-alignment(\n  $alignment,\n  $offset: 0,\n  $query: feature-targeting.all()\n) {\n  $feat-structure: feature-targeting.create-target($query, structure);\n  &.mdc-list-item--with-two-lines {\n    .mdc-list-item__start {\n      @include feature-targeting.targets($feat-structure) {\n        align-self: $alignment;\n        margin-top: $offset;\n      }\n    }\n  }\n}\n\n@mixin three-line-item-start-alignment(\n  $alignment,\n  $offset: 0,\n  $query: feature-targeting.all()\n) {\n  $feat-structure: feature-targeting.create-target($query, structure);\n  &.mdc-list-item--with-three-lines {\n    .mdc-list-item__start {\n      @include feature-targeting.targets($feat-structure) {\n        align-self: $alignment;\n        margin-top: $offset;\n      }\n    }\n  }\n}\n\n@mixin one-line-item-end-alignment(\n  $alignment,\n  $offset: 0,\n  $query: feature-targeting.all()\n) {\n  $feat-structure: feature-targeting.create-target($query, structure);\n  &.mdc-list-item--with-one-line {\n    .mdc-list-item__end {\n      @include feature-targeting.targets($feat-structure) {\n        align-self: $alignment;\n        margin-top: $offset;\n      }\n    }\n  }\n}\n\n@mixin two-line-item-end-alignment(\n  $alignment,\n  $offset: 0,\n  $query: feature-targeting.all()\n) {\n  $feat-structure: feature-targeting.create-target($query, structure);\n  &.mdc-list-item--with-two-lines {\n    .mdc-list-item__end {\n      @include feature-targeting.targets($feat-structure) {\n        align-self: $alignment;\n        margin-top: $offset;\n      }\n    }\n  }\n}\n\n@mixin three-line-item-end-alignment(\n  $alignment,\n  $offset: 0,\n  $query: feature-targeting.all()\n) {\n  $feat-structure: feature-targeting.create-target($query, structure);\n  &.mdc-list-item--with-three-lines {\n    .mdc-list-item__end {\n      @include feature-targeting.targets($feat-structure) {\n        align-self: $alignment;\n        margin-top: $offset;\n      }\n    }\n  }\n}\n\n@mixin item-start-spacing(\n  $leading,\n  $trailing: $leading,\n  $query: feature-targeting.all()\n) {\n  $feat-structure: feature-targeting.create-target($query, structure);\n  @include feature-targeting.targets($feat-structure) {\n    // Extra specificity needed to override default customizations.\n    &.mdc-list-item {\n      // We rely on auto to avoid clobbering the opposite padding.\n      @include rtl.reflexive-property(padding, 0, auto);\n    }\n\n    .mdc-list-item__start {\n      @include rtl.reflexive-property(margin, $leading, $trailing);\n    }\n  }\n}\n\n@mixin item-end-spacing(\n  $leading,\n  $trailing: $leading,\n  $query: feature-targeting.all()\n) {\n  $feat-structure: feature-targeting.create-target($query, structure);\n  @include feature-targeting.targets($feat-structure) {\n    // Extra specificity needed to override default customizations.\n    &.mdc-list-item {\n      // We rely on auto to avoid clobbering the opposite padding.\n      @include rtl.reflexive-property(padding, auto, 0);\n    }\n\n    .mdc-list-item__end {\n      @include rtl.reflexive-property(margin, $leading, $trailing);\n    }\n  }\n}\n\n@mixin item-start-size(\n  $width,\n  $height: $width,\n  $query: feature-targeting.all()\n) {\n  $feat-structure: feature-targeting.create-target($query, structure);\n  @include feature-targeting.targets($feat-structure) {\n    .mdc-list-item__start {\n      @include theme.property(width, $width);\n      @include theme.property(height, $height);\n    }\n  }\n}\n\n@mixin item-end-size($width, $height: $width, $query: feature-targeting.all()) {\n  $feat-structure: feature-targeting.create-target($query, structure);\n  @include feature-targeting.targets($feat-structure) {\n    .mdc-list-item__end {\n      @include theme.property(width, $width);\n      @include theme.property(height, $height);\n    }\n  }\n}\n\n@mixin list-item-selected-container-color($color) {\n  &.mdc-list-item.mdc-list-item--selected {\n    @include theme.property(background-color, $color);\n  }\n}\n\n@mixin list-primary-text-typography($typography-theme) {\n  .mdc-list-item__primary-text {\n    @include typography.theme-styles($typography-theme);\n  }\n}\n\n@mixin list-primary-text-ink-color($color, $query: feature-targeting.all()) {\n  $feat-color: feature-targeting.create-target($query, color);\n\n  .mdc-list-item__primary-text {\n    @include feature-targeting.targets($feat-color) {\n      @include theme.property(color, $color);\n    }\n  }\n}\n\n@mixin list-secondary-text-ink-color($color, $query: feature-targeting.all()) {\n  $feat-color: feature-targeting.create-target($query, color);\n\n  .mdc-list-item__secondary-text {\n    @include feature-targeting.targets($feat-color) {\n      @include theme.property(color, $color);\n    }\n  }\n}\n\n@mixin list-secondary-text-typography($typography-theme) {\n  .mdc-list-item__secondary-text {\n    @include typography.theme-styles($typography-theme);\n  }\n}\n\n@mixin list-overline-text-ink-color($color, $query: feature-targeting.all()) {\n  $feat-color: feature-targeting.create-target($query, color);\n\n  .mdc-list-item__overline-text {\n    @include feature-targeting.targets($feat-color) {\n      @include theme.property(color, $color);\n    }\n  }\n}\n\n@mixin list-meta-text-ink-color($color, $query: feature-targeting.all()) {\n  $feat-color: feature-targeting.create-target($query, color);\n\n  .mdc-list-item__end {\n    @include feature-targeting.targets($feat-color) {\n      @include theme.property(color, $color);\n    }\n  }\n}\n\n@mixin list-icon-ink-color($color, $query: feature-targeting.all()) {\n  $feat-color: feature-targeting.create-target($query, color);\n\n  .mdc-list-item--with-leading-icon .mdc-list-item__start,\n  .mdc-list-item--with-trailing-icon .mdc-list-item__end {\n    @include feature-targeting.targets($feat-color) {\n      @include theme.property(color, $color);\n    }\n  }\n}\n\n@mixin list-icon-fill-color($color, $query: feature-targeting.all()) {\n  $feat-color: feature-targeting.create-target($query, color);\n\n  .mdc-list-item--with-leading-icon .mdc-list-item__start,\n  .mdc-list-item--with-trailing-icon .mdc-list-item__end {\n    @include feature-targeting.targets($feat-color) {\n      @include theme.property(background-color, $color);\n    }\n  }\n}\n\n@mixin list-selected-ink-color($color, $query: feature-targeting.all()) {\n  $feat-color: feature-targeting.create-target($query, color);\n\n  .mdc-list-item--selected,\n  .mdc-list-item--activated {\n    @include list-primary-text-ink-color($color, $query);\n    @include _item-icon-ink-color($color, $leading-only: true, $query: $query);\n  }\n}\n\n@mixin list-selected-meta-text-ink-color(\n  $color,\n  $query: feature-targeting.all()\n) {\n  $feat-color: feature-targeting.create-target($query, color);\n\n  .mdc-list-item--selected,\n  .mdc-list-item--activated {\n    @include list-meta-text-ink-color($color, $query);\n  }\n}\n\n@mixin list-disabled-ink-color($color, $query: feature-targeting.all()) {\n  $feat-color: feature-targeting.create-target($query, color);\n\n  .mdc-list-item--disabled {\n    @include list-primary-text-ink-color($color, $query);\n    @include list-secondary-text-ink-color($color, $query);\n    @include list-overline-text-ink-color($color, $query);\n    @include _item-icon-ink-color($color, $query: $query);\n    @include item-meta-text-ink-color($color, $query);\n  }\n}\n\n@mixin list-disabled-opacity($opacity, $query: feature-targeting.all()) {\n  $feat-color: feature-targeting.create-target($query, color);\n\n  .mdc-list-item--disabled {\n    .mdc-list-item__start,\n    .mdc-list-item__content,\n    .mdc-list-item__end {\n      @include feature-targeting.targets($feat-color) {\n        @include theme.property(opacity, $opacity);\n      }\n    }\n  }\n}\n\n@mixin group-subheader-ink-color($color, $query: feature-targeting.all()) {\n  $feat-color: feature-targeting.create-target($query, color);\n\n  .mdc-deprecated-list-group__subheader {\n    @include feature-targeting.targets($feat-color) {\n      @include theme.property(color, $color);\n    }\n  }\n}\n\n///\n/// Sets shape radius (rounded) to single line list variant.\n///\n/// @param {Number | List<Number>} $radius Radius size in `px` or percentage. It can be 4 value corner or single radius.\n///     Set to `50%` for rounded shape.\n/// @param {Boolean} $rtl-reflexive Set to true to flip border radius in RTL context. Defaults to `false`.\n/// @param {Number} $density-scale Density scale of single line list. Set this only when custom density is applied.\n///     Defaults to `$mdc-deprecated-list-single-line-density-scale`.\n///\n/// @access public\n///\n@mixin one-line-list-radius(\n  $radius,\n  $rtl-reflexive: false,\n  $density-scale: variables.$one-line-item-density-scale,\n  $query: feature-targeting.all()\n) {\n  .mdc-list-item--with-one-line {\n    @include shape-mixins.radius(\n      $radius,\n      $rtl-reflexive,\n      $component-height:\n        density-functions.prop-value(\n          $density-config: variables.$one-line-item-density-config,\n          $density-scale: $density-scale,\n          $property-name: height\n        ),\n      $query: $query\n    );\n\n    &.mdc-list-item--with-leading-avatar,\n    &.mdc-list-item--with-leading-icon,\n    &.mdc-list-item--with-leading-thumbnail,\n    &.mdc-list-item--with-leading-checkbox,\n    &.mdc-list-item--with-leading-radio,\n    &.mdc-list-item--with-leading-switch {\n      @include shape-mixins.radius(\n        $radius,\n        $rtl-reflexive,\n        $component-height:\n          density-functions.prop-value(\n            $density-config: variables.$one-line-item-tall-density-config,\n            $density-scale: $density-scale,\n            $property-name: height\n          ),\n        $query: $query\n      );\n    }\n\n    &.mdc-list-item--with-leading-image,\n    &.mdc-list-item--with-leading-video {\n      @include shape-mixins.radius(\n        $radius,\n        $rtl-reflexive,\n        $component-height:\n          density-functions.prop-value(\n            $density-config: variables.$one-line-item-taller-density-config,\n            $density-scale: $density-scale,\n            $property-name: height\n          ),\n        $query: $query\n      );\n    }\n  }\n}\n\n@mixin two-line-list-radius(\n  $radius,\n  $rtl-reflexive: false,\n  $density-scale: variables.$two-line-item-density-scale,\n  $query: feature-targeting.all()\n) {\n  .mdc-list-item--with-two-lines {\n    @include shape-mixins.radius(\n      $radius,\n      $rtl-reflexive,\n      $component-height:\n        density-functions.prop-value(\n          $density-config: variables.$two-line-item-density-config,\n          $density-scale: $density-scale,\n          $property-name: height\n        ),\n      $query: $query\n    );\n\n    &.mdc-list-item--with-leading-avatar,\n    &.mdc-list-item--with-leading-icon,\n    &.mdc-list-item--with-leading-thumbnail,\n    &.mdc-list-item--with-leading-checkbox,\n    &.mdc-list-item--with-leading-radio,\n    &.mdc-list-item--with-leading-switch,\n    &.mdc-list-item--with-leading-image,\n    &.mdc-list-item--with-leading-video {\n      @include shape-mixins.radius(\n        $radius,\n        $rtl-reflexive,\n        $component-height:\n          density-functions.prop-value(\n            $density-config: variables.$two-line-item-tall-density-config,\n            $density-scale: $density-scale,\n            $property-name: height\n          ),\n        $query: $query\n      );\n    }\n  }\n}\n\n@mixin three-line-list-radius(\n  $radius,\n  $rtl-reflexive: false,\n  $density-scale: variables.$three-line-item-density-scale,\n  $query: feature-targeting.all()\n) {\n  .mdc-list-item--with-three-lines {\n    @include shape-mixins.radius(\n      $radius,\n      $rtl-reflexive,\n      $component-height:\n        density-functions.prop-value(\n          $density-config: variables.$three-line-item-density-config,\n          $density-scale: $density-scale,\n          $property-name: height\n        ),\n      $query: $query\n    );\n  }\n}\n\n@mixin divider-color($color, $query: feature-targeting.all()) {\n  $feat-color: feature-targeting.create-target($query, color);\n\n  .mdc-list-divider {\n    @include feature-targeting.targets($feat-color) {\n      @include theme.property(background-color, $color);\n    }\n  }\n}\n\n@mixin divider-height($height, $query: feature-targeting.all()) {\n  $feat-structure: feature-targeting.create-target($query, structure);\n\n  .mdc-list-divider {\n    @include feature-targeting.targets($feat-structure) {\n      @include theme.property(height, $height);\n    }\n  }\n}\n\n@mixin divider-leading-inset($inset, $query: feature-targeting.all()) {\n  $feat-structure: feature-targeting.create-target($query, structure);\n  &.mdc-list-divider--with-leading-inset {\n    @include feature-targeting.targets($feat-structure) {\n      // We rely on auto to avoid clobbering the opposite padding.\n      @include rtl.reflexive-property(padding, $inset, auto);\n    }\n  }\n}\n\n@mixin divider-trailing-inset($inset, $query: feature-targeting.all()) {\n  $feat-structure: feature-targeting.create-target($query, structure);\n  &.mdc-list-divider--with-trailing-inset {\n    @include feature-targeting.targets($feat-structure) {\n      // We rely on auto to avoid clobbering the opposite padding.\n      @include rtl.reflexive-property(padding, auto, $inset);\n    }\n  }\n}\n\n// The public density mixins apply the appropriate density styles regardless of\n// the item's start contents.\n@mixin one-line-item-density(\n  $density-scale,\n  $exclude-variants: false,\n  $query: feature-targeting.all()\n) {\n  @include _one-line-item-density($density-scale, $query: $query);\n\n  @if not $exclude-variants {\n    &.mdc-list-item--with-leading-avatar,\n    &.mdc-list-item--with-leading-icon,\n    &.mdc-list-item--with-leading-thumbnail,\n    &.mdc-list-item--with-leading-checkbox,\n    &.mdc-list-item--with-leading-radio,\n    &.mdc-list-item--with-leading-switch {\n      @include _one-line-item-tall-density($density-scale, $query: $query);\n    }\n\n    &.mdc-list-item--with-leading-image,\n    &.mdc-list-item--with-leading-video {\n      @include _one-line-item-taller-density($density-scale, $query: $query);\n    }\n  }\n}\n\n@mixin two-line-item-density($density-scale, $query: feature-targeting.all()) {\n  @include _two-line-item-density($density-scale, $query: $query);\n\n  &.mdc-list-item--with-leading-avatar,\n  &.mdc-list-item--with-leading-icon,\n  &.mdc-list-item--with-leading-thumbnail,\n  &.mdc-list-item--with-leading-checkbox,\n  &.mdc-list-item--with-leading-radio,\n  &.mdc-list-item--with-leading-switch,\n  &.mdc-list-item--with-leading-image,\n  &.mdc-list-item--with-leading-video {\n    @include _two-line-item-tall-density($density-scale, $query: $query);\n  }\n}\n\n@mixin three-line-item-density(\n  $density-scale,\n  $query: feature-targeting.all()\n) {\n  @include _three-line-item-density($density-scale, $query: $query);\n}\n\n//\n// Private\n//\n\n// Mixins that apply baseline height for one-, two-, and three- line item\n// container heights. This mixin calls the density mixins so that the styles\n// can be overwritten by future density mixin calls.\n@mixin _list-item-baseline-height($query: feature-targeting.all()) {\n  @include _one-line-item-density(\n    variables.$one-line-item-density-scale,\n    $query: $query\n  );\n\n  @include _two-line-item-density(\n    variables.$two-line-item-density-scale,\n    $query: $query\n  );\n\n  @include _three-line-item-density(\n    variables.$three-line-item-density-scale,\n    $query: $query\n  );\n}\n\n@mixin _tall-list-item-baseline-height($query: feature-targeting.all()) {\n  @include _one-line-item-tall-density(\n    variables.$one-line-item-density-scale,\n    $query: $query\n  );\n  @include _two-line-item-tall-density(\n    variables.$two-line-item-density-scale,\n    $query: $query\n  );\n}\n\n// The private density mixins allow density properties to be overridden\n// individually to avoid increasing specificity.\n\n@mixin _one-line-item-density($density-scale, $query: feature-targeting.all()) {\n  $height: density-functions.prop-value(\n    $density-config: variables.$one-line-item-density-config,\n    $density-scale: $density-scale,\n    $property-name: height,\n  );\n\n  @include one-line-item-height($height, $query: $query);\n}\n\n@mixin _one-line-item-tall-density(\n  $density-scale,\n  $query: feature-targeting.all()\n) {\n  $height: density-functions.prop-value(\n    $density-config: variables.$one-line-item-tall-density-config,\n    $density-scale: $density-scale,\n    $property-name: height,\n  );\n\n  @include one-line-item-height($height, $query: $query);\n}\n\n@mixin _one-line-item-taller-density(\n  $density-scale,\n  $query: feature-targeting.all()\n) {\n  $height: density-functions.prop-value(\n    $density-config: variables.$one-line-item-taller-density-config,\n    $density-scale: $density-scale,\n    $property-name: height,\n  );\n\n  @include one-line-item-height($height, $query: $query);\n}\n\n@mixin _two-line-item-density($density-scale, $query: feature-targeting.all()) {\n  $feat-structure: feature-targeting.create-target($query, structure);\n  $height: density-functions.prop-value(\n    $density-config: variables.$two-line-item-density-config,\n    $density-scale: $density-scale,\n    $property-name: height,\n  );\n\n  @include two-line-item-height($height, $query: $query);\n\n  @if ($density-scale and $density-scale != 0) {\n    &.mdc-list-item--with-two-lines {\n      .mdc-list-item__content {\n        display: flex;\n        flex-direction: column;\n        justify-content: center;\n      }\n      .mdc-list-item__primary-text,\n      .mdc-list-item__secondary-text {\n        margin-top: 0px;\n        margin-bottom: 0px;\n        line-height: 1.4;\n        &::before,\n        &::after {\n          display: none;\n        }\n      }\n    }\n  }\n}\n\n@mixin _two-line-item-tall-density(\n  $density-scale,\n  $query: feature-targeting.all()\n) {\n  $height: density-functions.prop-value(\n    $density-config: variables.$two-line-item-tall-density-config,\n    $density-scale: $density-scale,\n    $property-name: height,\n  );\n\n  @include two-line-item-height($height, $query: $query);\n}\n\n@mixin _three-line-item-density(\n  $density-scale,\n  $query: feature-targeting.all()\n) {\n  $height: density-functions.prop-value(\n    $density-config: variables.$three-line-item-density-config,\n    $density-scale: $density-scale,\n    $property-name: height,\n  );\n\n  @include three-line-item-height($height, $query: $query);\n}\n\n// Split the list-base mixin into two sub-mixins, one holding the\n// structural/static styles (static-list-base) and the other holding styles\n// that are themable (typography-list-base). However, the existing list-base\n// mixin need to be preserved as Angular calls this mixin for autocomplete\n// base styling.\n@mixin _typography-list-base($query: feature-targeting.all()) {\n  $feat-typography: feature-targeting.create-target($query, typography);\n  @include typography.typography(subtitle1, $query);\n  @include feature-targeting.targets($feat-typography) {\n    // According to the mocks and stickersheet, the line-height is\n    // adjusted to 24px for text content, same as for body1.\n    /* @alternate */\n    line-height: map.get(map.get(typography.$styles, body1), line-height);\n  }\n}\n\n@mixin _static-list-base($query: feature-targeting.all()) {\n  $feat-structure: feature-targeting.create-target($query, structure);\n\n  @include feature-targeting.targets($feat-structure) {\n    margin: 0;\n    padding: 8px 0;\n    list-style-type: none;\n\n    &:focus // lint-disable-focus-psuedo-selector\n    {\n      outline: none;\n    }\n  }\n}\n\n@mixin list-base($query: feature-targeting.all()) {\n  @include _typography-list-base($query: $query);\n  @include _static-list-base($query: $query);\n}\n\n@mixin item-base($query: feature-targeting.all()) {\n  $feat-structure: feature-targeting.create-target($query, structure);\n  @include feature-targeting.targets($feat-structure) {\n    display: flex;\n    position: relative;\n    align-items: center;\n    justify-content: flex-start;\n    overflow: hidden;\n    padding: 0;\n\n    &:focus // lint-disable-focus-psuedo-selector\n    {\n      outline: none;\n    }\n  }\n}\n\n@mixin _item-interactive-ripple($query: feature-targeting.all()) {\n  @include ripple.surface(\n    $ripple-target: variables.$ripple-target,\n    $query: $query\n  );\n  @include ripple.radius-bounded(\n    $ripple-target: variables.$ripple-target,\n    $query: $query\n  );\n  @include ripple-theme.states(\n    theme-color.prop-value(on-surface),\n    false,\n    $ripple-target: variables.$ripple-target,\n    $query: $query\n  );\n  @include ripple-theme.states-activated(\n    primary,\n    false,\n    $ripple-target: variables.$ripple-target,\n    $query: $query\n  );\n  @include ripple-theme.states-selected(\n    primary,\n    false,\n    $ripple-target: variables.$ripple-target,\n    $query: $query\n  );\n\n  #{variables.$ripple-target} {\n    @include ripple.surface-styles($query: $query);\n    @include ripple.target-common($query: $query);\n  }\n}\n\n@mixin _two-line-item-text-baseline($query: feature-targeting.all()) {\n  @include _two-line-item-primary-text-baseline(32px, 20px, $query: $query);\n  @include _two-line-item-overline-text-baseline(28px, 20px, $query: $query);\n  @include _two-line-item-meta-text-baseline($top: 32px, $query: $query);\n}\n\n@mixin _two-line-item-primary-text-baseline(\n  $top,\n  $bottom,\n  $query: feature-targeting.all()\n) {\n  &.mdc-list-item--with-two-lines {\n    .mdc-list-item__primary-text {\n      @include typography.text-baseline(\n        $top: $top,\n        $bottom: $bottom,\n        $query: $query\n      );\n    }\n  }\n}\n\n@mixin _three-line-item-primary-baseline(\n  $top,\n  $bottom,\n  $query: feature-targeting.all()\n) {\n  &.mdc-list-item--with-three-lines {\n    .mdc-list-item__primary-text {\n      @include typography.text-baseline(\n        $top: $top,\n        $bottom: $bottom,\n        $query: $query\n      );\n    }\n  }\n}\n\n@mixin _two-line-item-overline-text-baseline(\n  $top,\n  $bottom,\n  $query: feature-targeting.all()\n) {\n  &.mdc-list-item--with-two-lines {\n    .mdc-list-item__overline-text {\n      @include typography.text-baseline(\n        $top: $top,\n        $bottom: $bottom,\n        $query: $query\n      );\n    }\n  }\n}\n\n@mixin _three-line-item-overline-baseline(\n  $top,\n  $bottom,\n  $query: feature-targeting.all()\n) {\n  &.mdc-list-item--with-three-lines {\n    .mdc-list-item__overline-text {\n      @include typography.text-baseline(\n        $top: $top,\n        $bottom: $bottom,\n        $query: $query\n      );\n    }\n  }\n}\n\n@mixin _multi-line-item-end-text-baseline($query: feature-targeting.all()) {\n  &.mdc-list-item--with-two-lines {\n    .mdc-list-item__end {\n      @include typography.text-baseline(\n        $display: block,\n        $top: 28px,\n        $query: $query\n      );\n    }\n  }\n\n  &.mdc-list-item--with-three-lines {\n    .mdc-list-item__end {\n      @include typography.text-baseline(\n        $display: block,\n        $top: 28px,\n        $query: $query\n      );\n    }\n  }\n}\n\n@mixin _two-line-item-meta-text-baseline(\n  $top,\n  $query: feature-targeting.all()\n) {\n  &.mdc-list-item--with-two-lines {\n    &.mdc-list-item--with-trailing-meta {\n      .mdc-list-item__end {\n        @include typography.text-baseline(\n          $display: block,\n          $top: $top,\n          $query: $query\n        );\n      }\n    }\n  }\n}\n\n@mixin item-meta-text-ink-color($color, $query: feature-targeting.all()) {\n  $feat-color: feature-targeting.create-target($query, color);\n\n  &.mdc-list-item--with-trailing-meta {\n    .mdc-list-item__end {\n      @include feature-targeting.targets($feat-color) {\n        @include theme.property(color, $color);\n      }\n    }\n  }\n}\n\n@mixin _item-icon-ink-color(\n  $color,\n  $leading-only: false,\n  $query: feature-targeting.all()\n) {\n  $feat-color: feature-targeting.create-target($query, color);\n\n  &.mdc-list-item--with-leading-icon {\n    .mdc-list-item__start {\n      @include feature-targeting.targets($feat-color) {\n        @include theme.property(color, $color);\n      }\n    }\n  }\n\n  @if (not $leading-only) {\n    &.mdc-list-item--with-trailing-icon {\n      .mdc-list-item__end {\n        @include feature-targeting.targets($feat-color) {\n          @include theme.property(color, $color);\n        }\n      }\n    }\n  }\n}\n\n@mixin _high-contrast-mode-border-color($query: feature-targeting.all()) {\n  $feat-color: feature-targeting.create-target($query, color);\n  .mdc-list-divider::after {\n    @include feature-targeting.targets($feat-color) {\n      // Color ensures border is shown, but will be overridden by the browser.\n      @include theme.property(border-bottom-color, white);\n    }\n  }\n}\n\n@mixin _high-contrast-mode($query: feature-targeting.all()) {\n  $feat-structure: feature-targeting.create-target($query, structure);\n\n  @include dom-mixins.forced-colors-mode {\n    .mdc-list-divider::after {\n      @include feature-targeting.targets($feat-structure) {\n        content: '';\n        display: block;\n        border-bottom-width: 1px;\n        border-bottom-style: solid;\n      }\n    }\n  }\n}\n\n@mixin _list-group-subheader-margin($query: feature-targeting.all()) {\n  $feat-structure: feature-targeting.create-target($query, structure);\n\n  $mdc-list-subheader-virtual-height: 3rem;\n  $mdc-list-subheader-leading: map.get(\n    map.get(typography.$styles, body1),\n    line-height\n  );\n  $mdc-list-subheader-margin: calc(\n    (#{$mdc-list-subheader-virtual-height} - #{$mdc-list-subheader-leading}) / 2\n  );\n\n  @include feature-targeting.targets($feat-structure) {\n    margin: $mdc-list-subheader-margin variables.$side-padding;\n  }\n}\n","@use 'sass:list';\n@use 'sass:map';\n@use 'sass:math';\n@use 'sass:meta';\n@use 'sass:string';\n\n\n// Utility for fetching a nested value from a typography config.\n@function _mat-get-type-value($config, $level, $name) {\n  @if meta.type-of($config) != 'map' {\n    @error 'Typography config must be a map. Received #{meta.type-of($config)}.';\n  }\n\n  @if not map.has-key($config, $level) {\n    @error 'Typography config does not have a level called \"#{$level}\". ' +\n           'Available levels are: #{map.keys($config)}.';\n  }\n\n  @return map.get(map.get($config, $level), $name);\n}\n\n/// Gets the font size for a level inside a typography config.\n/// @param {Map} $config A typography config.\n/// @param {Map} $level A typography level.\n@function font-size($config, $level) {\n  @return _mat-get-type-value($config, $level, font-size);\n}\n\n/// Gets the line height for a level inside a typography config.\n/// @param {Map} $config A typography config.\n/// @param {Map} $level A typography level.\n@function line-height($config, $level) {\n  @return _mat-get-type-value($config, $level, line-height);\n}\n\n/// Gets the font weight for a level inside a typography config.\n/// @param {Map} $config A typography config.\n/// @param {Map} $level A typography level.\n@function font-weight($config, $level) {\n  @return _mat-get-type-value($config, $level, font-weight);\n}\n\n/// Gets the letter spacing for a level inside a typography config.\n/// @param {Map} $config A typography config.\n/// @param {Map} $level A typography level.\n@function letter-spacing($config, $level) {\n  @return _mat-get-type-value($config, $level, letter-spacing);\n}\n\n/// Gets the font-family from a typography config and removes the quotes around it.\n/// @param {Map} $config A typography config.\n/// @param {Map} $level A typography level.\n@function font-family($config, $level: null) {\n  @if meta.type-of($config) != 'map' {\n    @error 'Typography config must be a map. Received #{meta.type-of($config)}.';\n  }\n\n  $font-family: map.get($config, font-family);\n\n  @if $level != null {\n    $font-family: _mat-get-type-value($config, $level, font-family);\n  }\n\n  // Guard against unquoting non-string values, because it's deprecated.\n  @return if(meta.type-of($font-family) == string, string.unquote($font-family), $font-family);\n}\n\n/// Outputs the shorthand `font` CSS property, based on a set of typography values. Falls back to\n/// the individual properties if a value that isn't allowed in the shorthand is passed in.\n/// @param {String} $font-size The font-size value.\n/// @param {String | Number} $font-weight The font-weight value.\n/// @param {String | Number} $line-height The line-height value.\n/// @param {String} $font-family The font-family value.\n/// @returns {String} The `font` shorthand value combining the given parts.\n@mixin font-shorthand($font-size, $font-weight, $line-height, $font-family) {\n  // If any of the values are set to `inherit`, we can't use the shorthand\n  // so we fall back to passing in the individual properties.\n  @if ($font-size == inherit or\n       $font-weight == inherit or\n       $line-height == inherit or\n       $font-family == inherit or\n       $font-size == null or\n       $font-weight == null or\n       $line-height == null or\n       $font-family == null) {\n\n    font-size: $font-size;\n    font-weight: $font-weight;\n    line-height: $line-height;\n    font-family: $font-family;\n  }\n  @else {\n    // Otherwise use the shorthand `font`, because it's the least amount of bytes.\n    font: $font-weight list.slash($font-size, $line-height) $font-family;\n  }\n}\n\n/// Emits CSS styles for the given typography level.\n/// @param {Map} $config A typography config.\n/// @param {Map} $level A typography level.\n@mixin typography-level($config, $level) {\n  // we deliberately do not use the font shorthand here because it overrides\n  // certain font properties that can't be configured in the current typography\n  // config, e.g. the font-variant-caps or font-feature-settings property\n  font-size: font-size($config, $level);\n  font-weight: font-weight($config, $level);\n  line-height: line-height($config, $level);\n  font-family: font-family($config, $level);\n\n  letter-spacing: letter-spacing($config, $level);\n}\n\n/// Coerce a value to `em` if it is a unitless number, otherwise returns\n/// the value provided.\n@function private-coerce-unitless-to-em($value) {\n  @return if(math.is-unitless($value), 1em * $value, $value);\n}\n","@use 'sass:map';\n@use '@material/tab-indicator/tab-indicator-theme' as mdc-tab-indicator-theme;\n@use '@material/tab/tab-theme' as mdc-tab-theme;\n@use '../core/tokens/m2/mdc/tab' as tokens-mdc-tab;\n@use '../core/tokens/m2/mdc/tab-indicator' as tokens-mdc-tab-indicator;\n@use '../core/tokens/m2/mat/tab-header' as tokens-mat-tab-header;\n@use '../core/tokens/m2/mat/tab-header-with-background' as tokens-mat-tab-header-with-background;\n@use '../core/theming/theming';\n@use '../core/typography/typography';\n@use '../core/tokens/token-utils';\n\n\n@mixin color($config-or-theme) {\n  $config: theming.get-color-config($config-or-theme);\n\n  .mat-mdc-tab-group, .mat-mdc-tab-nav-bar {\n    @include _palette-styles($config, primary);\n\n    &.mat-accent {\n      @include _palette-styles($config, accent);\n    }\n\n    &.mat-warn {\n      @include _palette-styles($config, warn);\n    }\n\n    &.mat-background-primary {\n      @include _background-styles($config, primary);\n    }\n\n    &.mat-background-accent {\n      @include _background-styles($config, accent);\n    }\n\n    &.mat-background-warn {\n      @include _background-styles($config, warn);\n    }\n  }\n}\n\n@mixin _background-styles($initial-config, $palette) {\n  $config: map.merge($initial-config, (primary: map.get($initial-config, $palette)));\n  @include token-utils.create-token-values(tokens-mat-tab-header-with-background.$prefix,\n    tokens-mat-tab-header-with-background.get-color-tokens($config));\n}\n\n@mixin _palette-styles($initial-config, $palette) {\n  $config: map.merge($initial-config, (primary: map.get($initial-config, $palette)));\n  @include mdc-tab-theme.secondary-navigation-tab-theme(\n    tokens-mdc-tab.get-color-tokens($config));\n  @include mdc-tab-indicator-theme.theme(\n    tokens-mdc-tab-indicator.get-color-tokens($config));\n  @include token-utils.create-token-values(tokens-mat-tab-header.$prefix,\n   tokens-mat-tab-header.get-color-tokens($config));\n}\n\n@mixin typography($config-or-theme) {\n  $config: typography.private-typography-to-2018-config(\n      theming.get-typography-config($config-or-theme));\n\n  .mat-mdc-tab-header {\n    @include mdc-tab-theme.secondary-navigation-tab-theme(\n      tokens-mdc-tab.get-typography-tokens($config));\n    @include mdc-tab-indicator-theme.theme(\n      tokens-mdc-tab-indicator.get-typography-tokens($config));\n    @include token-utils.create-token-values(tokens-mat-tab-header.$prefix,\n      tokens-mat-tab-header.get-typography-tokens($config));\n    @include token-utils.create-token-values(tokens-mat-tab-header-with-background.$prefix,\n      tokens-mat-tab-header-with-background.get-typography-tokens($config));\n  }\n}\n\n@mixin density($config-or-theme) {\n  $density-scale: theming.get-density-config($config-or-theme);\n  .mat-mdc-tab-header {\n    @include mdc-tab-theme.secondary-navigation-tab-theme(\n      tokens-mdc-tab.get-density-tokens($density-scale));\n    @include mdc-tab-indicator-theme.theme(\n      tokens-mdc-tab-indicator.get-density-tokens($density-scale));\n    @include token-utils.create-token-values(tokens-mat-tab-header.$prefix,\n      tokens-mat-tab-header.get-density-tokens($density-scale));\n    @include token-utils.create-token-values(tokens-mat-tab-header-with-background.$prefix,\n      tokens-mat-tab-header-with-background.get-density-tokens($density-scale));\n  }\n}\n\n@mixin theme($theme-or-color-config) {\n  $theme: theming.private-legacy-get-theme($theme-or-color-config);\n  @include theming.private-check-duplicate-theme-styles($theme, 'mat-tabs') {\n    $color: theming.get-color-config($theme);\n    $density: theming.get-density-config($theme);\n    $typography: theming.get-typography-config($theme);\n\n    @if $color != null {\n      @include color($color);\n    }\n    @if $density != null {\n      @include density($density);\n    }\n    @if $typography != null {\n      @include typography($typography);\n    }\n  }\n}\n\n","@use 'sass:map';\n@use '@material/checkbox/checkbox-theme' as mdc-checkbox-theme;\n@use '@material/form-field' as mdc-form-field;\n@use '../core/style/sass-utils';\n@use '../core/theming/theming';\n@use '../core/typography/typography';\n@use '../core/mdc-helpers/mdc-helpers';\n@use '../core/tokens/m2/mdc/checkbox' as tokens-mdc-checkbox;\n\n@mixin color($config-or-theme) {\n  $config: theming.get-color-config($config-or-theme);\n  $primary: map.get($config, primary);\n  $warn: map.get($config, warn);\n  $foreground: map.get($config, foreground);\n\n  @include sass-utils.current-selector-or-root() {\n    @include mdc-checkbox-theme.theme(tokens-mdc-checkbox.get-color-tokens($config));\n  }\n\n  .mat-mdc-checkbox {\n    &.mat-primary {\n      $primary-config: map.merge($config, (accent: $primary));\n      @include mdc-checkbox-theme.theme(tokens-mdc-checkbox.get-color-tokens($primary-config));\n    }\n\n    &.mat-warn {\n      $warn-config: map.merge($config, (accent: $warn));\n      @include mdc-checkbox-theme.theme(tokens-mdc-checkbox.get-color-tokens($warn-config));\n    }\n\n    @include mdc-helpers.using-mdc-theme($config) {\n      // TODO(mmalerba): Switch to static-styles, theme-styles, and theme once they're available.\n      @include mdc-form-field.core-styles($query: mdc-helpers.$mdc-theme-styles-query);\n    }\n\n    &.mat-mdc-checkbox-disabled label {\n      // MDC should set the disabled color on the label, but doesn't, so we do it here instead.\n      color: theming.get-color-from-palette($foreground, disabled-text);\n    }\n  }\n}\n\n@mixin typography($config-or-theme) {\n  $config: typography.private-typography-to-2018-config(\n          theming.get-typography-config($config-or-theme));\n\n  @include sass-utils.current-selector-or-root() {\n    @include mdc-checkbox-theme.theme(tokens-mdc-checkbox.get-typography-tokens($config));\n  }\n\n  .mat-mdc-checkbox {\n    @include mdc-helpers.using-mdc-typography($config) {\n      // TODO(mmalerba): Switch to static-styles, theme-styles, and theme once they're available.\n      @include mdc-form-field.core-styles($query: mdc-helpers.$mdc-typography-styles-query);\n    }\n  }\n}\n\n@mixin density($config-or-theme) {\n  $density-scale: theming.get-density-config($config-or-theme);\n\n  @include sass-utils.current-selector-or-root() {\n    @include mdc-checkbox-theme.theme(tokens-mdc-checkbox.get-density-tokens($density-scale));\n  }\n\n  @include mdc-helpers.if-touch-targets-unsupported($density-scale) {\n    .mat-mdc-checkbox-touch-target {\n      display: none;\n    }\n  }\n}\n\n@mixin theme($theme-or-color-config) {\n  $theme: theming.private-legacy-get-theme($theme-or-color-config);\n  @include theming.private-check-duplicate-theme-styles($theme, 'mat-checkbox') {\n    $color: theming.get-color-config($theme);\n    $density: theming.get-density-config($theme);\n    $typography: theming.get-typography-config($theme);\n\n    @if $color != null {\n      @include color($color);\n    }\n    @if $density != null {\n      @include density($density);\n    }\n    @if $typography != null {\n      @include typography($typography);\n    }\n  }\n}\n\n@mixin theme-from-tokens($tokens) {\n  @if ($tokens != ()) {\n    // TODO(mmalerba): Some of the theme styles above are not represented in terms of tokens,\n    //   so this mixin is currently incomplete.\n    @include mdc-checkbox-theme.theme(map.get($tokens, tokens-mdc-checkbox.$prefix));\n  }\n}\n","@use 'sass:map';\n@use '@material/button/button' as mdc-button;\n@use '@material/button/button-theme' as mdc-button-theme;\n@use '@material/button/button-text-theme' as mdc-button-text-theme;\n@use '@material/button/button-filled-theme' as mdc-button-filled-theme;\n@use '@material/button/button-protected-theme' as mdc-button-protected-theme;\n@use '@material/button/button-outlined-theme' as mdc-button-outlined-theme;\n@use '@material/theme/theme-color' as mdc-theme-color;\n\n@use './button-theme-private';\n@use '../core/mdc-helpers/mdc-helpers';\n@use '../core/theming/theming';\n@use '../core/typography/typography';\n\n@mixin _button-variant($color) {\n  @include mdc-button-text-theme.theme((\n    label-text-color: $color,\n  ));\n}\n\n@mixin _unelevated-button-variant($foreground, $background) {\n  @include mdc-button-filled-theme.theme((\n    container-color: $background,\n    label-text-color: $foreground,\n  ));\n}\n\n@mixin _raised-button-variant($foreground, $background) {\n  @include mdc-button-protected-theme.theme((\n    container-color: $background,\n    label-text-color: $foreground,\n  ));\n}\n\n@mixin _outlined-button-variant($color) {\n  @include mdc-button-outlined-theme.theme((\n    label-text-color: $color,\n  ));\n}\n\n@mixin color($config-or-theme) {\n  $config: theming.get-color-config($config-or-theme);\n  @include mdc-helpers.using-mdc-theme($config) {\n    $is-dark: map.get($config, is-dark);\n    $on-surface: mdc-theme-color.prop-value(on-surface);\n    $surface: mdc-theme-color.prop-value(surface);\n    $disabled-ink-color: rgba($on-surface, if($is-dark, 0.5, 0.38));\n    $disabled-container-color: rgba($on-surface, 0.12);\n    $primary: mdc-theme-color.prop-value(primary);\n    $on-primary: mdc-theme-color.prop-value(on-primary);\n    $secondary: mdc-theme-color.prop-value(secondary);\n    $on-secondary: mdc-theme-color.prop-value(on-secondary);\n    $error: mdc-theme-color.prop-value(error);\n    $on-error: mdc-theme-color.prop-value(on-error);\n\n    .mat-mdc-button {\n      &.mat-unthemed {\n        @include _button-variant($on-surface);\n      }\n\n      &.mat-primary {\n        @include _button-variant($primary);\n      }\n\n      &.mat-accent {\n        @include _button-variant($secondary);\n      }\n\n      &.mat-warn {\n        @include _button-variant($error);\n      }\n\n      @include button-theme-private.apply-disabled-style() {\n        @include mdc-button-text-theme.theme((\n          // We need to pass both the disabled and enabled values, because the enabled\n          // ones apply to anchors while the disabled ones are for buttons.\n          disabled-label-text-color: $disabled-ink-color,\n          label-text-color: $disabled-ink-color\n        ));\n      }\n    }\n\n    .mat-mdc-unelevated-button {\n      &.mat-unthemed {\n        @include _unelevated-button-variant($on-surface, $surface);\n      }\n\n      &.mat-primary {\n        @include _unelevated-button-variant($on-primary, $primary);\n      }\n\n      &.mat-accent {\n        @include _unelevated-button-variant($on-secondary, $secondary);\n      }\n\n      &.mat-warn {\n        @include _unelevated-button-variant($on-error, $error);\n      }\n\n      @include button-theme-private.apply-disabled-style() {\n        @include mdc-button-filled-theme.theme((\n          // We need to pass both the disabled and enabled values, because the enabled\n          // ones apply to anchors while the disabled ones are for buttons.\n          disabled-container-color: $disabled-container-color,\n          disabled-label-text-color: $disabled-ink-color,\n          container-color: $disabled-container-color,\n          label-text-color: $disabled-ink-color,\n        ));\n      }\n    }\n\n    .mat-mdc-raised-button {\n      &.mat-unthemed {\n        @include _raised-button-variant($on-surface, $surface);\n      }\n\n      &.mat-primary {\n        @include _raised-button-variant($on-primary, $primary);\n      }\n\n      &.mat-accent {\n        @include _raised-button-variant($on-secondary, $secondary);\n      }\n\n      &.mat-warn {\n        @include _raised-button-variant($on-error, $error);\n      }\n\n      @include button-theme-private.apply-disabled-style() {\n        @include mdc-button-protected-theme.theme((\n          // We need to pass both the disabled and enabled values, because the enabled\n          // ones apply to anchors while the disabled ones are for buttons.\n          disabled-container-color: $disabled-container-color,\n          disabled-label-text-color: $disabled-ink-color,\n          container-color: $disabled-container-color,\n          label-text-color: $disabled-ink-color,\n          container-elevation: 0,\n        ));\n      }\n    }\n\n    .mat-mdc-outlined-button {\n      @include mdc-button-outlined-theme.theme((\n        outline-color: rgba(mdc-theme-color.prop-value(on-surface), 0.12)\n      ));\n\n      &.mat-unthemed {\n        @include _outlined-button-variant($on-surface);\n      }\n\n      &.mat-primary {\n        @include _outlined-button-variant($primary);\n      }\n\n      &.mat-accent {\n        @include _outlined-button-variant($secondary);\n      }\n\n      &.mat-warn {\n        @include _outlined-button-variant($error);\n      }\n\n      @include button-theme-private.apply-disabled-style() {\n        @include mdc-button-outlined-theme.theme((\n          // We need to pass both the disabled and enabled values, because the enabled\n          // ones apply to anchors while the disabled ones are for buttons.\n          label-text-color: $disabled-ink-color,\n          disabled-label-text-color: $disabled-ink-color,\n          outline-color: rgba($on-surface, 0.12),\n          disabled-outline-color: rgba($on-surface, 0.12),\n        ));\n      }\n    }\n\n    // Ripple colors\n    .mat-mdc-button, .mat-mdc-outlined-button {\n      @include button-theme-private.ripple-theme-styles($config, false);\n    }\n\n    .mat-mdc-raised-button, .mat-mdc-unelevated-button {\n      @include button-theme-private.ripple-theme-styles($config, true);\n    }\n  }\n}\n\n@mixin typography($config-or-theme) {\n  $config: typography.private-typography-to-2018-config(\n    theming.get-typography-config($config-or-theme));\n  @include mdc-helpers.using-mdc-typography($config) {\n    @include mdc-button.without-ripple($query: mdc-helpers.$mdc-typography-styles-query);\n  }\n}\n\n@mixin density($config-or-theme) {\n  $density-scale: theming.get-density-config($config-or-theme);\n  .mat-mdc-button,\n  .mat-mdc-raised-button,\n  .mat-mdc-unelevated-button,\n  .mat-mdc-outlined-button {\n    // Use `mat-mdc-button-base` to increase the specificity over the button's structural styles.\n    &.mat-mdc-button-base {\n      @include mdc-button-theme.density($density-scale, $query: mdc-helpers.$mdc-base-styles-query);\n      @include button-theme-private.touch-target-density($density-scale);\n    }\n  }\n}\n\n@mixin theme($theme-or-color-config) {\n  $theme: theming.private-legacy-get-theme($theme-or-color-config);\n  @include theming.private-check-duplicate-theme-styles($theme, 'mat-button') {\n    $color: theming.get-color-config($theme);\n    $density: theming.get-density-config($theme);\n    $typography: theming.get-typography-config($theme);\n\n    @if $color != null {\n      @include color($color);\n    }\n    @if $density != null {\n      @include density($density);\n    }\n    @if $typography != null {\n      @include typography($typography);\n    }\n  }\n}\n","@use 'sass:map';\n@use '@material/ripple/ripple-theme' as mdc-ripple-theme;\n@use '@material/theme/theme-color' as mdc-theme-color;\n\n@use '../core/mdc-helpers/mdc-helpers';\n\n@mixin _ripple-color($color) {\n  --mat-mdc-button-persistent-ripple-color: #{$color};\n  --mat-mdc-button-ripple-color: #{rgba($color, 0.1)};\n}\n\n@mixin ripple-theme-styles($config, $is-filled) {\n  $opacities: if(map.get($config, is-dark),\n    mdc-ripple-theme.$light-ink-opacities, mdc-ripple-theme.$dark-ink-opacities);\n\n  // Ideally these styles would be structural, but MDC bases some of the opacities on the theme.\n  &:hover .mat-mdc-button-persistent-ripple::before {\n    opacity: map.get($opacities, hover);\n  }\n\n  &.cdk-program-focused,\n  &.cdk-keyboard-focused {\n    .mat-mdc-button-persistent-ripple::before {\n      opacity: map.get($opacities, focus);\n    }\n  }\n\n  &:active .mat-mdc-button-persistent-ripple::before {\n    opacity: map.get($opacities, press);\n  }\n\n  @include _ripple-color(mdc-theme-color.prop-value(on-surface));\n\n  &.mat-primary {\n    @include _ripple-color(mdc-theme-color.prop-value(if($is-filled, on-primary, primary)));\n  }\n\n  &.mat-accent {\n    @include _ripple-color(mdc-theme-color.prop-value(if($is-filled, on-secondary, secondary)));\n  }\n\n  &.mat-warn {\n    @include _ripple-color(mdc-theme-color.prop-value(if($is-filled, on-error, error)));\n  }\n}\n\n// Wraps the content style in a selector for the disabled state.\n// MDC adds theme color by using :not(:disabled), so just using [disabled] once will not\n// override this, neither will it apply to anchor tags. This needs to override the\n// previously set theme color, so it must be ordered after the theme styles.\n// TODO(andrewseguin): Discuss with the MDC team to see if we can avoid the :not(:disabled) by\n// manually styling disabled buttons with a [disabled] selector.\n@mixin apply-disabled-style() {\n  &[disabled][disabled] {\n    @content;\n  }\n}\n\n// Hides the touch target on lower densities.\n@mixin touch-target-density($scale) {\n  @include mdc-helpers.if-touch-targets-unsupported($scale) {\n    .mat-mdc-button-touch-target {\n      display: none;\n    }\n  }\n}\n","//\n// Copyright 2020 Google Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n//\n\n// stylelint-disable selector-class-pattern --\n// Selector '.mdc-*' should only be used in this project.\n\n@use '@material/elevation/elevation';\n@use '@material/elevation/elevation-theme';\n@use '@material/feature-targeting/feature-targeting';\n@use '@material/ripple/ripple-theme';\n@use '@material/rtl/rtl';\n@use '@material/dom/dom';\n@use '@material/touch-target/touch-target';\n@use '@material/focus-ring/focus-ring';\n@use '@material/typography/typography';\n@use './button-shared-theme';\n\n@mixin static-styles($query: feature-targeting.all()) {\n  @include _static-styles-base($query: $query);\n  @include _typography-styles($query: $query);\n}\n\n@mixin _static-styles-base($query: feature-targeting.all()) {\n  $feat-structure: feature-targeting.create-target($query, structure);\n\n  @include touch-target.wrapper($query); // COPYBARA_COMMENT_THIS_LINE\n  // prettier-ignore\n  @include elevation.overlay-common($query); // COPYBARA_COMMENT_THIS_LINE\n\n  // postcss-bem-linter: define button\n  .mdc-button {\n    @include _root-structure($query);\n    // The icon CSS class overrides styles defined in the .material-icons CSS\n    // class, which is loaded separately so the order of CSS definitions is not\n    // guaranteed. Therefore, increase specifity by nesting this class to ensure\n    // overrides apply.\n    .mdc-button__icon {\n      @include feature-targeting.targets($feat-structure) {\n        @include _icon-structure;\n      }\n    }\n\n    .mdc-button__progress-indicator {\n      @include feature-targeting.targets($feat-structure) {\n        font-size: 0;\n        position: absolute;\n        @include rtl.ignore-next-line();\n        transform: translate(-50%, -50%);\n        top: 50%;\n        @include rtl.ignore-next-line();\n        left: 50%;\n        line-height: initial;\n      }\n    }\n\n    .mdc-button__label {\n      @include feature-targeting.targets($feat-structure) {\n        // Necessary such that label is stacked on top of ripple\n        // (since ripple is a positioned element, non-positioned elements\n        // appear under it).\n        position: relative;\n      }\n    }\n\n    .mdc-button__focus-ring {\n      @include focus-ring.focus-ring($query: $query);\n      @include feature-targeting.targets($feat-structure) {\n        display: none;\n      }\n    }\n\n    @include ripple-theme.focus {\n      .mdc-button__focus-ring {\n        @include dom.forced-colors-mode($exclude-ie11: true) {\n          @include feature-targeting.targets($feat-structure) {\n            display: block;\n          }\n        }\n      }\n    }\n\n    .mdc-button__touch {\n      @include touch-target.touch-target($query: $query);\n    }\n  }\n\n  .mdc-button__label + .mdc-button__icon {\n    @include feature-targeting.targets($feat-structure) {\n      @include icon-trailing;\n    }\n  }\n\n  svg.mdc-button__icon {\n    @include feature-targeting.targets($feat-structure) {\n      @include icon-svg;\n    }\n  }\n\n  .mdc-button--touch {\n    // Touch target doesn't change with height. It simply gets removed if\n    // density (height) changes. Therefore, it is a static style.\n    @include touch-target.margin(\n      $component-height: button-shared-theme.$height,\n      $query: $query\n    );\n  }\n  // postcss-bem-linter: end\n}\n\n@mixin _typography-styles($query) {\n  .mdc-button {\n    // Exclude properties declared in theme styles.\n    @include typography.typography(\n      button,\n      $exclude-props: (\n        font-size,\n        line-height,\n        font-weight,\n        letter-spacing,\n        text-transform\n      ),\n      $query: $query\n    );\n  }\n}\n\n/// @deprecated Contains typography declarations now part of theme-styles.\n@mixin deprecated-static-styles-without-ripple(\n  $query: feature-targeting.all()\n) {\n  @include _deprecated-typography-styles($query: $query);\n  @include _static-styles-base($query: $query);\n}\n\n@mixin _deprecated-typography-styles($query) {\n  .mdc-button {\n    @include typography.typography(button, $query);\n  }\n}\n\n@mixin deprecated-base($query) {\n  @include base($query);\n}\n\n@mixin base($query) {\n  @include typography.typography(button, $query);\n  @include _root-structure($query: $query);\n}\n\n@mixin _root-structure($query) {\n  $feat-structure: feature-targeting.create-target($query, structure);\n\n  @include elevation-theme.overlay-surface-position($query: $query);\n  @include elevation-theme.overlay-dimensions(100%, $query: $query);\n\n  @include feature-targeting.targets($feat-structure) {\n    display: inline-flex;\n    // position: relative; already set in mdc-elevation-overlay-surface-position\n    align-items: center;\n    justify-content: center;\n    box-sizing: border-box;\n    min-width: 64px;\n    border: none;\n    outline: none;\n    /* @alternate */\n    line-height: inherit;\n    user-select: none;\n    -webkit-appearance: none;\n    // Even though `visible` is the default, IE 11 computes the property as\n    // `hidden` in some cases, unless it's explicitly defined here.\n    overflow: visible;\n    vertical-align: middle;\n    background: transparent;\n  }\n\n  &::-moz-focus-inner {\n    @include feature-targeting.targets($feat-structure) {\n      padding: 0;\n      border: 0;\n    }\n  }\n\n  // postcss-bem-linter: ignore\n  &:active {\n    @include feature-targeting.targets($feat-structure) {\n      outline: none;\n    }\n  }\n\n  &:hover {\n    @include feature-targeting.targets($feat-structure) {\n      cursor: pointer;\n    }\n  }\n\n  &:disabled {\n    @include feature-targeting.targets($feat-structure) {\n      cursor: default;\n      pointer-events: none;\n    }\n  }\n\n  &[hidden] {\n    @include feature-targeting.targets($feat-structure) {\n      display: none;\n    }\n  }\n}\n\n@mixin icon {\n  @include _icon-structure;\n  @include _icon-size(18px);\n}\n\n@mixin _icon-structure {\n  @include rtl.reflexive-box(margin, right, 8px);\n\n  display: inline-block;\n  position: relative;\n  vertical-align: top;\n}\n\n@mixin _icon-size($size-px) {\n  $icon-size: typography.px-to-rem($size-px);\n\n  font-size: $icon-size;\n  height: $icon-size;\n  width: $icon-size;\n}\n\n@mixin icon-trailing {\n  @include rtl.reflexive-box(margin, left, 8px);\n}\n\n@mixin icon-svg {\n  fill: currentColor;\n}\n\n@mixin icon-contained {\n  @include rtl.reflexive-property(margin, -4px, 8px);\n}\n\n@mixin icon-contained-trailing {\n  @include rtl.reflexive-property(margin, 8px, -4px);\n}\n\n@mixin raised-transition($query: feature-targeting.all()) {\n  $feat-animation: feature-targeting.create-target($query, animation);\n\n  @include feature-targeting.targets($feat-animation) {\n    transition: elevation-theme.transition-value();\n  }\n}\n\n/// @deprecated Private style mixin for partners; not available for public use.\n@mixin deprecated-icon {\n  @include icon;\n}\n\n/// @deprecated Private style mixin for partners; not available for public use.\n@mixin deprecated-icon-trailing {\n  @include icon-trailing;\n}\n\n/// @deprecated Private style mixin for partners; not available for public use.\n@mixin deprecated-icon-svg {\n  @include icon-svg;\n}\n\n/// @deprecated Private style mixin for partners; not available for public use.\n@mixin deprecated-icon-contained {\n  @include icon-contained;\n}\n\n/// @deprecated Private style mixin for partners; not available for public use.\n@mixin deprecated-icon-contained-trailing {\n  @include icon-contained-trailing;\n}\n","@use 'sass:map';\n@use 'sass:math';\n@use '@material/density/functions' as mdc-density-functions;\n@use '@material/icon-button/icon-button-theme' as mdc-icon-button-theme;\n@use '@material/theme/theme-color' as mdc-theme-color;\n@use '../core/tokens/m2/mdc/icon-button' as tokens-mdc-icon-button;\n\n@use './button-theme-private';\n@use '../core/theming/theming';\n\n$_icon-size: 24px;\n\n@mixin _ripple-color($color) {\n  --mat-mdc-button-persistent-ripple-color: #{$color};\n  --mat-mdc-button-ripple-color: #{rgba($color, 0.1)};\n}\n\n@function _variable-safe-contrast-tone($value, $is-dark) {\n  @if ($value == 'dark' or $value == 'light' or type-of($value) == 'color') {\n    @return mdc-theme-color.contrast-tone($value);\n  }\n\n  @return if($is-dark, 'light', 'dark');\n}\n\n@mixin color($config-or-theme) {\n  $config: theming.get-color-config($config-or-theme);\n  $color-tokens: tokens-mdc-icon-button.get-color-tokens($config);\n  $background-palette: map.get($config, background);\n  $surface: theming.get-color-from-palette($background-palette, card);\n  $is-dark: map.get($config, is-dark);\n  $on-surface: if(_variable-safe-contrast-tone($surface, $is-dark) == 'dark', #000, #fff);\n\n  .mat-mdc-icon-button {\n    @include button-theme-private.ripple-theme-styles($config, false);\n    @include mdc-icon-button-theme.theme($color-tokens);\n    @include _ripple-color($on-surface);\n\n    &.mat-primary {\n      $color: theming.get-color-from-palette(map.get($config, primary));\n      @include mdc-icon-button-theme.theme((icon-color: $color));\n      @include _ripple-color($color);\n    }\n\n    &.mat-accent {\n      $color: theming.get-color-from-palette(map.get($config, accent));\n      @include mdc-icon-button-theme.theme((icon-color: $color));\n      @include _ripple-color($color);\n    }\n\n    &.mat-warn {\n      $color: theming.get-color-from-palette(map.get($config, warn));\n      @include mdc-icon-button-theme.theme((icon-color: $color));\n      @include _ripple-color($color);\n    }\n\n    @include button-theme-private.apply-disabled-style() {\n      $disabled-color: rgba($on-surface, if($is-dark, 0.5, 0.38));\n      @include mdc-icon-button-theme.theme((\n        icon-color: $disabled-color,\n        disabled-icon-color: $disabled-color,\n      ));\n    }\n  }\n}\n\n@mixin typography($config-or-theme) {\n}\n\n@mixin density($config-or-theme) {\n  $density-scale: theming.get-density-config($config-or-theme);\n  // Manually apply the expected density theming, and include the padding\n  // as it was applied before\n  $calculated-size: mdc-density-functions.prop-value(\n    $density-config: (\n      size: (\n        default: 48px,\n        maximum: 48px,\n        minimum: 28px,\n      ),\n    ),\n    $density-scale: $density-scale,\n    $property-name: size,\n  );\n\n  // Use `mat-mdc-button-base` to increase the specificity over the button's structural styles.\n  .mat-mdc-icon-button.mat-mdc-button-base {\n    // Match the styles that used to be present. This is necessary for backwards\n    // compat to match the previous implementations selector count (two classes).\n    @include mdc-icon-button-theme.theme((\n      state-layer-size: $calculated-size,\n    ));\n\n    // TODO: Switch calculated-size to \"var(--mdc-icon-button-state-layer-size)\"\n    // Currently fails validation because the variable is \"undefined\"\n    // in the sass stack.\n    // TODO: Switch icon-size to \"var(--mdc-icon-button-icon-size)\". Currently\n    // fails validation because the variable is \"undefined\" in the sass stack.\n    width: var(--mdc-icon-button-state-layer-size);\n    height: var(--mdc-icon-button-state-layer-size);\n    padding: math.div($calculated-size - $_icon-size, 2);\n\n    @include button-theme-private.touch-target-density($density-scale);\n  }\n}\n\n@mixin theme($theme-or-color-config) {\n  $theme: theming.private-legacy-get-theme($theme-or-color-config);\n  @include theming.private-check-duplicate-theme-styles($theme, 'mat-icon-button') {\n    $color: theming.get-color-config($theme);\n    $density: theming.get-density-config($theme);\n    $typography: theming.get-typography-config($theme);\n\n    @if $color != null {\n      @include color($color);\n    }\n    @if $density != null {\n      @include density($density);\n    }\n    @if $typography != null {\n      @include typography($typography);\n    }\n  }\n}\n","@use 'sass:map';\n@use '@material/fab/fab' as mdc-fab;\n@use '@material/fab/fab-theme' as mdc-fab-theme;\n@use '@material/fab/extended-fab-theme' as mdc-extended-fab-theme;\n\n@use './button-theme-private';\n@use '../core/mdc-helpers/mdc-helpers';\n@use '../core/theming/theming';\n@use '../core/tokens/m2/mdc/fab' as tokens-mdc-fab;\n@use '../core/tokens/m2/mdc/extended-fab' as tokens-mdc-extended-fab;\n@use '../core/typography/typography';\n\n@mixin _fab-variant($config, $foreground, $background) {\n  $color-config: map.merge(\n    $config,\n    (\n      primary: (\n        default: $background,\n        default-contrast: $foreground,\n      ),\n    )\n  );\n  $color-tokens: tokens-mdc-fab.get-color-tokens($color-config);\n  @include mdc-fab-theme.theme($color-tokens);\n\n  --mat-mdc-fab-color: #{$foreground};\n}\n\n@function white-or-black($color, $is-dark) {\n  @return if(mdc-helpers.variable-safe-contrast-tone($color, $is-dark) == 'dark', #000, #fff);\n}\n\n@mixin color($config-or-theme) {\n  $config: theming.get-color-config($config-or-theme);\n\n  $is-dark: map.get($config, is-dark);\n  $background: map.get($config, background);\n\n  $surface: theming.get-color-from-palette($background, card);\n  $primary: theming.get-color-from-palette(map.get($config, primary));\n  $accent: theming.get-color-from-palette(map.get($config, accent));\n  $warn: theming.get-color-from-palette(map.get($config, warn));\n\n  $on-surface: white-or-black($surface, $is-dark);\n  $on-primary: white-or-black($primary, $is-dark);\n  $on-accent: white-or-black($accent, $is-dark);\n  $on-warn: white-or-black($warn, $is-dark);\n\n  $disabled: rgba($on-surface, 0.12);\n  $on-disabled: rgba($on-surface, if(map.get($config, is-dark), 0.5, 0.38));\n\n  .mat-mdc-fab,\n  .mat-mdc-mini-fab {\n    // TODO(wagnermaciel): The ripple-theme-styles mixin depends heavily on\n    // being wrapped by using-mdc-theme. This workaround needs to be\n    // revisited w/ a more holistic solution.\n    @include mdc-helpers.using-mdc-theme($config) {\n      @include button-theme-private.ripple-theme-styles($config, true);\n    }\n\n    @include button-theme-private.apply-disabled-style() {\n      @include _fab-variant($config, $on-disabled, $disabled);\n    }\n\n    &.mat-unthemed {\n      @include _fab-variant($config, $on-surface, $surface);\n    }\n\n    &.mat-primary {\n      @include _fab-variant($config, $on-primary, $primary);\n    }\n\n    &.mat-accent {\n      @include _fab-variant($config, $on-accent, $accent);\n    }\n\n    &.mat-warn {\n      @include _fab-variant($config, $on-warn, $warn);\n    }\n  }\n}\n\n@mixin typography($config-or-theme) {\n  $config: typography.private-typography-to-2018-config(\n    theming.get-typography-config($config-or-theme)\n  );\n\n  @include mdc-helpers.using-mdc-typography($config) {\n    @include mdc-fab.without-ripple($query: mdc-helpers.$mdc-typography-styles-query);\n  }\n\n  $typography-tokens: tokens-mdc-extended-fab.get-typography-tokens($config);\n  .mat-mdc-extended-fab {\n    @include mdc-extended-fab-theme.theme($typography-tokens);\n  }\n}\n\n@mixin density($config-or-theme) {\n}\n\n@mixin theme($theme-or-color-config) {\n  $theme: theming.private-legacy-get-theme($theme-or-color-config);\n  @include theming.private-check-duplicate-theme-styles($theme, 'mat-fab') {\n    $color: theming.get-color-config($theme);\n    $density: theming.get-density-config($theme);\n    $typography: theming.get-typography-config($theme);\n\n    @if $color != null {\n      @include color($color);\n    }\n    @if $density != null {\n      @include density($density);\n    }\n    @if $typography != null {\n      @include typography($typography);\n    }\n  }\n}\n","// Copyright 2016 Google Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\n// stylelint-disable selector-class-pattern --\n// Selector '.mdc-*' should only be used in this project.\n\n@use '@material/animation/functions' as animation-functions;\n@use '@material/elevation/elevation-theme';\n@use '@material/elevation/elevation';\n@use '@material/feature-targeting/feature-targeting';\n@use '@material/focus-ring/focus-ring';\n@use '@material/dom/mixins' as dom-mixins;\n@use '@material/ripple/ripple';\n@use '@material/ripple/ripple-theme';\n@use '@material/shape/mixins' as shape-mixins;\n@use '@material/shape/functions' as shape-functions;\n@use '@material/theme/css';\n@use '@material/theme/custom-properties';\n@use '@material/theme/replace';\n@use '@material/theme/state';\n@use '@material/theme/theme-color';\n@use '@material/theme/theme';\n@use '@material/touch-target/mixins' as touch-target-mixins;\n@use '@material/typography/typography';\n@use './fab-custom-properties';\n@use './extended-fab-theme';\n@use './fab-theme';\n@use 'sass:math';\n@use 'sass:list';\n\n@mixin core-styles($query: feature-targeting.all()) {\n  @include without-ripple($query);\n  @include ripple($query);\n}\n\n@mixin static-styles($query: feature-targeting.all()) {\n  // postcss-bem-linter: define fab\n\n  @include touch-target-mixins.wrapper($query); // COPYBARA_COMMENT_THIS_LINE\n  // prettier-ignore\n  @include elevation.overlay-common($query); // COPYBARA_COMMENT_THIS_LINE\n\n  .mdc-fab {\n    @include base_($query: $query);\n  }\n\n  .mdc-fab--mini {\n    @include mini_($query: $query);\n  }\n\n  .mdc-fab--extended {\n    @include extended_($query: $query);\n  }\n\n  .mdc-fab--touch {\n    @include touch-target-mixins.margin(\n      $component-height: fab-theme.$mini-height,\n      $component-width: fab-theme.$mini-height,\n      $query: $query\n    );\n\n    .mdc-fab__touch {\n      @include touch-target-mixins.touch-target(\n        $set-width: true,\n        $query: $query\n      );\n    }\n  }\n\n  .mdc-fab::before {\n    @include dom-mixins.transparent-border($query: $query);\n  }\n\n  .mdc-fab__label {\n    @include label_($query: $query);\n  }\n\n  .mdc-fab__icon {\n    @include icon_($query: $query);\n  }\n\n  // Increase specificity for FAB icon styles that need to override styles defined for .material-icons\n  // (which is loaded separately so the order of CSS definitions is not guaranteed)\n  .mdc-fab .mdc-fab__icon {\n    @include icon-overrides_($query: $query);\n  }\n\n  .mdc-fab--exited {\n    @include exited_($query: $query);\n  }\n  // postcss-bem-linter: end\n}\n\n@mixin without-ripple($query: feature-targeting.all()) {\n  @include static-styles($query: $query);\n\n  .mdc-fab {\n    @include fab-theme.container-color(secondary, $query: $query);\n    @include fab-theme.icon-size(24px, $query: $query);\n    @include fab-theme.ink-color(on-secondary, $query: $query);\n    @include fab-theme.shape-radius(fab-theme.$shape-radius, $query: $query);\n    @include elevation-theme.elevation(6, $query: $query);\n  }\n}\n\n@mixin ripple($query: feature-targeting.all()) {\n  $feat-structure: feature-targeting.create-target($query, structure);\n\n  @include ripple.common($query); // COPYBARA_COMMENT_THIS_LINE\n\n  .mdc-fab {\n    @include ripple.surface(\n      $query: $query,\n      $ripple-target: fab-theme.$ripple-target\n    );\n    @include ripple.radius-bounded(\n      $query: $query,\n      $ripple-target: fab-theme.$ripple-target\n    );\n    // Set `$opacity-map` to null to apply default opacity-map.\n    @include fab-theme.ripple-color(\n      on-secondary,\n      $opacity-map: null,\n      $query: $query\n    );\n\n    #{fab-theme.$ripple-target} {\n      @include ripple.target-common($query: $query);\n\n      @include feature-targeting.targets($feat-structure) {\n        overflow: hidden;\n      }\n    }\n    @include ripple-theme.behind-content(\n      fab-theme.$ripple-target,\n      $query: $query\n    );\n  }\n}\n\n$icon-enter-delay_: 90ms;\n$icon-enter-duration_: 180ms;\n\n@mixin base_($query: feature-targeting.all()) {\n  @include elevation-theme.overlay-surface-position($query: $query);\n  @include elevation-theme.overlay-dimensions(100%, $query: $query);\n\n  $feat-animation: feature-targeting.create-target($query, animation);\n  $feat-structure: feature-targeting.create-target($query, structure);\n\n  @include feature-targeting.targets($feat-structure) {\n    display: inline-flex;\n    position: relative;\n    align-items: center;\n    justify-content: center;\n    box-sizing: border-box;\n    width: fab-theme.$height;\n    height: fab-theme.$height;\n    padding: 0;\n    border: none;\n    fill: currentColor;\n    text-decoration: none;\n    cursor: pointer;\n    user-select: none;\n    -moz-appearance: none;\n    -webkit-appearance: none;\n    // Even though `visible` is the default, IE 11 computes the property as\n    // `hidden` in some cases, unless it's explicitly defined here.\n    overflow: visible;\n    &[hidden] {\n      display: none;\n    }\n  }\n\n  @include feature-targeting.targets($feat-animation) {\n    transition: box-shadow elevation-theme.$transition-duration\n        elevation-theme.$transition-timing-function,\n      opacity 15ms linear 30ms,\n      animation-functions.enter(\n        transform,\n        $icon-enter-duration_ + $icon-enter-delay_\n      );\n  }\n\n  &::-moz-focus-inner {\n    @include feature-targeting.targets($feat-structure) {\n      padding: 0;\n      border: 0;\n    }\n  }\n\n  &:hover {\n    @include elevation-theme.elevation(8, $query: $query);\n  }\n\n  @include ripple-theme.focus() {\n    @include elevation-theme.elevation(8, $query: $query);\n  }\n\n  .mdc-fab__focus-ring {\n    @include feature-targeting.targets($feat-structure) {\n      position: absolute;\n    }\n  }\n\n  @include ripple-theme.focus() {\n    .mdc-fab__focus-ring {\n      @include focus-ring.focus-ring($query: $query);\n    }\n  }\n\n  // Increase active state specificity due to ripple-theme.focus().\n  &:active,\n  &:focus:active {\n    @include elevation-theme.elevation(12, $query: $query);\n  }\n\n  &:active,\n  &:focus {\n    // TODO(acdvorak): Should this be paired with states and/or ripple? We don't want to disable outline\n    // (an accessibility/usability feature) unless we're confident that there is also a visual indication that the\n    // element has focus. If the client has customized the DOM in some unexpected way, and is certain that another\n    // element will receive focus instead, they can always override this property manually in their CSS.\n    @include feature-targeting.targets($feat-structure) {\n      outline: none;\n    }\n  }\n\n  &:hover {\n    @include feature-targeting.targets($feat-structure) {\n      cursor: pointer;\n    }\n  }\n\n  // stylelint-disable selector-max-type --\n  // This allows for using SVGs within them to align properly in all browsers.\n  // Can remove once: https://bugzilla.mozilla.org/show_bug.cgi?id=1294515 is resolved.\n\n  // postcss-bem-linter: ignore\n  > svg {\n    @include feature-targeting.targets($feat-structure) {\n      width: 100%;\n    }\n  }\n  // stylelint-enable selector-max-type\n}\n\n@mixin mini_($query: feature-targeting.all()) {\n  $feat-structure: feature-targeting.create-target($query, structure);\n\n  @include feature-targeting.targets($feat-structure) {\n    width: fab-theme.$mini-height;\n    height: fab-theme.$mini-height;\n  }\n}\n\n@mixin extended_($query: feature-targeting.all()) {\n  @include typography.typography(button, $query: $query);\n  @include extended-fab-theme.extended-shape-radius(\n    fab-theme.$shape-radius,\n    $query: $query\n  );\n  $extended-icon-padding: custom-properties.create(\n    fab-custom-properties.$extended-icon-padding,\n    extended-fab-theme.$extended-icon-padding\n  );\n  $extended-label-padding: custom-properties.create(\n    fab-custom-properties.$extended-label-padding,\n    extended-fab-theme.$extended-label-padding\n  );\n  @include extended-fab-theme.extended-padding(\n    extended-fab-theme.$extended-icon-padding,\n    extended-fab-theme.$extended-label-padding,\n    $query: $query\n  );\n\n  $feat-structure: feature-targeting.create-target($query, structure);\n\n  @include feature-targeting.targets($feat-structure) {\n    width: auto;\n    max-width: 100%;\n    height: extended-fab-theme.$extended-height;\n    // This allows the text within the extended fab to be centered for varying font sizes.\n    /* @alternate */\n    line-height: normal;\n  }\n}\n\n@mixin icon_($query: feature-targeting.all()) {\n  $feat-animation: feature-targeting.create-target($query, animation);\n  $feat-structure: feature-targeting.create-target($query, structure);\n\n  @include feature-targeting.targets($feat-animation) {\n    transition: animation-functions.enter(\n      transform,\n      $icon-enter-duration_,\n      $icon-enter-delay_\n    );\n  }\n\n  @include feature-targeting.targets($feat-structure) {\n    fill: currentColor;\n    will-change: transform;\n  }\n}\n\n@mixin label_($query: feature-targeting.all()) {\n  $feat-structure: feature-targeting.create-target($query, structure);\n\n  @include feature-targeting.targets($feat-structure) {\n    justify-content: flex-start;\n    text-overflow: ellipsis;\n    white-space: nowrap;\n    overflow-x: hidden;\n    overflow-y: visible;\n  }\n}\n\n@mixin icon-overrides_($query: feature-targeting.all()) {\n  $feat-structure: feature-targeting.create-target($query, structure);\n\n  @include feature-targeting.targets($feat-structure) {\n    display: inline-flex;\n    align-items: center;\n    justify-content: center;\n  }\n}\n\n@mixin exited_($query: feature-targeting.all()) {\n  $feat-animation: feature-targeting.create-target($query, animation);\n  $feat-structure: feature-targeting.create-target($query, structure);\n\n  @include feature-targeting.targets($feat-structure) {\n    transform: scale(0);\n    opacity: 0;\n  }\n\n  @include feature-targeting.targets($feat-animation) {\n    transition: opacity 15ms linear 150ms,\n      animation-functions.exit-permanent(transform, 180ms);\n  }\n\n  .mdc-fab__icon {\n    @include feature-targeting.targets($feat-structure) {\n      transform: scale(0);\n    }\n\n    @include feature-targeting.targets($feat-animation) {\n      transition: animation-functions.exit-permanent(transform, 135ms);\n    }\n  }\n}\n","@use '@material/snackbar/snackbar-theme' as mdc-snackbar-theme;\n@use '../core/theming/theming';\n@use '../core/typography/typography';\n@use '../core/tokens/token-utils';\n@use '../core/tokens/m2/mdc/snack-bar' as tokens-mdc-snack-bar;\n@use '../core/tokens/m2/mat/snack-bar' as tokens-mat-snack-bar;\n\n\n@mixin color($config-or-theme) {\n  $config: theming.get-color-config($config-or-theme);\n\n  .mat-mdc-snack-bar-container {\n    @include mdc-snackbar-theme.theme(tokens-mdc-snack-bar.get-color-tokens($config));\n    @include token-utils.create-token-values(\n      tokens-mat-snack-bar.$prefix,\n      tokens-mat-snack-bar.get-color-tokens($config)\n    );\n  }\n}\n\n@mixin typography($config-or-theme) {\n  $config: typography.private-typography-to-2018-config(\n      theming.get-typography-config($config-or-theme));\n\n  .mat-mdc-snack-bar-container {\n    @include mdc-snackbar-theme.theme(tokens-mdc-snack-bar.get-typography-tokens($config));\n  }\n}\n\n@mixin density($config-or-theme) {}\n\n@mixin theme($theme-or-color-config) {\n  $theme: theming.private-legacy-get-theme($theme-or-color-config);\n  @include theming.private-check-duplicate-theme-styles($theme, 'mat-snack-bar') {\n    $color: theming.get-color-config($theme);\n    $density: theming.get-density-config($theme);\n    $typography: theming.get-typography-config($theme);\n\n    @if $color != null {\n      @include color($color);\n    }\n    @if $density != null {\n      @include density($density);\n    }\n    @if $typography != null {\n      @include typography($typography);\n    }\n  }\n}\n\n","@use '../core/tokens/m2/mat/table' as tokens-mat-table;\n@use '../core/theming/theming';\n@use '../core/typography/typography';\n@use '../core/tokens/token-utils';\n\n@mixin _output-tokens {\n  @if (&) {\n    @content;\n  }\n  @else {\n    html {\n      @content;\n    }\n  }\n}\n\n@mixin color($config-or-theme) {\n  $config: theming.get-color-config($config-or-theme);\n\n  @include _output-tokens {\n    @include token-utils.create-token-values(tokens-mat-table.$prefix,\n      tokens-mat-table.get-color-tokens($config));\n  }\n}\n\n@mixin typography($config-or-theme) {\n  $config: typography.private-typography-to-2018-config(\n      theming.get-typography-config($config-or-theme));\n\n  @include _output-tokens {\n    @include token-utils.create-token-values(tokens-mat-table.$prefix,\n      tokens-mat-table.get-typography-tokens($config));\n  }\n}\n\n@mixin density($config-or-theme) {\n  $density-scale: theming.get-density-config($config-or-theme);\n\n  @include _output-tokens {\n    @include token-utils.create-token-values(tokens-mat-table.$prefix,\n      tokens-mat-table.get-density-tokens($density-scale));\n  }\n}\n\n@mixin theme($theme-or-color-config) {\n  $theme: theming.private-legacy-get-theme($theme-or-color-config);\n  @include theming.private-check-duplicate-theme-styles($theme, 'mat-table') {\n    $color: theming.get-color-config($theme);\n    $density: theming.get-density-config($theme);\n    $typography: theming.get-typography-config($theme);\n\n    @if $color != null {\n      @include color($color);\n    }\n    @if $density != null {\n      @include density($density);\n    }\n    @if $typography != null {\n      @include typography($typography);\n    }\n  }\n}\n","@use 'sass:map';\n@use '../core/theming/theming';\n@use '../core/tokens/m2/mdc/circular-progress' as tokens-mdc-circular-progress;\n@use '@material/circular-progress/circular-progress-theme' as mdc-circular-progress-theme;\n\n@mixin color($config-or-theme) {\n  $config: theming.get-color-config($config-or-theme);\n  $mdc-circular-progress-color-tokens: tokens-mdc-circular-progress.get-color-tokens($config);\n\n  .mat-mdc-progress-spinner {\n    @include mdc-circular-progress-theme.theme($mdc-circular-progress-color-tokens);\n\n    &.mat-accent {\n      $color: theming.get-color-from-palette(map.get($config, accent));\n      @include mdc-circular-progress-theme.theme((active-indicator-color: $color));\n    }\n\n    &.mat-warn {\n      $color: theming.get-color-from-palette(map.get($config, warn));\n      @include mdc-circular-progress-theme.theme((active-indicator-color: $color));\n    }\n  }\n}\n\n@mixin typography($config-or-theme) {}\n\n@mixin density($config-or-theme) {}\n\n@mixin theme($theme-or-color-config) {\n  $theme: theming.private-legacy-get-theme($theme-or-color-config);\n  @include theming.private-check-duplicate-theme-styles($theme, 'mat-progress-spinner') {\n    $color: theming.get-color-config($theme);\n    $density: theming.get-density-config($theme);\n    $typography: theming.get-typography-config($theme);\n\n    @if $color != null {\n      @include color($color);\n    }\n    @if $density != null {\n      @include density($density);\n    }\n    @if $typography != null {\n      @include typography($typography);\n    }\n  }\n}\n","@use 'sass:color';\n@use 'sass:map';\n@use 'sass:math';\n@use '@angular/cdk';\n\n@use '../core/theming/theming';\n@use '../core/typography/typography';\n@use '../core/tokens/m2/mat/badge' as tokens-mat-badge;\n@use '../core/tokens/token-utils';\n@use '../core/style/sass-utils';\n\n// TODO(crisbeto): some of these variables aren't used anymore and should be deleted.\n$font-size: 12px;\n$font-weight: 600;\n$default-size: 22px !default;\n$small-size: $default-size - 6;\n$large-size: $default-size + 6;\n$_badge-structure-emitted: false !default;\n\n// Internally there are some builds that throw an error if they can't figure out the values\n// of CSS variables during compliation. This flag temporarily enables fallbacks for these builds.\n// Eventually we should clean them up.\n$_emit-fallback-vars: true;\n\n// Mixin for building offset given different sizes\n@mixin _badge-size($size, $font-size-token) {\n  // This mixin isn't used in the context of a theme so we can disable the ampersand check.\n  // stylelint-disable material/no-ampersand-beyond-selector-start\n  .mat-badge-content {\n    width: $size;\n    height: $size;\n    line-height: $size;\n\n    @if ($font-size-token) {\n      @include token-utils.use-tokens(tokens-mat-badge.$prefix,\n        tokens-mat-badge.get-token-slots()) {\n        @include token-utils.create-token-slot(font-size, $font-size-token, $_emit-fallback-vars);\n      }\n    }\n  }\n\n  &.mat-badge-above .mat-badge-content {\n    top: math.div(-$size, 2);\n  }\n\n  &.mat-badge-below .mat-badge-content {\n    bottom: math.div(-$size, 2);\n  }\n\n  &.mat-badge-before .mat-badge-content {\n    left: -$size;\n  }\n\n  [dir='rtl'] &.mat-badge-before .mat-badge-content {\n    left: auto;\n    right: -$size;\n  }\n\n  &.mat-badge-after .mat-badge-content {\n    right: -$size;\n  }\n\n  [dir='rtl'] &.mat-badge-after .mat-badge-content {\n    right: auto;\n    left: -$size;\n  }\n\n  &.mat-badge-overlap {\n    &.mat-badge-before .mat-badge-content {\n      left: math.div(-$size, 2);\n    }\n\n    [dir='rtl'] &.mat-badge-before .mat-badge-content {\n      left: auto;\n      right: math.div(-$size, 2);\n    }\n\n    &.mat-badge-after .mat-badge-content {\n      right: math.div(-$size, 2);\n    }\n\n    [dir='rtl'] &.mat-badge-after .mat-badge-content {\n      right: auto;\n      left: math.div(-$size, 2);\n    }\n  }\n  // stylelint-enable\n}\n\n// Structural styles for the badge. They have to be included as a part of the theme,\n// because the badge is a directive and we have no other way of attaching styles to it.\n@mixin _badge-structure {\n  .mat-badge {\n    position: relative;\n\n    // The badge should make sure its host is overflow visible so that the badge content\n    // can be rendered outside of the element. Some components such as <mat-icon> explicitly\n    // style `overflow: hidden` so this requires extra specificity so that it does not\n    // depend on style load order.\n    &.mat-badge {\n      overflow: visible;\n    }\n  }\n\n  .mat-badge-content {\n    position: absolute;\n    text-align: center;\n    display: inline-block;\n    border-radius: 50%;\n    transition: transform 200ms ease-in-out;\n    transform: scale(0.6);\n    overflow: hidden;\n    white-space: nowrap;\n    text-overflow: ellipsis;\n    pointer-events: none;\n\n    @include token-utils.use-tokens(tokens-mat-badge.$prefix, tokens-mat-badge.get-token-slots()) {\n      @include token-utils.create-token-slot(background-color, background-color);\n      @include token-utils.create-token-slot(color, text-color);\n      @include token-utils.create-token-slot(font-family, text-font, $_emit-fallback-vars);\n      @include token-utils.create-token-slot(font-size, text-size, $_emit-fallback-vars);\n      @include token-utils.create-token-slot(font-weight, text-weight, $_emit-fallback-vars);\n    }\n\n    @include cdk.high-contrast(active, off) {\n      outline: solid 1px;\n      border-radius: 0;\n    }\n  }\n\n  .mat-badge-disabled .mat-badge-content {\n    @include token-utils.use-tokens(tokens-mat-badge.$prefix, tokens-mat-badge.get-token-slots()) {\n      @include token-utils.create-token-slot(background-color, disabled-state-background-color);\n      @include token-utils.create-token-slot(color, disabled-state-text-color);\n    }\n  }\n\n  .mat-badge-hidden .mat-badge-content {\n    display: none;\n  }\n\n  .ng-animate-disabled .mat-badge-content,\n  .mat-badge-content._mat-animation-noopable {\n    transition: none;\n  }\n\n  // The active class is added after the element is added\n  // so it can animate scale to default\n  .mat-badge-content.mat-badge-active {\n    // Scale to `none` instead of `1` to avoid blurry text in some browsers.\n    transform: none;\n  }\n\n  .mat-badge-small {\n    @include _badge-size($small-size, small-size-text-size);\n  }\n\n  .mat-badge-medium {\n    @include _badge-size($default-size, null);\n  }\n\n  .mat-badge-large {\n    @include _badge-size($large-size, large-size-text-size);\n  }\n}\n\n@mixin color($config-or-theme) {\n  $config: theming.get-color-config($config-or-theme);\n  $accent: map.get($config, accent);\n  $warn: map.get($config, warn);\n\n  @include sass-utils.current-selector-or-root() {\n    @include token-utils.create-token-values(tokens-mat-badge.$prefix,\n      tokens-mat-badge.get-color-tokens($config));\n  }\n\n  .mat-badge-accent {\n    @include token-utils.create-token-values(tokens-mat-badge.$prefix,\n      tokens-mat-badge.private-get-color-palette-color-tokens($accent));\n  }\n\n  .mat-badge-warn {\n    @include token-utils.create-token-values(tokens-mat-badge.$prefix,\n      tokens-mat-badge.private-get-color-palette-color-tokens($warn));\n  }\n}\n\n@mixin typography($config-or-theme) {\n  $config: typography.private-typography-to-2014-config(\n      theming.get-typography-config($config-or-theme));\n\n  @include sass-utils.current-selector-or-root() {\n    @include token-utils.create-token-values(tokens-mat-badge.$prefix,\n      tokens-mat-badge.get-typography-tokens($config));\n  }\n}\n\n@mixin density($config-or-theme) {}\n\n@mixin theme($theme-or-color-config) {\n  $theme: theming.private-legacy-get-theme($theme-or-color-config);\n  @include theming.private-check-duplicate-theme-styles($theme, 'mat-badge') {\n    $color: theming.get-color-config($theme);\n    $density: theming.get-density-config($theme);\n    $typography: theming.get-typography-config($theme);\n\n    // Try to reduce the number of times that the structural styles are emitted.\n    @if not $_badge-structure-emitted {\n      @include _badge-structure;\n\n      // Only flip the flag if the mixin is included at the top level. Otherwise the first\n      // inclusion might be inside of a theme class which will exclude the structural styles\n      // from all other themes.\n      @if not & {\n        $_badge-structure-emitted: true !global;\n      }\n    }\n\n    @if $color != null {\n      @include color($color);\n    }\n    @if $density != null {\n      @include density($density);\n    }\n    @if $typography != null {\n      @include typography($typography);\n    }\n  }\n}\n","@use 'sass:color';\n@use 'sass:map';\n@use '../core/tokens/m2/mat/datepicker' as tokens-mat-datepicker;\n@use '../core/theming/theming';\n@use '../core/tokens/token-utils';\n@use '../core/style/sass-utils';\n@use '../core/typography/typography';\n@use '../button/icon-button-theme';\n\n// TODO(crisbeto): these variables aren't used anymore and should be removed.\n$selected-today-box-shadow-width: 1px;\n$selected-fade-amount: 0.6;\n$range-fade-amount: 0.2;\n$today-fade-amount: 0.2;\n$calendar-body-font-size: 13px !default;\n$calendar-weekday-table-font-size: 11px !default;\n\n@mixin _calendar-color($config, $palette) {\n  $palette-color: theming.get-color-from-palette(map.get($config, $palette));\n  $range-color: tokens-mat-datepicker.private-get-range-background-color($palette-color);\n  $range-tokens: tokens-mat-datepicker.get-range-color-tokens($range-color);\n  $calendar-tokens:\n    tokens-mat-datepicker.private-get-calendar-color-palette-color-tokens($config, $palette);\n\n  @include token-utils.create-token-values(tokens-mat-datepicker.$prefix,\n    map.merge($calendar-tokens, $range-tokens));\n}\n\n@mixin color($config-or-theme) {\n  $config: theming.get-color-config($config-or-theme);\n  $foreground: map.get($config, foreground);\n  $background: map.get($config, background);\n  $disabled-color: theming.get-color-from-palette($foreground, disabled-text);\n\n  @include sass-utils.current-selector-or-root() {\n    @include token-utils.create-token-values(tokens-mat-datepicker.$prefix,\n      tokens-mat-datepicker.get-color-tokens($config));\n  }\n\n  .mat-datepicker-content {\n    &.mat-accent {\n      @include _calendar-color($config, accent);\n    }\n\n    &.mat-warn {\n      @include _calendar-color($config, warn);\n    }\n  }\n\n  .mat-datepicker-toggle-active {\n    &.mat-accent {\n      $accent-tokens:\n        tokens-mat-datepicker.private-get-toggle-color-palette-color-tokens($config, accent);\n      @include token-utils.create-token-values(tokens-mat-datepicker.$prefix, $accent-tokens);\n    }\n\n    &.mat-warn {\n      $warn-tokens:\n        tokens-mat-datepicker.private-get-toggle-color-palette-color-tokens($config, warn);\n      @include token-utils.create-token-values(tokens-mat-datepicker.$prefix, $warn-tokens);\n    }\n  }\n}\n\n@mixin typography($config-or-theme) {\n  $config: typography.private-typography-to-2014-config(\n      theming.get-typography-config($config-or-theme));\n\n  @include sass-utils.current-selector-or-root() {\n    @include token-utils.create-token-values(tokens-mat-datepicker.$prefix,\n      tokens-mat-datepicker.get-typography-tokens($config));\n  }\n}\n\n@mixin date-range-colors(\n  $range-color,\n  $comparison-color: tokens-mat-datepicker.$private-default-comparison-color,\n  $overlap-color: tokens-mat-datepicker.$private-default-overlap-color,\n  $overlap-selected-color:\n    tokens-mat-datepicker.private-get-default-overlap-selected-color($overlap-color)) {\n  $tokens: tokens-mat-datepicker.get-range-color-tokens(\n    $range-color: $range-color,\n    $comparison-color: $comparison-color,\n    $overlap-color: $overlap-color,\n    $overlap-selected-color: $overlap-selected-color,\n  );\n\n  @include sass-utils.current-selector-or-root() {\n    @include token-utils.create-token-values(tokens-mat-datepicker.$prefix, $tokens);\n  }\n}\n\n@mixin density($config-or-theme) {\n  $density-scale: theming.get-density-config($config-or-theme);\n\n  // TODO(crisbeto): move this into the structural styles\n  // once the icon button density is switched to tokens.\n\n  // Regardless of the user-passed density, we want the calendar\n  // previous/next buttons to remain at density -2\n  .mat-calendar-controls {\n    @include icon-button-theme.density(-2);\n  }\n}\n\n@mixin theme($theme-or-color-config) {\n  $theme: theming.private-legacy-get-theme($theme-or-color-config);\n  @include theming.private-check-duplicate-theme-styles($theme, 'mat-datepicker') {\n    $color: theming.get-color-config($theme);\n    $density: theming.get-density-config($theme);\n    $typography: theming.get-typography-config($theme);\n\n    @if $color != null {\n      @include color($color);\n    }\n    @if $density != null {\n      @include density($density);\n    }\n    @if $typography != null {\n      @include typography($typography);\n    }\n  }\n}\n","@use 'sass:map';\n@use '../core/theming/theming';\n@use '../core/tokens/m2/mat/icon' as tokens-mat-icon;\n@use '../core/tokens/token-utils';\n@use '../core/style/sass-utils';\n\n@mixin _palette-colors($config, $palette-name) {\n  $palette: map.get($config, $palette-name);\n  $color: theming.get-color-from-palette($palette, text);\n  $tokens: tokens-mat-icon.private-get-icon-color-tokens($color);\n  @include token-utils.create-token-values(tokens-mat-icon.$prefix, $tokens);\n}\n\n@mixin color($config-or-theme) {\n  $config: theming.get-color-config($config-or-theme);\n\n  @include sass-utils.current-selector-or-root() {\n    @include token-utils.create-token-values(tokens-mat-icon.$prefix,\n      tokens-mat-icon.get-color-tokens($config));\n  }\n\n  .mat-icon {\n    &.mat-primary {\n      @include _palette-colors($config, primary);\n    }\n\n    &.mat-accent {\n      @include _palette-colors($config, accent);\n    }\n\n    &.mat-warn {\n      @include _palette-colors($config, warn);\n    }\n  }\n}\n\n@mixin typography($config-or-theme) {}\n\n@mixin density($config-or-theme) {}\n\n@mixin theme($theme-or-color-config) {\n  $theme: theming.private-legacy-get-theme($theme-or-color-config);\n  @include theming.private-check-duplicate-theme-styles($theme, 'mat-icon') {\n    $color: theming.get-color-config($theme);\n    $density: theming.get-density-config($theme);\n    $typography: theming.get-typography-config($theme);\n\n    @if $color != null {\n      @include color($color);\n    }\n    @if $density != null {\n      @include density($density);\n    }\n    @if $typography != null {\n      @include typography($typography);\n    }\n  }\n}\n\n","@use 'sass:map';\n@use 'sass:math';\n@use '../core/theming/theming';\n@use '../core/typography/typography';\n@use '../core/density/private/compatibility';\n@use '../core/style/sass-utils';\n@use '../core/tokens/token-utils';\n@use '../core/tokens/m2/mat/stepper' as tokens-mat-stepper;\n@use './stepper-variables';\n\n@mixin color($config-or-theme) {\n  $config: theming.get-color-config($config-or-theme);\n\n  @include sass-utils.current-selector-or-root() {\n    @include token-utils.create-token-values(tokens-mat-stepper.$prefix,\n      tokens-mat-stepper.get-color-tokens($config));\n\n    .mat-step-header.mat-accent {\n      @include token-utils.create-token-values(tokens-mat-stepper.$prefix,\n        tokens-mat-stepper.private-get-color-palette-color-tokens(map.get($config, accent)));\n    }\n\n    .mat-step-header.mat-warn {\n      @include token-utils.create-token-values(tokens-mat-stepper.$prefix,\n        tokens-mat-stepper.private-get-color-palette-color-tokens(map.get($config, warn)));\n    }\n  }\n}\n\n@mixin typography($config-or-theme) {\n  $config: typography.private-typography-to-2014-config(\n      theming.get-typography-config($config-or-theme));\n\n  @include sass-utils.current-selector-or-root() {\n    @include token-utils.create-token-values(tokens-mat-stepper.$prefix,\n      tokens-mat-stepper.get-typography-tokens($config));\n  }\n}\n\n@mixin density($config-or-theme) {\n  $density-scale: theming.get-density-config($config-or-theme);\n  $height: compatibility.private-density-prop-value(stepper-variables.$density-config,\n    $density-scale, height);\n  $vertical-padding: math.div($height - stepper-variables.$label-header-height, 2);\n\n  @include sass-utils.current-selector-or-root() {\n    @include token-utils.create-token-values(tokens-mat-stepper.$prefix,\n      tokens-mat-stepper.get-density-tokens($density-scale));\n  }\n}\n\n@mixin theme($theme-or-color-config) {\n  $theme: theming.private-legacy-get-theme($theme-or-color-config);\n  @include theming.private-check-duplicate-theme-styles($theme, 'mat-stepper') {\n    $color: theming.get-color-config($theme);\n    $density: theming.get-density-config($theme);\n    $typography: theming.get-typography-config($theme);\n\n    @if $color != null {\n      @include color($color);\n    }\n    @if $density != null {\n      @include density($density);\n    }\n    @if $typography != null {\n      @include typography($typography);\n    }\n  }\n}\n","@use 'sass:color';\n@use 'sass:map';\n@use 'sass:meta';\n@use '../core/theming/theming';\n\n@mixin color($config-or-theme) {\n  $config: theming.get-color-config($config-or-theme);\n  $background: map.get($config, background);\n  $foreground: map.get($config, foreground);\n\n  .mat-sort-header-arrow {\n    $table-background: theming.get-color-from-palette($background, 'card');\n    $text-color: theming.get-color-from-palette($foreground, secondary-text);\n\n    // Because the arrow is made up of multiple elements that are stacked on top of each other,\n    // we can't use the semi-transparent color from the theme directly. If the value is a color\n    // *type*, we convert it into a solid color by taking the opacity from the rgba value and\n    // using the value to determine the percentage of the background to put into foreground\n    // when mixing the colors together. Otherwise, if it resolves to something different\n    // (e.g. it resolves to a CSS variable), we use the color directly.\n    @if (meta.type-of($table-background) == color and meta.type-of($text-color) == color) {\n      $text-opacity: opacity($text-color);\n      color: color.mix($table-background, rgba($text-color, 1), (1 - $text-opacity) * 100%);\n    }\n    @else {\n      color: $text-color;\n    }\n  }\n}\n\n@mixin typography($config-or-theme) {}\n\n@mixin density($config-or-theme) {}\n\n@mixin theme($theme-or-color-config) {\n  $theme: theming.private-legacy-get-theme($theme-or-color-config);\n  @include theming.private-check-duplicate-theme-styles($theme, 'mat-sort') {\n    $color: theming.get-color-config($theme);\n    $density: theming.get-density-config($theme);\n    $typography: theming.get-typography-config($theme);\n\n    @if $color != null {\n      @include color($color);\n    }\n    @if $density != null {\n      @include density($density);\n    }\n    @if $typography != null {\n      @include typography($typography);\n    }\n  }\n}\n","@use 'sass:map';\n@use '../core/theming/theming';\n@use '../core/typography/typography';\n@use '../core/tokens/m2/mat/toolbar' as tokens-mat-toolbar;\n@use '../core/tokens/token-utils';\n@use '../core/style/sass-utils';\n\n@mixin _palette-styles($palette) {\n  @include token-utils.create-token-values(\n    tokens-mat-toolbar.$prefix,\n    tokens-mat-toolbar.private-get-color-palette-color-tokens(\n      $background-color: theming.get-color-from-palette($palette),\n      $text-color: theming.get-color-from-palette($palette, default-contrast)\n    )\n  );\n}\n\n@mixin color($config-or-theme) {\n  $config: theming.get-color-config($config-or-theme);\n\n  @include sass-utils.current-selector-or-root() {\n    @include token-utils.create-token-values(tokens-mat-toolbar.$prefix,\n      tokens-mat-toolbar.get-color-tokens($config));\n  }\n\n  .mat-toolbar {\n    &.mat-primary {\n      @include _palette-styles(map.get($config, primary));\n    }\n\n    &.mat-accent {\n      @include _palette-styles(map.get($config, accent));\n    }\n\n    &.mat-warn {\n      @include _palette-styles(map.get($config, warn));\n    }\n  }\n}\n\n@mixin typography($config-or-theme) {\n  $config: typography.private-typography-to-2014-config(\n      theming.get-typography-config($config-or-theme));\n\n  @include sass-utils.current-selector-or-root() {\n    @include token-utils.create-token-values(tokens-mat-toolbar.$prefix,\n      tokens-mat-toolbar.get-typography-tokens($config));\n  }\n}\n\n@mixin density($config-or-theme) {\n  $density-scale: theming.get-density-config($config-or-theme);\n\n  @include sass-utils.current-selector-or-root() {\n    @include token-utils.create-token-values(tokens-mat-toolbar.$prefix,\n      tokens-mat-toolbar.get-density-tokens($density-scale));\n  }\n}\n\n@mixin theme($theme-or-color-config) {\n  $theme: theming.private-legacy-get-theme($theme-or-color-config);\n  @include theming.private-check-duplicate-theme-styles($theme, 'mat-toolbar') {\n    $color: theming.get-color-config($theme);\n    $density: theming.get-density-config($theme);\n    $typography: theming.get-typography-config($theme);\n\n    @if $color != null {\n      @include color($color);\n    }\n    @if $density != null {\n      @include density($density);\n    }\n    @if $typography != null {\n      @include typography($typography);\n    }\n  }\n}\n","@use 'sass:map';\n@use '../core/density/private/compatibility';\n@use '../core/theming/theming';\n@use '../core/typography/typography';\n@use '../core/typography/typography-utils';\n@use './tree-variables';\n\n@mixin color($config-or-theme) {\n  $config: theming.get-color-config($config-or-theme);\n  $background: map.get($config, background);\n  $foreground: map.get($config, foreground);\n\n  .mat-tree {\n    background: theming.get-color-from-palette($background, 'card');\n  }\n\n  .mat-tree-node,\n  .mat-nested-tree-node {\n    color: theming.get-color-from-palette($foreground, text);\n  }\n}\n\n@mixin typography($config-or-theme) {\n  $config: typography.private-typography-to-2014-config(\n      theming.get-typography-config($config-or-theme));\n  .mat-tree {\n    font-family: typography-utils.font-family($config);\n  }\n\n  .mat-tree-node,\n  .mat-nested-tree-node {\n    font-weight: typography-utils.font-weight($config, body-1);\n    font-size: typography-utils.font-size($config, body-1);\n  }\n}\n\n@mixin density($config-or-theme) {\n  $density-scale: theming.get-density-config($config-or-theme);\n  $height: compatibility.private-density-prop-value(tree-variables.$density-config,\n    $density-scale, height);\n\n  @include compatibility.private-density-legacy-compatibility() {\n    .mat-tree-node {\n      min-height: $height;\n    }\n  }\n}\n\n@mixin theme($theme-or-color-config) {\n  $theme: theming.private-legacy-get-theme($theme-or-color-config);\n  @include theming.private-check-duplicate-theme-styles($theme, 'mat-tree') {\n    $color: theming.get-color-config($theme);\n    $density: theming.get-density-config($theme);\n    $typography: theming.get-typography-config($theme);\n\n    @if $color != null {\n      @include color($color);\n    }\n    @if $density != null {\n      @include density($density);\n    }\n    @if $typography != null {\n      @include typography($typography);\n    }\n  }\n}\n\n"],"mappings":"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AA,KAAA,KAAA,CAAA,EAAA,IAAA,IAAA,SAAA,CAAA,EAAA,IAAA,IAAA,STqPJ,CY/RI,CAAA,iBAAA,CAAA,0BAAA,CAAA,iBH0CA,WAAA,EAAA,IAAA,IAAA,KAAA,KAAA,CAAA,EAAA,IAAA,IAAA,SAAA,CAAA,EAAA,IAAA,IAAA,STyPJ,CYnSI,CAAA,iBAAA,CAAA,0BAAA,CAAA,iBH0CA,WAAA,EAAA,IAAA,IAAA,KAAA,KAAA,CAAA,EAAA,IAAA,IAAA,SAAA,CAAA,EAAA,IAAA,KAAA,ST6PJ,CYvSI,CAAA,iBAAA,CAAA,0BAAA,CAAA,iBH0CA,WAAA,EAAA,IAAA,IAAA,KAAA,KAAA,CAAA,EAAA,IAAA,IAAA,SAAA,CAAA,EAAA,IAAA,KAAA,STiQJ,CY3SI,CAAA,iBAAA,CAAA,0BAAA,CAAA,iBH0CA,WAAA,EAAA,IAAA,IAAA,KAAA,KAAA,CAAA,EAAA,IAAA,KAAA,SAAA,CAAA,EAAA,IAAA,KAAA,STqQJ,CY/SI,CAAA,iBAAA,CAAA,0BAAA,CAAA,iBH0CA,WAAA,EAAA,IAAA,IAAA,KAAA,KAAA,CAAA,EAAA,IAAA,KAAA,IAAA,SAAA,CAAA,EAAA,IAAA,KAAA,IAAA,STyQJ,CYnTI,CAAA,iBAAA,CAAA,0BAAA,CAAA,iBH0CA,WAAA,EAAA,IAAA,IAAA,KAAA,KAAA,CAAA,EAAA,IAAA,KAAA,IAAA,SAAA,CAAA,EAAA,IAAA,KAAA,IAAA,ST6QJ,CYvTI,CAAA,iBAAA,CAAA,0BAAA,CAAA,iBH0CA,WAAA,EAAA,IAAA,IAAA,KAAA,KAAA,CAAA,EAAA,IAAA,KAAA,IAAA,SAAA,CAAA,EAAA,IAAA,KAAA,IAAA,STiRJ,CY3TI,CAAA,kBAAA,CAAA,0BAAA,CAAA,kBH0CA,WAAA,EAAA,IAAA,IAAA,KAAA,KAAA,CAAA,EAAA,KAAA,KAAA,IAAA,SAAA,CAAA,EAAA,IAAA,KAAA,IAAA,STqRJ,CY/TI,CAAA,kBAAA,CAAA,0BAAA,CAAA,kBH0CA,WAAA,EAAA,IAAA,IAAA,KAAA,KAAA,CAAA,EAAA,KAAA,KAAA,IAAA,SAAA,CAAA,EAAA,IAAA,KAAA,IAAA,STyRJ,CYnUI,CAAA,kBAAA,CAAA,0BAAA,CAAA,kBH0CA,WAAA,EAAA,IAAA,IAAA,KAAA,KAAA,CAAA,EAAA,KAAA,KAAA,IAAA,SAAA,CAAA,EAAA,IAAA,KAAA,IAAA,ST6RJ,CYvUI,CAAA,kBAAA,CAAA,0BAAA,CAAA,kBH0CA,WAAA,EAAA,IAAA,IAAA,KAAA,KAAA,CAAA,EAAA,KAAA,KAAA,IAAA,SAAA,CAAA,EAAA,IAAA,KAAA,IAAA,STiSJ,CY3UI,CAAA,kBAAA,CAAA,0BAAA,CAAA,kBH0CA,WAAA,EAAA,IAAA,IAAA,KAAA,KAAA,CAAA,EAAA,KAAA,KAAA,IAAA,SAAA,CAAA,EAAA,IAAA,KAAA,IAAA,STqSJ,CY/UI,CAAA,kBAAA,CAAA,0BAAA,CAAA,kBH0CA,WAAA,EAAA,IAAA,IAAA,KAAA,KAAA,CAAA,EAAA,KAAA,KAAA,IAAA,SAAA,CAAA,EAAA,IAAA,KAAA,IAAA,STySJ,CYnVI,CAAA,kBAAA,CAAA,0BAAA,CAAA,kBH0CA,WAAA,EAAA,IAAA,KAAA,KAAA,KAAA,CAAA,EAAA,KAAA,KAAA,IAAA,SAAA,CAAA,EAAA,IAAA,KAAA,IAAA,ST6SJ,CYvVI,CAAA,kBAAA,CAAA,0BAAA,CAAA,kBH0CA,WAAA,EAAA,IAAA,KAAA,KAAA,KAAA,CAAA,EAAA,KAAA,KAAA,IAAA,SAAA,CAAA,EAAA,IAAA,KAAA,IAAA,STiTJ,CY3VI,CAAA,kBAAA,CAAA,0BAAA,CAAA,kBH0CA,WAAA,EAAA,IAAA,KAAA,KAAA,KAAA,CAAA,EAAA,KAAA,KAAA,IAAA,SAAA,CAAA,EAAA,IAAA,KAAA,IAAA,STqTJ,CY/VI,CAAA,kBAAA,CAAA,0BAAA,CAAA,kBH0CA,WAAA,EAAA,IAAA,KAAA,KAAA,KAAA,CAAA,EAAA,KAAA,KAAA,IAAA,SAAA,CAAA,EAAA,IAAA,KAAA,IAAA,STyTJ,CYnWI,CAAA,kBAAA,CAAA,0BAAA,CAAA,kBH0CA,WAAA,EAAA,KAAA,KAAA,KAAA,KAAA,CAAA,EAAA,KAAA,KAAA,IAAA,SAAA,CAAA,EAAA,IAAA,KAAA,IAAA,ST6TJ,CYvWI,CAAA,kBAAA,C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","names":[],"sourceRoot":"webpack:///","file":"theme-dark.14909561e4e23e71.css","x_google_ignoreList":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54]}